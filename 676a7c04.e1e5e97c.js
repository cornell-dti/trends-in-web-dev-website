(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{101:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return c})),n.d(t,"toc",(function(){return l})),n.d(t,"default",(function(){return b}));var a=n(3),r=n(7),i=(n(0),n(138)),o={id:"lecture1",title:"Lecture 1"},c={unversionedId:"lecture1",id:"version-2021fa/lecture1",isDocsHomePage:!1,title:"Lecture 1",description:"Lecture Slides",source:"@site/versioned_docs/version-2021fa/lecture1.md",slug:"/lecture1",permalink:"/docs/lecture1",version:"2021fa",sidebar:"docs",previous:{title:"Setup your editor",permalink:"/docs/setup-editor"}},l=[{value:"JavaScript",id:"javascript",children:[{value:"What is JavaScript",id:"what-is-javascript",children:[]},{value:"Basic JavaScript Syntax",id:"basic-javascript-syntax",children:[]}]},{value:"TypeScript",id:"typescript",children:[{value:"JavaScript Types",id:"javascript-types",children:[]},{value:"How are types used?",id:"how-are-types-used",children:[]},{value:"Why TypeScript?",id:"why-typescript",children:[]},{value:"TypeScript Types",id:"typescript-types",children:[]},{value:"Demo",id:"demo",children:[]}]}],s={toc:l};function b(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://docs.google.com/presentation/d/1CPukT0pvUSrMRsoiP6ZAS5A6GqXHo6jQ9prOlBtAZFI/edit?usp=sharing"}),"Lecture Slides")),Object(i.b)("p",null,"No homework this week!"),Object(i.b)("h2",{id:"javascript"},"JavaScript"),Object(i.b)("h3",{id:"what-is-javascript"},"What is JavaScript"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"JavaScript is the de facto language of the web"),Object(i.b)("li",{parentName:"ul"},"Commonly used in conjunction with HTML/CSS"),Object(i.b)("li",{parentName:"ul"},"Became really popular for powering client-side logic through AJAX",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"Previously, languages like PHP had to communicate with the server before\ncoming back with a response"))),Object(i.b)("li",{parentName:"ul"},"These days, JavaScript is everywhere!")),Object(i.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(i.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(i.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(i.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(i.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(i.b)("p",{parentName:"div"},"Java is to JavaScript as car is to carpet. They are very different languages!"))),Object(i.b)("h3",{id:"basic-javascript-syntax"},"Basic JavaScript Syntax"),Object(i.b)("h4",{id:"variables"},"Variables"),Object(i.b)("p",null,"There are three ways to create variables in JS:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},Object(i.b)("del",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"del"},"var x = 5"))),Object(i.b)("li",{parentName:"ol"},Object(i.b)("inlineCode",{parentName:"li"},"let x = 5")),Object(i.b)("li",{parentName:"ol"},Object(i.b)("strong",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"strong"},"const x = 5")))),Object(i.b)("p",null,"We prefer using ",Object(i.b)("strong",{parentName:"p"},"const")," for immutability although let is also accepted.\n",Object(i.b)("em",{parentName:"p"},Object(i.b)("strong",{parentName:"em"},"Never use var."))," We'll talk more about why in Lecture 4, where we cover\nbest-practices in modern JavaScript (ES6)."),Object(i.b)("h4",{id:"if-statements"},"if statements"),Object(i.b)("p",null,"Nothing surprising here."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"if (condition) {\n  // executes if condition is true\n} else if (condition2) {\n  // executes if condition is false but condition2 is true\n} else {\n  // executes if condition is false\n}\n")),Object(i.b)("h4",{id:"for-loops"},"for loops"),Object(i.b)("h5",{id:"regular-counter-for-loop"},"regular counter for loop"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"for (let i = 0; i < 5; i++) {\n  console.log(i);\n}\n")),Object(i.b)("h5",{id:"for-of-loop"},"for of loop"),Object(i.b)("p",null,"We can use ",Object(i.b)("inlineCode",{parentName:"p"},"for..of")," loops to loop through elements of an array."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const arr = [10, 20, 30, 40];\nfor (const val of arr) {\n  console.log(val); // prints values: 10, 20, 30, 40\n}\n")),Object(i.b)("h4",{id:"for-in-loop"},"for in loop"),Object(i.b)("p",null,"We can use ",Object(i.b)("inlineCode",{parentName:"p"},"for..in")," loops to loop through keys of an object. A good way to remember\nwhen to use ",Object(i.b)("inlineCode",{parentName:"p"},"of")," or ",Object(i.b)("inlineCode",{parentName:"p"},"in")," is that ",Object(i.b)("inlineCode",{parentName:"p"},"of")," is for iterables, while ",Object(i.b)("inlineCode",{parentName:"p"},"in")," is for objects."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'const object = { a: 1, b: 2, c: 3 };\n\nfor (const property in object) {\n  console.log(`${property}: ${object[property]}`);\n}\n\n// expected output:\n// "a: 1"\n// "b: 2"\n// "c: 3"\n')),Object(i.b)("h4",{id:"while-loops"},"while loops"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'let n = 0;\n\nwhile (n < 3) {\n  console.log(n);\n  n++;\n}\n\n// expected output:\n// "0"\n// "1"\n// "2"\n')),Object(i.b)("h4",{id:"function-declaration"},"function declaration"),Object(i.b)("p",null,"We can use the function key word to define a function!"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"function calcRectArea(width, height) {\n  return width * height;\n}\n\nconsole.log(calcRectArea(5, 6)); // 30\n")),Object(i.b)("p",null,"or we can use ",Object(i.b)("em",{parentName:"p"},"arrow functions"),":"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const calcRectArea = (width, height) => {\n  return width * height;\n};\n")),Object(i.b)("p",null,"More details on arrow functions in a few weeks when we talk about ES6 (Lecture 4)!"),Object(i.b)("div",{className:"admonition admonition-tip alert alert--success"},Object(i.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(i.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"}),Object(i.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"})))),"tip")),Object(i.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(i.b)("p",{parentName:"div"},"JavaScript is a super powerful language and this was just a small sample of its language features. Check out Mozilla Developer Network (MDN) for the best JavaScript documentation: ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide"}),"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide")))),Object(i.b)("h2",{id:"typescript"},"TypeScript"),Object(i.b)("p",null,"TypeScript is a typed ",Object(i.b)("em",{parentName:"p"},"superset")," of JavaScript that compiles to plain JavaScript. Superset means TypeScript has everything in JavaScript and more. (Built by Microsoft!)"),Object(i.b)("h3",{id:"javascript-types"},"JavaScript Types"),Object(i.b)("p",null,"JavaScript has 6 primitive types:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Boolean"),Object(i.b)("li",{parentName:"ul"},"String"),Object(i.b)("li",{parentName:"ul"},"Number"),Object(i.b)("li",{parentName:"ul"},"Symbol"),Object(i.b)("li",{parentName:"ul"},"undefined"),Object(i.b)("li",{parentName:"ul"},"BigInt")),Object(i.b)("p",null,"All JavaScript values are those 6 primitive types, or an:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"object"),Object(i.b)("li",{parentName:"ul"},"function (JavaScript is functional!)"),Object(i.b)("li",{parentName:"ul"},"null")),Object(i.b)("h3",{id:"how-are-types-used"},"How are types used?"),Object(i.b)("p",null,"In JavaScript we had:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"let str = 'Hello, trends';\nlet num = 42;\nlet truth = true;\n\nconst someFunc = (x, s, b) => {\n  // do some operations...\n  return x;\n};\n")),Object(i.b)("p",null,"Notice we don't have any types here! JavaScript is ",Object(i.b)("strong",{parentName:"p"},"weakly typed"),", meaning\nthat it is lenient with declaring what types variables are before you\nrun a program with them, similarly to Python."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"let str: string = 'Hello, trends';\nlet num: number = 42;\nlet truth: boolean = false;\nconst someFunc = (x: number, s: string, b: boolean): number => {\n  // do some operations...\n  return x;\n};\n")),Object(i.b)("p",null,"TypeScript allows us to add type information!"),Object(i.b)("h3",{id:"why-typescript"},"Why TypeScript?"),Object(i.b)("p",null,"JavaScript code can be ambiguous. We had the function:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const someFunc = (x, s, b) => {\n  // do some operations...\n  return x;\n};\n")),Object(i.b)("p",null,"What are ",Object(i.b)("inlineCode",{parentName:"p"},"x, s, b"),"? What should I pass in for those? What should I expect returned?"),Object(i.b)("p",null,"Adding the TypeScript types makes this code self-documenting:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"const someFunc = (x: number, s: string, b: boolean): number => {\n  // do some operations...\n  return x;\n};\n")),Object(i.b)("p",null,"JavaScript variables can also change type which can be undesirable, unexpected, and error-prone."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"let str = 'Hello, trends';\nlet num = 42;\nlet truth = true;\nstr = 13;\n")),Object(i.b)("p",null,"None of these variables have to be any specific type! I can have ",Object(i.b)("inlineCode",{parentName:"p"},"str")," be a string and then a number."),Object(i.b)("p",null,"In the end, we want to use TypeScript because it is:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Easier to read"),Object(i.b)("li",{parentName:"ul"},"Easier and faster to implement"),Object(i.b)("li",{parentName:"ul"},"Easier to refactor"),Object(i.b)("li",{parentName:"ul"},"Less buggy")),Object(i.b)("h3",{id:"typescript-types"},"TypeScript Types"),Object(i.b)("p",null,"Basic Syntax:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"let <var_name>: <type> = <something>;\n")),Object(i.b)("p",null,"We can also use ",Object(i.b)("inlineCode",{parentName:"p"},"const")," but again no ",Object(i.b)("inlineCode",{parentName:"p"},"var"),"."),Object(i.b)("h4",{id:"basic-types"},"Basic Types"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"// Boolean\nlet isDone: boolean = false;\n// Number can be decimal, or in any base!\nlet decimal: number = 4.2;\nlet binary: number = 0b1010;\nlet hex: number = 0xf00d;\n// String\nlet lang: string = 'typescript';\nlet templateStr: string = `We love ${lang}`;\n// Boolean\nlet isDone: boolean = false;\n// Number can be decimal, or in any base!\nlet decimal: number = 4.2;\nlet binary: number = 0b1010;\nlet hex: number = 0xf00d;\n// String\nlet lang: string = 'typescript';\nlet templateStr: string = `We love ${lang}`;\n")),Object(i.b)("h4",{id:"any"},"Any"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"any")," is a wildcard and it can be anything. ",Object(i.b)("inlineCode",{parentName:"p"},"any")," places no restrictions on type."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"// Any: can be anything!\nlet notSure: any = 4;\nnotSure = 'maybe a string instead';\nnotSure = false; // okay, definitely a boolean\n")),Object(i.b)("p",null,"If you were to use ",Object(i.b)("inlineCode",{parentName:"p"},"any")," everywhere though you might as well just use JavaScript."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"let anyList: any[] = [4, 'le string', false];\n")),Object(i.b)("p",null,"But it can be useful in specifying collections of items of different types, when\nyou don't know the constituent types. If you did know that they could either\nbe numbers, strings, or booleans as the above code snippet, you could have written:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"let hodgePodgeList: (number | string | boolean)[] = [4, 'le string', false];\n")),Object(i.b)("h4",{id:"functions"},"Functions"),Object(i.b)("p",null,"Functions can have types too!"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"// un-typed\nconst myFunc = (x, y) => x + y;\n// typed\nconst myFunc = (x: number, y: number): number => x + y;\n")),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"myFunc")," has type ",Object(i.b)("inlineCode",{parentName:"p"},"(x: number, y: number): number"),"."),Object(i.b)("p",null,"TypeScript can do some limited type inference so if you leave out the return type ",Object(i.b)("inlineCode",{parentName:"p"},"number"),", TypeScript can infer it since we are just adding two numbers which can only produce a number. If TypeScript can't infer the type, it defaults as ",Object(i.b)("inlineCode",{parentName:"p"},"any"),"."),Object(i.b)("p",null,"We can also have optional parameters:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"const introduce = (name: string, github?: string): string => {\n  return github\n    ? `Hi, I'm ${name}. Checkout my GitHub @${github}`\n    : `Hi, I'm ${name}. I don't have a GitHub.`;\n};\n")),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"github?")," designates ",Object(i.b)("inlineCode",{parentName:"p"},"github")," as an optional parameter that defaults to ",Object(i.b)("inlineCode",{parentName:"p"},"undefined"),"."),Object(i.b)("h4",{id:"literal-types"},"Literal Types"),Object(i.b)("p",null,"Literal Types are types that can be a literal set of possibilities that you specify. TypeScript allows number and string literal types:"),Object(i.b)("h5",{id:"string-literal-types"},"String Literal Types"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"// String literal type\ntype TrafficLightColors = 'red' | 'green' | 'yellow';\n")),Object(i.b)("p",null,"Any variable with ",Object(i.b)("inlineCode",{parentName:"p"},"TrafficLightColors")," type can only take on values ",Object(i.b)("inlineCode",{parentName:"p"},'"red", "green", "yellow"'),"."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"let light1: TrafficLightColors = 'red';\nlight1 = 'blue'; // TypeError\n")),Object(i.b)("h5",{id:"numeric-literal-types"},"Numeric Literal Types"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"// Numeric literal type\ntype DiceRoll = 1 | 2 | 3 | 4 | 5 | 6;\nconst rollDice = (): DiceRoll => {\n  // ...\n  return 7; // TypeError\n};\n")),Object(i.b)("h4",{id:"union-types"},"Union Types"),Object(i.b)("p",null,"With union types, a variable can be of one type or another type."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"const union: number | string = 5; // number\nconst union2: number | string = 'hello'; // string\n\ntype TrafficLightColors = 'red' | 'green' | 'yellow';\ntype PrimaryColors = 'red' | 'green' | 'blue';\n\n// \"red\" | \"green\" | \"yellow\" | \"blue\"\ntype union = PrimaryColors | TrafficLightColors;\n")),Object(i.b)("h4",{id:"intersection-types"},"Intersection Types"),Object(i.b)("p",null,"With union types, a variable must be of one type and another type."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"// Intersection Type\ntype TrafficLightColors = 'red' | 'green' | 'yellow';\ntype PrimaryColors = 'red' | 'green' | 'blue';\ntype intersect = PrimaryColors & TrafficLightColors; // \"red\" | \"green\"\n")),Object(i.b)("div",{className:"admonition admonition-tip alert alert--success"},Object(i.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(i.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"}),Object(i.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"})))),"tip")),Object(i.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(i.b)("p",{parentName:"div"},"There's also so much more to TypeScript. Checkout TypeScript docs to learn more! ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://www.typescriptlang.org/docs/"}),"https://www.typescriptlang.org/docs/")))),Object(i.b)("h3",{id:"demo"},"Demo"),Object(i.b)("p",null,"We went through a demo of writing and running code in TypeScript using the\npreassessment as an example. Run the following commands to first create a Node\nproject and then install ",Object(i.b)("inlineCode",{parentName:"p"},"typescript")," as well as ",Object(i.b)("inlineCode",{parentName:"p"},"ts-node"),", a package that runs\nTypeScript files through the terminal. Don't worry about the files that appear\nwhen you run these commands for now; we'll explain what they mean next week."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"yarn init # answer the questions as well\nyarn add typescript\nyarn add ts-node\n")),Object(i.b)("p",null,"We used the following example code. (note that TypeScript files have a ",Object(i.b)("inlineCode",{parentName:"p"},".ts"),"\nextension, as opposed to JavaScript's ",Object(i.b)("inlineCode",{parentName:"p"},".js"),". This will allow VS Code to\nrecognize that you are coding in TS)"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript",metastring:'title="demo.ts"',title:'"demo.ts"'}),'/*\nWe want to implement the code concisely and clearly.\nYes, there are many ways to do this.\nYes, there are shorter ways, and more "elegant" ways.\n\nBut prioritize readability and modifiability! (Why should you do this?)\n*/\n\n// @ts-check\n\n/**\n * Question 1: Arrays\n *\n * Complete the function below. It should return the sum of the numbers in an array.\n *\n * @param {number[]} inputArray\n * @returns {number}\n */\nfunction mySum(inputArray) {\n  let total = 0;\n  for (let i = 0; i < inputArray.length; i++) {\n    total += inputArray[i];\n  }\n  return total;\n}\n\n/**\n * Write a function that returns the sum of the numbers in an array.\n *\n * Complete the function blow that checks if a year is a leap year or not.\n *\n * A leap year is defined as any year that is divisible by 4. However, a year\n * divisible by 100 is NOT a leap year, unless it is also divisible by 400.\n *\n * @param {number} year\n * @returns {boolean}\n */\nfunction isLeapYear(year) {\n  if (year % 4 == 0) {\n    if (year % 100 == 0) {\n      if (year % 400 == 0) {\n        return true;\n      }\n      return false;\n    }\n    return true;\n  }\n  return false;\n}\n\n/**\n * Question 3: isPrime\n *\n * Complete the function below that checks if a number is prime.\n *\n * @param {number} n\n * @returns {boolean}\n */\nfunction isPrime(n) {\n  // optimization! We only need to go up to sqrt(n)\n  const root = Math.floor(Math.sqrt(n));\n\n  for (let i = 2; i < root; i++) {\n    // if number i divides n, then n is not prime.\n    if (n % i == 0) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * Question 4: Control flow\n *\n * Write a function that takes a given array, and returns a new array containing\n * only the elements that are perfect squares.\n *\n * @param {number[]} inputArray\n * @returns {number[]}\n */\nfunction perfectSquares(inputArray) {\n  const squares = [];\n\n  for (let i = 0; i < inputArray.length; i++) {\n    if (\n      inputArray[i] > 0 &&\n      inputArray[i] == Math.floor(inputArray[i]) &&\n      inputArray[i] == Math.round(Math.pow(Math.sqrt(inputArray[i]), 2))\n    ) {\n      squares.push(inputArray[i]);\n      // Or more functionally:\n      // if squares has been declared with a "let" instead of const\n      // squares = [...squares, inputArray[i]];\n    }\n  }\n\n  return squares;\n\n  // smorte: filter out non-integers, then filter out negatives, then filter out numbers that don\'t match the\n  // return inputArray\n  //   .filter(x => x >= 0)\n  //   .filter(x => x == Math.floor(x))\n  //   .filter(x => x == Math.round(Math.pow(Math.floor(Math.sqrt(x)), 2)));\n}\n\nmodule.exports = { mySum, isLeapYear, isPrime, perfectSquares };\n')),Object(i.b)("p",null,"Here is another preassessment solution, this time with excessive type\nannotations and the use of arrow function syntax! See if you can spot any\nexplicit type annotations that can be inferred instead."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript",metastring:'title="demo2.ts"',title:'"demo2.ts"'}),"const mySum = (inputArray: number[]): number => {\n  let sum: number = 0;\n  for (const num of inputArray) {\n    sum += num;\n  }\n  return sum;\n};\n\nconsole.log(mySum([1, 2, 3])); // expected 6\n\nconst isLeapYear = (year: number): boolean => {\n  return (year % 4 == 0 && year % 100 != 0) || year % 400 == 0;\n};\n\nconsole.log(isLeapYear(2000)); // is a leap year\nconsole.log(isLeapYear(2100)); // is NOT a leap year;\n\nconst perfectSquares = (arr: number[]): number[] => {\n  const ans: number[] = [];\n  for (const num of arr) {\n    if (Math.sqrt(num) % 1 === 0) {\n      ans.push(num);\n    }\n  }\n  return ans;\n};\n\nconsole.log(perfectSquares([1, 4, 9])); // expected same as input\nconsole.log(perfectSquares([1, 5, 9])); // expected [1, 9]\n")),Object(i.b)("p",null,"Run it with ",Object(i.b)("inlineCode",{parentName:"p"},"ts-node script.ts"),". Voil\xe0! That's a basic introduction to TypeScript.\nFor more language quirks and useful syntax, visit the ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://www.typescriptlang.org/docs/handbook/typescript-in-5-minutes.html"}),"TypeScript website and pick the tutorial that best fits you"),"."))}b.isMDXComponent=!0},138:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return d}));var a=n(0),r=n.n(a);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=r.a.createContext({}),b=function(e){var t=r.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},p=function(e){var t=b(e.components);return r.a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},m=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),p=b(n),m=a,d=p["".concat(o,".").concat(m)]||p[m]||u[m]||i;return n?r.a.createElement(d,c(c({ref:t},s),{},{components:n})):r.a.createElement(d,c({ref:t},s))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=m;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:a,o[1]=c;for(var s=2;s<i;s++)o[s]=n[s];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"}}]);