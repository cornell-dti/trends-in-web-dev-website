(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{101:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return l})),n.d(t,"metadata",(function(){return o})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return s}));var a=n(3),r=n(7),i=(n(0),n(108)),l={id:"lecture9",title:"Lecture 9"},o={unversionedId:"lecture9",id:"version-2020sp/lecture9",isDocsHomePage:!1,title:"Lecture 9",description:"Final Project due May 6 7:59pm",source:"@site/versioned_docs/version-2020sp/lecture9.md",slug:"/lecture9",permalink:"/docs/2020sp/lecture9",version:"2020sp",sidebar:"version-2020sp/docs",previous:{title:"Lecture 8",permalink:"/docs/2020sp/lecture8"},next:{title:"Lecture 10",permalink:"/docs/2020sp/lecture10"}},c=[{value:"Deployment",id:"deployment",children:[{value:"Frontend Deployment",id:"frontend-deployment",children:[]},{value:"Backend Deployment",id:"backend-deployment",children:[]}]},{value:"Authentication",id:"authentication",children:[]},{value:"TypeScript",id:"typescript",children:[{value:"JavaScript Types",id:"javascript-types",children:[]},{value:"How are types used?",id:"how-are-types-used",children:[]},{value:"Why TypeScript?",id:"why-typescript",children:[]},{value:"TypeScript Types",id:"typescript-types",children:[]},{value:"Type Inference",id:"type-inference",children:[]},{value:"Add TypeScript to React!",id:"add-typescript-to-react",children:[]}]}],p={rightToc:c};function s(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(i.a)("wrapper",Object(a.a)({},p,n,{components:t,mdxType:"MDXLayout"}),Object(i.a)("p",null,"Final Project due ",Object(i.a)("strong",{parentName:"p"},"May 6 7:59pm")),Object(i.a)("p",null,Object(i.a)("a",Object(a.a)({parentName:"p"},{href:"https://drive.google.com/file/d/1roLl69hhtFiPuw2Sq5har-9IeU_hwGSF/view?usp=sharing"}),"Lecture Video")),Object(i.a)("p",null,Object(i.a)("a",Object(a.a)({parentName:"p"},{href:"https://docs.google.com/presentation/d/1BBYlbYxKl2qpOOosClVwt-xVr-r7knLTzxY41x7Z6_c/edit?usp=sharing"}),"Lecture Slides")),Object(i.a)("h2",{id:"deployment"},"Deployment"),Object(i.a)("p",null,"To deploy your web application means to put it on a Web server so others can access it via the internet. We will deploy frontend on Firebase and backend on Heroku."),Object(i.a)("h3",{id:"frontend-deployment"},"Frontend Deployment"),Object(i.a)("p",null,"To deploy to Firebase enter the following commands into terminal:"),Object(i.a)("pre",null,Object(i.a)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"yarn global add firebase-tools\nyarn build\nfirebase login\nfirebase init\n<answer the questions>\nfirebase deploy\n")),Object(i.a)("p",null,Object(i.a)("inlineCode",{parentName:"p"},"yarn build")," will create a ",Object(i.a)("inlineCode",{parentName:"p"},"build")," directory containing a production build of your application."),Object(i.a)("p",null,Object(i.a)("inlineCode",{parentName:"p"},"firebase login")," will prompt you to log in by opening up a web browser if you're not already signed it."),Object(i.a)("p",null,Object(i.a)("inlineCode",{parentName:"p"},"firebase init")," will ask you the following questions:"),Object(i.a)("ol",null,Object(i.a)("li",{parentName:"ol"},"Which Firebase CLI features do you want to set up for this folder? Select ",Object(i.a)("strong",{parentName:"li"},"Hosting"),"."),Object(i.a)("li",{parentName:"ol"},"Associate with a Firebase project. ",Object(i.a)("strong",{parentName:"li"},"Select your Firebase project")),Object(i.a)("li",{parentName:"ol"},"What do you want as your public directory? ",Object(i.a)("strong",{parentName:"li"},"build")),Object(i.a)("li",{parentName:"ol"},"Configure as a single-page app (rewrite all urls to /index.html)? ",Object(i.a)("strong",{parentName:"li"},"Yes")),Object(i.a)("li",{parentName:"ol"},"Overwrite ",Object(i.a)("inlineCode",{parentName:"li"},"index.html"),"? ",Object(i.a)("strong",{parentName:"li"},"No"))),Object(i.a)("p",null,"Running ",Object(i.a)("inlineCode",{parentName:"p"},"firebase deploy")," will push your build assets to Firebase remote server and give you a URL to your live Firebase app site! Now you can share this site and access it over the internet."),Object(i.a)("h3",{id:"backend-deployment"},"Backend Deployment"),Object(i.a)("p",null,"We will deploy backend on Heroku because deploying on Firebase is much more involved"),Object(i.a)("pre",null,Object(i.a)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),'yarn global add heroku\ngit init\ngit add .\ngit commit -m "COMMIT MESSAGE"\nheroku login\nheroku create <optional project name>\ngit push heroku master\n(optional) heroku open\n')),Object(i.a)("p",null,"You can then use the url generated as your backend endpoint in your frontend code."),Object(i.a)("h2",{id:"authentication"},"Authentication"),Object(i.a)("p",null,"One of the best parts about Firebase is you can use Sign in with Google/Facebook/GitHub/etc! This way you don't have to deal with usernames and passwords yourself!"),Object(i.a)("p",null,"We did a Live Coding Demo here based on the Songs example from last week. I will include the files changed here."),Object(i.a)("p",null,"To handle authentication we made a wrapper component ",Object(i.a)("inlineCode",{parentName:"p"},"Authenticated")," to handle all Authentication:"),Object(i.a)("pre",null,Object(i.a)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx",metastring:'title="Authenticated.jsx"',title:'"Authenticated.jsx"'}),"import React, { useState } from 'react';\nimport 'firebase/auth';\nimport * as firebase from 'firebase/app';\nimport FirebaseAuth from 'react-firebaseui/FirebaseAuth';\nimport { useEffect } from 'react';\n\nconst firebaseConfig = {}; // put firebase config in here\n\nfirebase.initializeApp(firebaseConfig);\n\nexport default (props) => {\n  const [user, setUser] = useState(null);\n\n  const uiConfig = {\n    signInFlow: 'popup',\n    signInOptions: [firebase.auth.GoogleAuthProvider.PROVIDER_ID],\n  };\n\n  function onAuthStateChange() {\n    return firebase.auth().onAuthStateChanged((user) => {\n      setUser(user);\n    });\n  }\n\n  useEffect(() => onAuthStateChange(), []);\n\n  return (\n    <div>\n      {user && props.children}\n      {!user && (\n        <FirebaseAuth uiConfig={uiConfig} firebaseAuth={firebase.auth()} />\n      )}\n    </div>\n  );\n};\n")),Object(i.a)("p",null,"We then wrap our whole ",Object(i.a)("inlineCode",{parentName:"p"},"SongList")," app in ",Object(i.a)("inlineCode",{parentName:"p"},"Authenticated"),"."),Object(i.a)("pre",null,Object(i.a)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx",metastring:'title="App.js"',title:'"App.js"'}),"import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport SongList from './SongList';\nimport Authenticated from './Authenticated';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Authenticated>\n        <SongList />\n      </Authenticated>\n    </div>\n  );\n}\n\nexport default App;\n")),Object(i.a)("p",null,"If the user is logged in, ",Object(i.a)("inlineCode",{parentName:"p"},"SongList")," will show. Otherwise they will be asked to log in."),Object(i.a)("p",null,"We then deployed this app on Firebase for the frontend and Heroku for the backend. Refer to the commands above."),Object(i.a)("h2",{id:"typescript"},"TypeScript"),Object(i.a)("p",null,"TypeScript is a typed ",Object(i.a)("em",{parentName:"p"},"superset")," of JavaScript that compiles to plain JavaScript. Superset means TypeScript has everything in JavaScript and more. (Built by Microsoft!)"),Object(i.a)("h3",{id:"javascript-types"},"JavaScript Types"),Object(i.a)("p",null,"JavaScript has 6 primitive types:"),Object(i.a)("ul",null,Object(i.a)("li",{parentName:"ul"},"Boolean"),Object(i.a)("li",{parentName:"ul"},"String"),Object(i.a)("li",{parentName:"ul"},"Number"),Object(i.a)("li",{parentName:"ul"},"Symbol"),Object(i.a)("li",{parentName:"ul"},"undefined"),Object(i.a)("li",{parentName:"ul"},"BigInt")),Object(i.a)("p",null,"All JavaScript values are those 6 primitive types or a:"),Object(i.a)("ul",null,Object(i.a)("li",{parentName:"ul"},"object"),Object(i.a)("li",{parentName:"ul"},"function (JavaScript is functional!)"),Object(i.a)("li",{parentName:"ul"},"null")),Object(i.a)("h3",{id:"how-are-types-used"},"How are types used?"),Object(i.a)("p",null,"In JavaScript we had:"),Object(i.a)("pre",null,Object(i.a)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"let str = 'Hello, trends';\nlet num = 42;\nlet truth = true;\n\nconst someFunc = (x, s, b) => {\n  // do some operations...\n  return x;\n};\n")),Object(i.a)("p",null,"Notice we don't have any types here! JavaScript is weakly typed."),Object(i.a)("pre",null,Object(i.a)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"let str: string = 'Hello, trends';\nlet num: number = 42;\nlet truth: boolean = false;\nconst someFunc = (x: number, s: string, b: boolean): number => {\n  // do some operations...\n  return x;\n};\n")),Object(i.a)("p",null,"TypeScript allows us to add type information!"),Object(i.a)("h3",{id:"why-typescript"},"Why TypeScript?"),Object(i.a)("p",null,"JavaScript code can be ambiguous. We had the function:"),Object(i.a)("pre",null,Object(i.a)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const someFunc = (x, s, b) => {\n  // do some operations...\n  return x;\n};\n")),Object(i.a)("p",null,"What are ",Object(i.a)("inlineCode",{parentName:"p"},"x, s, b"),"? What should I pass in for those? What should I expect returned?"),Object(i.a)("p",null,"Adding the TypeScript types makes this code self-documenting:"),Object(i.a)("pre",null,Object(i.a)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"const someFunc = (x: number, s: string, b: boolean): number => {\n  // do some operations...\n  return x;\n};\n")),Object(i.a)("p",null,"JavaScript variables can also change type which can be undesirable, unexpected, and error-prone."),Object(i.a)("pre",null,Object(i.a)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"let str = 'Hello, trends';\nlet num = 42;\nlet truth = true;\nstr = 13;\n")),Object(i.a)("p",null,"None of these variables have to be any specific type! I can have ",Object(i.a)("inlineCode",{parentName:"p"},"str")," be a string and then a number."),Object(i.a)("p",null,"In the end, we want to use TypeScript because it is:"),Object(i.a)("ul",null,Object(i.a)("li",{parentName:"ul"},"Easier to read"),Object(i.a)("li",{parentName:"ul"},"Easier and faster to implement"),Object(i.a)("li",{parentName:"ul"},"Easier to refactor"),Object(i.a)("li",{parentName:"ul"},"Less buggy")),Object(i.a)("h3",{id:"typescript-types"},"TypeScript Types"),Object(i.a)("p",null,"Basic Syntax:"),Object(i.a)("pre",null,Object(i.a)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"let <var_name>: <type> = <something>;\n")),Object(i.a)("p",null,"We can also use ",Object(i.a)("inlineCode",{parentName:"p"},"const")," but again no ",Object(i.a)("inlineCode",{parentName:"p"},"var"),"."),Object(i.a)("h4",{id:"basic-types"},"Basic Types"),Object(i.a)("pre",null,Object(i.a)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"// Boolean\nlet isDone: boolean = false;\n// Number can be decimal, or in any base!\nlet decimal: number = 4.2;\nlet binary: number = 0b1010;\nlet hex: number = 0xf00d;\n// String\nlet lang: string = 'typescript';\nlet templateStr: string = `We love ${lang}`;\n// Boolean\nlet isDone: boolean = false;\n// Number can be decimal, or in any base!\nlet decimal: number = 4.2;\nlet binary: number = 0b1010;\nlet hex: number = 0xf00d;\n// String\nlet lang: string = 'typescript';\nlet templateStr: string = `We love ${lang}`;\n")),Object(i.a)("h4",{id:"any"},"Any"),Object(i.a)("p",null,Object(i.a)("inlineCode",{parentName:"p"},"Any")," is a wildcard and it can be anything. ",Object(i.a)("inlineCode",{parentName:"p"},"any")," places no restrictions on type."),Object(i.a)("pre",null,Object(i.a)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"// Any: can be anything!\nlet notSure: any = 4;\nnotSure = 'maybe a string instead';\nnotSure = false; // okay, definitely a boolean\n")),Object(i.a)("p",null,"If you were to use ",Object(i.a)("inlineCode",{parentName:"p"},"any")," everywhere though you might as well just use JavaScript"),Object(i.a)("pre",null,Object(i.a)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"let anyList: any[] = [4, 'maybe a string', false];\n")),Object(i.a)("p",null,"But it can be useful in specifying collections of items of different types!"),Object(i.a)("h4",{id:"functions"},"Functions"),Object(i.a)("p",null,"Functions can have types too!"),Object(i.a)("pre",null,Object(i.a)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"// un-typed\nconst myFunc = (x, y) => x + y;\n// typed\nconst myFunc = (x: number, y: number): number => x + y;\n")),Object(i.a)("p",null,Object(i.a)("inlineCode",{parentName:"p"},"myFunc")," has type ",Object(i.a)("inlineCode",{parentName:"p"},"(x: number, y: number): number"),"."),Object(i.a)("p",null,"TypeScript can do some limited type inference so if you leave out the return type ",Object(i.a)("inlineCode",{parentName:"p"},"number"),", TypeScript can infer it since we are just adding two numbers which can only produce a number. If TypeScript can't infer the type, it defaults as ",Object(i.a)("inlineCode",{parentName:"p"},"any"),"."),Object(i.a)("p",null,"We can also have optional parameters:"),Object(i.a)("pre",null,Object(i.a)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"const introduce = (name: string, github?: string): string => {\n  return github\n    ? `Hi, I'm ${name}. Checkout my GitHub @${github}`\n    : `Hi, I'm ${name}. I don't have a GitHub.`;\n};\n")),Object(i.a)("p",null,Object(i.a)("inlineCode",{parentName:"p"},"github?")," designates ",Object(i.a)("inlineCode",{parentName:"p"},"github")," as an optional parameter that defaults to ",Object(i.a)("inlineCode",{parentName:"p"},"undefined"),"."),Object(i.a)("h4",{id:"literal-types"},"Literal Types"),Object(i.a)("p",null,"Literal Types are types that can be a literal set of possibilities that you specify. TypeScript allows number and string literal types:"),Object(i.a)("h5",{id:"string-literal-types"},"String Literal Types"),Object(i.a)("pre",null,Object(i.a)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"// String literal type\ntype TrafficLightColors = 'red' | 'green' | 'yellow';\n")),Object(i.a)("p",null,"Any variable with ",Object(i.a)("inlineCode",{parentName:"p"},"TrafficLightColors")," type can only take on values ",Object(i.a)("inlineCode",{parentName:"p"},'"red", "green", "yellow"'),"."),Object(i.a)("pre",null,Object(i.a)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"let light1: TrafficLightColors = 'red';\nlight1 = 'blue'; // TypeError\n")),Object(i.a)("h5",{id:"numeric-literal-types"},"Numeric Literal Types"),Object(i.a)("pre",null,Object(i.a)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"// Numeric literal type\ntype DiceRoll = 1 | 2 | 3 | 4 | 5 | 6;\nconst rollDice = (): DiceRoll => {\n  // ...\n};\n")),Object(i.a)("h4",{id:"union-types"},"Union Types"),Object(i.a)("p",null,"With union types, a variable can be of one type or another type."),Object(i.a)("pre",null,Object(i.a)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"const union: number | string = 5; // number\nconst union2: number | string = 'hello'; // string\n\ntype TrafficLightColors = 'red' | 'green' | 'yellow';\ntype PrimaryColors = 'red' | 'green' | 'blue';\n\n// \"red\" | \"green\" | \"yellow\" | \"blue\"\ntype union = PrimaryColors | TrafficLightColors;\n")),Object(i.a)("h4",{id:"intersection-types"},"Intersection Types"),Object(i.a)("p",null,"With union types, a variable must be of one type and another type."),Object(i.a)("pre",null,Object(i.a)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"// Intersection Type\ntype TrafficLightColors = 'red' | 'green' | 'yellow';\ntype PrimaryColors = 'red' | 'green' | 'blue';\ntype intersect = PrimaryColors & TrafficLightColors; // \"red\" | \"green\"\n")),Object(i.a)("h3",{id:"type-inference"},"Type Inference"),Object(i.a)("p",null,"Type inference is determining type information without being told explicitly. TypeScript has limited type inference capabilities. If it can't infer the type the default is ",Object(i.a)("inlineCode",{parentName:"p"},"any"),"."),Object(i.a)("p",null,"Sometimes type inference is easy:"),Object(i.a)("pre",null,Object(i.a)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"// TypeScript can infer these types\nlet isDone = false; // boolean\nlet decimal = 4.2; // number\nlet lang = 'typescript'; // string\n")),Object(i.a)("p",null,"Other times it involves some more advanced reasoning:"),Object(i.a)("pre",null,Object(i.a)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"const whatType = (a, b, c) => (a(b + 1) === true ? b : c);\n")),Object(i.a)("p",null,"What are the types of ",Object(i.a)("inlineCode",{parentName:"p"},"a, b, c")," and what is the return type?"),Object(i.a)("p",null,"First ",Object(i.a)("inlineCode",{parentName:"p"},"b")," should be a number because we are adding 1 to it. Knowing ",Object(i.a)("inlineCode",{parentName:"p"},"b")," should be a number, ",Object(i.a)("inlineCode",{parentName:"p"},"a")," should then be a function taking in a ",Object(i.a)("inlineCode",{parentName:"p"},"number")," and returning a ",Object(i.a)("inlineCode",{parentName:"p"},"boolean"),". Finally, this function returns either ",Object(i.a)("inlineCode",{parentName:"p"},"b")," or ",Object(i.a)("inlineCode",{parentName:"p"},"c")," and ",Object(i.a)("inlineCode",{parentName:"p"},"b")," is already a ",Object(i.a)("inlineCode",{parentName:"p"},"number")," so ",Object(i.a)("inlineCode",{parentName:"p"},"c")," must also be ",Object(i.a)("inlineCode",{parentName:"p"},"number"),". Thus the return type is ",Object(i.a)("inlineCode",{parentName:"p"},"number"),"."),Object(i.a)("p",null,"We expect the following types:"),Object(i.a)("pre",null,Object(i.a)("code",Object(a.a)({parentName:"pre"},{className:"language-text"}),"a: number => boolean\nb: number\nc: number\nreturn: number\n")),Object(i.a)("p",null,"In reality TypeScript infers the following:"),Object(i.a)("pre",null,Object(i.a)("code",Object(a.a)({parentName:"pre"},{className:"language-text"}),"a: any\nb: any\nc: any\nreturn: any\n")),Object(i.a)("h3",{id:"add-typescript-to-react"},"Add TypeScript to React!"),Object(i.a)("p",null,"You can learn how to add TypeScript to your Create React App application ",Object(i.a)("a",Object(a.a)({parentName:"p"},{href:"https://create-react-app.dev/docs/adding-typescript/"}),"here"),"."))}s.isMDXComponent=!0},108:function(e,t,n){"use strict";n.d(t,"a",(function(){return d}));var a=n(0),r=n.n(a);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=r.a.createContext({}),s=function(e){var t=r.a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},b=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),b=s(n),d=a,m=b["".concat(l,".").concat(d)]||b[d]||u[d]||i;return n?r.a.createElement(m,o(o({ref:t},p),{},{components:n})):r.a.createElement(m,o({ref:t},p))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=b;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var p=2;p<i;p++)l[p]=n[p];return r.a.createElement.apply(null,l)}return r.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"}}]);