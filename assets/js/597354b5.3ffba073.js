"use strict";(self.webpackChunktrends_in_web_dev_website=self.webpackChunktrends_in_web_dev_website||[]).push([[6623],{7300:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return d}});var o=n(6687);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=o.createContext({}),p=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return o.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},h=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),h=p(n),d=a,m=h["".concat(s,".").concat(d)]||h[d]||u[d]||r;return n?o.createElement(m,i(i({ref:t},c),{},{components:n})):o.createElement(m,i({ref:t},c))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,i=new Array(r);i[0]=h;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var p=2;p<r;p++)i[p]=n[p];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}h.displayName="MDXCreateElement"},5792:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return p},toc:function(){return c},default:function(){return h}});var o=n(3206),a=n(5421),r=(n(6687),n(7300)),i=["components"],l={id:"lecture6",title:"Lecture 6"},s=void 0,p={unversionedId:"lecture6",id:"version-2022sp/lecture6",isDocsHomePage:!1,title:"Lecture 6",description:"Lecture Slides",source:"@site/versioned_docs/version-2022sp/lecture6.md",sourceDirName:".",slug:"/lecture6",permalink:"/docs/lecture6",tags:[],version:"2022sp",frontMatter:{id:"lecture6",title:"Lecture 6"},sidebar:"docs",previous:{title:"Lecture 5",permalink:"/docs/lecture5"},next:{title:"Assignments",permalink:"/docs/assignments"}},c=[{value:"More On Hooks",id:"more-on-hooks",children:[{value:"Hook Rules",id:"hook-rules",children:[{value:"Naming",id:"naming",children:[],level:4},{value:"Top Level",id:"top-level",children:[],level:4}],level:3},{value:"Custom Hooks",id:"custom-hooks",children:[{value:"Syntax for Custom Hook",id:"syntax-for-custom-hook",children:[],level:4}],level:3},{value:"<code>useMemo</code>",id:"usememo",children:[],level:3},{value:"<code>useContext</code>",id:"usecontext",children:[],level:3}],level:2},{value:"Data Fetching",id:"data-fetching",children:[{value:"How do we fetch (in React)?",id:"how-do-we-fetch-in-react",children:[],level:3},{value:"Fetching Example",id:"fetching-example",children:[],level:3},{value:"<code>fetch</code>",id:"fetch",children:[],level:3},{value:"Promises",id:"promises",children:[{value:"<code>.then()</code>",id:"then",children:[],level:4},{value:"<code>.catch()</code>",id:"catch",children:[],level:4},{value:"Using <code>.then()</code> with <code>fetch()</code>",id:"using-then-with-fetch",children:[],level:4}],level:3},{value:"Async/Await",id:"asyncawait",children:[],level:3}],level:2},{value:"Live Demo Material",id:"live-demo-material",children:[],level:2}],u={toc:c};function h(e){var t=e.components,n=(0,a.Z)(e,i);return(0,r.kt)("wrapper",(0,o.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://docs.google.com/presentation/d/1gS0nwkjPdHZpO2uI6FdMb3jpyhgwn6c_SV4Juf8uBoQ/edit?usp=sharing"},"Lecture Slides")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/assignment3"},"Assignment 3")," (due Friday 4/1 11:59 PM on CMS)"),(0,r.kt)("h2",{id:"more-on-hooks"},"More On Hooks"),(0,r.kt)("p",null,"A hook in React is a JS/TS ",(0,r.kt)("strong",{parentName:"p"},"function"),' for "hooking" into functionality in\nReact ',(0,r.kt)("em",{parentName:"p"},"functional")," components."),(0,r.kt)("p",null,"We've worked with ",(0,r.kt)("inlineCode",{parentName:"p"},"useState")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"useEffect")," which introduces state and side\neffects to your React component, respectively."),(0,r.kt)("h3",{id:"hook-rules"},"Hook Rules"),(0,r.kt)("h4",{id:"naming"},"Naming"),(0,r.kt)("p",null,"Hooks have the following naming scheme: ",(0,r.kt)("inlineCode",{parentName:"p"},"useXXXX")," (camelCase). It is\n",(0,r.kt)("strong",{parentName:"p"},"imperative")," that you name your hooks using this scheme - the function name is\nthe only way to identify the function as a hook to other developers as well as\nyour IDE."),(0,r.kt)("p",null,"It is also a good idea to avoid prefixing regular variable names with ",(0,r.kt)("inlineCode",{parentName:"p"},"use"),", to\navoid confusion."),(0,r.kt)("h4",{id:"top-level"},"Top Level"),(0,r.kt)("p",null,"Hooks (both built-in and custom hooks) can only be called within React\ncomponents or other React hooks. More specifically, they should only be called\nin the ",(0,r.kt)("strong",{parentName:"p"},"top level")," of such functions."),(0,r.kt)("p",null,"The reason for this is that you want hooks to be called in the same order, the\nsame amount of times each time the function runs. This restriction is necessary\nfor React to optimize the performance of hooks."),(0,r.kt)("p",null,"This means that you should not call hooks in:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"conditionals"),(0,r.kt)("li",{parentName:"ul"},"loops"),(0,r.kt)("li",{parentName:"ul"},"nested functions")),(0,r.kt)("p",null,"Here are some examples of what ",(0,r.kt)("strong",{parentName:"p"},"not")," to do (and would trigger linter errors):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const RandomComponent = () => {\n  const [foo, setFoo] = useState(0); // this is fine\n  if (foo < 100) {\n    const [bar, setBar] = useState(0); // this is NOT fine\n  }\n};\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const RandomComponent = () => {\n  const [foo, setFoo] = useState(0); // this is fine\n  for (let i = 0; i < foo; i++) {\n    const [bar, setBar] = useState(0); // this is NOT fine\n  }\n};\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const RandomComponent = () => {\n  const doHookStuff = () => {\n    const [bar, setBar] = useState(0); // this is NOT fine\n  };\n  doHookStuff();\n};\n")),(0,r.kt)("p",null,"It's a good practice to call all your hooks line-by-line at the top of your\nfunction."),(0,r.kt)("h3",{id:"custom-hooks"},"Custom Hooks"),(0,r.kt)("p",null,"There are many hooks that React gives us out of the box, but we can put them\ntogether to make our own hooks!"),(0,r.kt)("p",null,"This is useful to abstract out common functionality, the same way programmers do\nwith regular functions."),(0,r.kt)("p",null,"If you ever notice that you are doing repetitive tasks with hooks across\nmultiple React components, it might be a good idea to put all that logic into\nyour own hook."),(0,r.kt)("h4",{id:"syntax-for-custom-hook"},"Syntax for Custom Hook"),(0,r.kt)("p",null,"Just write a function using hooks! Make sure your function is named according to\nthe ",(0,r.kt)("inlineCode",{parentName:"p"},"useXXXX")," scheme."),(0,r.kt)("p",null,"There is no function signature that you must follow in order for it to be hook -\nit can have whatever arguments and return type that you choose."),(0,r.kt)("p",null,"Learn more about custom hooks ",(0,r.kt)("a",{parentName:"p",href:"https://reactjs.org/docs/hooks-custom.html"},"here")),(0,r.kt)("h3",{id:"usememo"},(0,r.kt)("inlineCode",{parentName:"h3"},"useMemo")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"useMemo")," is a useful hook that can help you improve the performance of your\ncomponent by reducing the amount of unnecessary calculations."),(0,r.kt)("p",null,"Syntax: ",(0,r.kt)("inlineCode",{parentName:"p"},"const result = useMemo(func, deps)")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"func"),' is an "expensive" calculation that we want to memoize'),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"deps")," is the list of dependencies (just like in ",(0,r.kt)("inlineCode",{parentName:"p"},"useEffect"),")"),(0,r.kt)("p",null,"In essence, the hook will call ",(0,r.kt)("inlineCode",{parentName:"p"},"func")," initially and put whatever it returns into\n",(0,r.kt)("inlineCode",{parentName:"p"},"result"),". Then ONLY when something in ",(0,r.kt)("inlineCode",{parentName:"p"},"deps")," changes does ",(0,r.kt)("inlineCode",{parentName:"p"},"func")," gets called\nagain - otherwise ",(0,r.kt)("inlineCode",{parentName:"p"},"result")," will be the ",(0,r.kt)("strong",{parentName:"p"},"memoized")," return value. Whenever such\na refresh occurs, the new return value of ",(0,r.kt)("inlineCode",{parentName:"p"},"func")," will overwrite the old memo."),(0,r.kt)("p",null,"Here is an example of where you might want to ",(0,r.kt)("inlineCode",{parentName:"p"},"useMemo"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const expensiveFunction = (n: number) => {\n  /** do something that takes a lot of cpu */\n};\n\nconst RandomComponent = () => {\n  const [foo, setFoo] = useState(0);\n  const [bar, setBar] = useState(0);\n\n  // This runs expensiveFunction when foo changes but bar doesn't\n  const baz = expensiveFunction(bar);\n\n  // This runs expensiveFunction ONLY when bar changes\n  const baz = useMemo(() => expensiveFunction(bar), [bar]);\n};\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"IMPORTANT PITFALL"),": You may be tempted to put ",(0,r.kt)("inlineCode",{parentName:"p"},"useMemo")," everywhere; however,\nthis is not a good idea. Every hook has some performance overhead, so adding\n",(0,r.kt)("inlineCode",{parentName:"p"},"useMemo")," in places where you don't need it can actually ",(0,r.kt)("strong",{parentName:"p"},"worsen")," performance!"),(0,r.kt)("p",null,"You can ",(0,r.kt)("em",{parentName:"p"},"profile")," your code with and without the ",(0,r.kt)("inlineCode",{parentName:"p"},"useMemo")," call to judge whether\nit's a good idea. You can profile the performance of your website using the\nDeveloper Tools found in most browsers."),(0,r.kt)("h3",{id:"usecontext"},(0,r.kt)("inlineCode",{parentName:"h3"},"useContext")),(0,r.kt)("p",null,"We've covered passing down props in previous React lectures. However, that's\npretty annoying if ",(0,r.kt)("em",{parentName:"p"},"every")," component within a hierarchy needs that prop."),(0,r.kt)("p",null,"Is there a better way then manually passing down that prop to every component\nthat needs it?"),(0,r.kt)("p",null,"Yes!"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"useContext")," hook allows you to wrap an entire component ",(0,r.kt)("strong",{parentName:"p"},"tree"),' with a\n"context" that every component in that tree can access!'),(0,r.kt)("p",null,"A great use case for this hook is for theme data - each component needs to know\nwhich theme is selected in order to display the correct colors, for example."),(0,r.kt)("p",null,"Here is the example pulled from the ",(0,r.kt)("a",{parentName:"p",href:"https://reactjs.org/docs/hooks-reference.html#usecontext"},"official React docs")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const themes = {\n  light: {\n    foreground: '#000000',\n    background: '#eeeeee',\n  },\n  dark: {\n    foreground: '#ffffff',\n    background: '#222222',\n  },\n};\n\nconst ThemeContext = React.createContext(themes.light);\n\nconst App = () => {\n  return (\n    <ThemeContext.Provider value={themes.dark}>\n      <Toolbar />\n    </ThemeContext.Provider>\n  );\n};\n\nconst Toolbar = () => {\n  return (\n    <div>\n      <ThemedButton />\n    </div>\n  );\n};\n\nconst ThemedButton = () => {\n  const theme = useContext(ThemeContext);\n  return (\n    <button style={{ background: theme.background, color: theme.foreground }}>\n      I am styled by theme context!\n    </button>\n  );\n};\n")),(0,r.kt)("p",null,"We won't be requiring use of custom hooks, ",(0,r.kt)("inlineCode",{parentName:"p"},"useMemo"),", or ",(0,r.kt)("inlineCode",{parentName:"p"},"useContext")," in our\nassignments, so this is just for fun!"),(0,r.kt)("h2",{id:"data-fetching"},"Data Fetching"),(0,r.kt)("p",null,"Data fetching is ",(0,r.kt)("strong",{parentName:"p"},"getting information (data) from an outside source (e.g. REST API)")),(0,r.kt)("p",null,"In this lecture we'll be discussing how to fetch data through traditional HTTP\nrequests (so far the most popular way), but keep in mind that there are other\nways to fetch data out there, which we will cover later."),(0,r.kt)("h3",{id:"how-do-we-fetch-in-react"},"How do we fetch (in React)?"),(0,r.kt)("p",null,"So how do we fetch data with our React frontend?"),(0,r.kt)("p",null,"Two important things to note:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Modern browsers have a nifty little JavaScript function called ",(0,r.kt)("inlineCode",{parentName:"p"},"fetch")," that\nyou can use to call API endpoints. Libraries such as ",(0,r.kt)("inlineCode",{parentName:"p"},"axios")," provide similar\nfunctionality. There are also libraries like ",(0,r.kt)("inlineCode",{parentName:"p"},"swr")," that provide easy ways to\nre-fetch resources automatically.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"The ",(0,r.kt)("inlineCode",{parentName:"p"},"useEffect")," React hook allows you to trigger side effects, such as\nfetching data!"))),(0,r.kt)("p",null,"We want to keep track of our data in our component state, and use hooks like\n",(0,r.kt)("inlineCode",{parentName:"p"},"useEffect")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"fetch")," the data and update the state accordingly!"),(0,r.kt)("h3",{id:"fetching-example"},"Fetching Example"),(0,r.kt)("p",null,"Consider this snippet of code:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"// This corresponds to the type of data you expect to get back in your response\ntype DataType = readonly string[];\n\nconst App = () => {\n  const [data, setData] = useState<DataType>([]);\n\n  useEffect(() => {\n    fetch(`${API}`)\n      .then((res) => res.json())\n      .then((d) => setData(d));\n  });\n  // ... other methods, return, etc\n};\n")),(0,r.kt)("p",null,"Here are the important parts:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"We have ",(0,r.kt)("inlineCode",{parentName:"li"},"data")," in our component state. Later, we call ",(0,r.kt)("inlineCode",{parentName:"li"},"setData")," on what the\nbackend sends to us."),(0,r.kt)("li",{parentName:"ul"},"We declare a type definition for the ",(0,r.kt)("inlineCode",{parentName:"li"},"useState")," call so that TS knows the type\nof data we're working with. (It can't infer type from an empty array!)"),(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"useEffect")," hook is used to subscribe to new data."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"fetch(...)")," is called on an API link, followed by ",(0,r.kt)("inlineCode",{parentName:"li"},".then(...)")," calls that\nformat the response into json and then ",(0,r.kt)("inlineCode",{parentName:"li"},"setData")," to the response. The\n",(0,r.kt)("inlineCode",{parentName:"li"},".then()")," calls exist because ",(0,r.kt)("inlineCode",{parentName:"li"},"fetch()")," returns a ",(0,r.kt)("inlineCode",{parentName:"li"},"Promise")," (this is explained\nbelow)")),(0,r.kt)("p",null,"Let's take a deeper look at ",(0,r.kt)("inlineCode",{parentName:"p"},"fetch"),"!"),(0,r.kt)("h3",{id:"fetch"},(0,r.kt)("inlineCode",{parentName:"h3"},"fetch")),(0,r.kt)("p",null,'"stop trying to make fetch happen \ud83d\udc67"'),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"fetch(resource, [init])")," is a native browser function for making web requests."),(0,r.kt)("p",null,"Its params are:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"resource"),": URL of the site you are fetching from"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"init"),": optional object containing any custom settings you want to apply to\nthe request.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"    // your init object might look like this\n    {\n      // HTTP request method\n       method: 'GET', // | 'POST' | 'PUT' | 'DELETE' | etc\n       // Any request headers you want to add\n       headers: {\n         'content-type': 'application/json'\n       },\n       // Request body (remember to stringify!)\n       body: JSON.stringify(requestBody)\n       // ... other settings\n    }\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"For more on the init object, refer to\n",(0,r.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch"},"this link"),"!")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"IMPORTANT: fetch() returns a PROMISE!")),(0,r.kt)("h3",{id:"promises"},"Promises"),(0,r.kt)("p",null,"Operations like web requests don't complete instantly! You want to do other stuff\nwhile the operation is still going on."),(0,r.kt)("p",null,"Promises represent the ",(0,r.kt)("strong",{parentName:"p"},"eventual")," completion (or failure) of an async operation."),(0,r.kt)("p",null,"Promises are in one of three possible states:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"pending"),": initial state; neither fulfilled nor rejected"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"fulfilled"),": operation completed successfully"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"rejected"),": operation failed")),(0,r.kt)("h4",{id:"then"},(0,r.kt)("inlineCode",{parentName:"h4"},".then()")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},".then()")," is a function on Promises that return a promise."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"p.then(onFulfilled[, onRejected])\n")),(0,r.kt)("p",null,"Let's break this down!"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"p")," is a Promise."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"onFulfilled")," is the callback function that is run when ",(0,r.kt)("inlineCode",{parentName:"li"},"p")," is fulfilled"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"onRejected")," (OPTIONAL) is the callback for when ",(0,r.kt)("inlineCode",{parentName:"li"},"p")," is rejected")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"p.then(\n  (value) => {\n    // fulfillment\n  },\n  (reason) => {\n    // rejection\n  }\n);\n")),(0,r.kt)("p",null,"Let's talk about types! ",(0,r.kt)("inlineCode",{parentName:"p"},"p")," in this case might be ",(0,r.kt)("inlineCode",{parentName:"p"},"fetch()"),", which returns the\ntype ",(0,r.kt)("inlineCode",{parentName:"p"},"Promise<Response>"),". If so, then ",(0,r.kt)("inlineCode",{parentName:"p"},"value")," would have the type ",(0,r.kt)("inlineCode",{parentName:"p"},"Response"),".\nThen, if the fulfillment function (which takes in ",(0,r.kt)("inlineCode",{parentName:"p"},"value"),") returns type\n",(0,r.kt)("inlineCode",{parentName:"p"},"string"),", then the entire expression would be type ",(0,r.kt)("inlineCode",{parentName:"p"},"Promise<String>"),"."),(0,r.kt)("p",null,"If you've taken CS 3110 or done some functional programming outside of this\nclass/category theory, this might make you think of\nMonads/Applicatives/Functors. The specified behavior for ",(0,r.kt)("inlineCode",{parentName:"p"},"Promise"),"s in JS/TS\ndon't exactly follow the laws of what was just listed, but for learning purposes\nit may be helpful to roughly compare the ",(0,r.kt)("inlineCode",{parentName:"p"},"then")," function to ",(0,r.kt)("inlineCode",{parentName:"p"},"fmap")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"bind"),"."),(0,r.kt)("p",null,"If you're interested, take a look at this snippet and notice how the types\nbehave:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"// promise: Promise<Response>\nconst promise = fetch('something');\n\n// kindaFunctor: (res: Response) => number\nconst kindaFunctor = (res: Response) => res.status;\n\n// kindaMonad: (res: Response) => Promise<string>\nconst kindaMonad = (res: Response) => res.text();\n\n// newPromise1: Promise<number>\nconst newPromise1 = promise.then(kindaFunctor);\n\n// newPromise2: Promise<string>\nconst newPromise2 = promise.then(kindaMonad);\n")),(0,r.kt)("h4",{id:"catch"},(0,r.kt)("inlineCode",{parentName:"h4"},".catch()")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},".catch()")," is a function on Promises that catches a rejection."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"p.catch(onRejected);\n")),(0,r.kt)("p",null,"For example, you might want to ",(0,r.kt)("inlineCode",{parentName:"p"},"console.log")," errors:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"fetch(`https://jsonplaceholder.typicode.com/posts`)\n  .then(...)\n  .catch((err) => console.log(err));\n")),(0,r.kt)("p",null,"Note that ",(0,r.kt)("inlineCode",{parentName:"p"},"onRejected")," takes a parameter of type ",(0,r.kt)("inlineCode",{parentName:"p"},"any"),", since we don't know the\ntype of the error we will get."),(0,r.kt)("h4",{id:"using-then-with-fetch"},"Using ",(0,r.kt)("inlineCode",{parentName:"h4"},".then()")," with ",(0,r.kt)("inlineCode",{parentName:"h4"},"fetch()")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"fetch()")," returns a ",(0,r.kt)("inlineCode",{parentName:"p"},"Promise")," that resolves to a ",(0,r.kt)("inlineCode",{parentName:"p"},"Response")," object."),(0,r.kt)("p",null,"Consider this snippet, similar to one shown above:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"fetch(`https://jsonplaceholder.typicode.com/posts`)\n  .then((res) => res.json())\n  .then((d) => setData(d))\n  .catch((err) => console.log(err));\n")),(0,r.kt)("p",null,"Here we are getting the response from an endpoint ",(0,r.kt)("strong",{parentName:"p"},"and then")," calling ",(0,r.kt)("inlineCode",{parentName:"p"},".json()"),"\non the response ",(0,r.kt)("strong",{parentName:"p"},"and then")," calling ",(0,r.kt)("inlineCode",{parentName:"p"},"setData")," on the result of ",(0,r.kt)("inlineCode",{parentName:"p"},"json()"),"."),(0,r.kt)("p",null,"If a promise gets rejected anywhere along this chain, we will log the error in\nour console."),(0,r.kt)("h3",{id:"asyncawait"},"Async/Await"),(0,r.kt)("p",null,"We'll cover this in the future but ",(0,r.kt)("inlineCode",{parentName:"p"},"async"),"/",(0,r.kt)("inlineCode",{parentName:"p"},"await")," is an alternative (sometimes\npreferred) syntax for ",(0,r.kt)("inlineCode",{parentName:"p"},".then()")," and ",(0,r.kt)("inlineCode",{parentName:"p"},".catch()")," calls."),(0,r.kt)("p",null,"By adding the ",(0,r.kt)("inlineCode",{parentName:"p"},"async")," keyword to a function, we make it an ",(0,r.kt)("em",{parentName:"p"},"asynchronous"),"\nfunction. Within ",(0,r.kt)("inlineCode",{parentName:"p"},"async")," functions, we can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"await")," keyword to wait for a\nPromise to return before continuing on to the next statement within the\nfunction."),(0,r.kt)("p",null,"Here is an example of doing equivalent things with either syntax:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const thenCatchExample = () => {\n  fetch(`https://jsonplaceholder.typicode.com/posts`)\n    .then((res) => res.json())\n    .then((d) => setData(d));\n};\n\nconst asyncAwaitExample = async () => {\n  const res = await fetch(`https://jsonplaceholder.typicode.com/posts`);\n  const d = await res.json();\n  setData(d);\n};\n")),(0,r.kt)("p",null,"In order to handle rejected Promises using async/await, just wrap all your await\nstatements in a ",(0,r.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/try...catch"},"try...catch")," block!"),(0,r.kt)("h2",{id:"live-demo-material"},"Live Demo Material"),(0,r.kt)("p",null,"The demo only covers the latter half of the lecture (data fetching). Feel free\nto play around with hooks on your own time!"),(0,r.kt)("p",null,"You can get the starter code for the live demo by running:\n",(0,r.kt)("inlineCode",{parentName:"p"},'yarn create next-app --typescript --example "https://github.com/cornell-dti/trends-sp22-starters/tree/main/lec6-demo" YOUR_DIR_NAME')),(0,r.kt)("p",null,"(Replace YOUR_DIR_NAME with whatever you want to name your directory!)"))}h.isMDXComponent=!0},3206:function(e,t,n){function o(){return o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},o.apply(this,arguments)}n.d(t,{Z:function(){return o}})},5421:function(e,t,n){function o(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}n.d(t,{Z:function(){return o}})}}]);