"use strict";(self.webpackChunktrends_in_web_dev_website=self.webpackChunktrends_in_web_dev_website||[]).push([[8380],{7300:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var o=n(6687);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},s=Object.keys(e);for(o=0;o<s.length;o++)n=s[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(o=0;o<s.length;o++)n=s[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=o.createContext({}),c=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},p=function(e){var t=c(e.components);return o.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=c(n),m=a,h=u["".concat(l,".").concat(m)]||u[m]||d[m]||s;return n?o.createElement(h,r(r({ref:t},p),{},{components:n})):o.createElement(h,r({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,r=new Array(s);r[0]=u;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:a,r[1]=i;for(var c=2;c<s;c++)r[c]=n[c];return o.createElement.apply(null,r)}return o.createElement.apply(null,n)}u.displayName="MDXCreateElement"},405:function(e,t,n){var o=n(6687);t.Z=function(e){var t=e.children,n=e.hidden,a=e.className;return o.createElement("div",{role:"tabpanel",hidden:n,className:a},t)}},6151:function(e,t,n){n.d(t,{Z:function(){return u}});var o=n(3206),a=n(6687),s=n(8394),r=n(6565);var i=function(){var e=(0,a.useContext)(r.Z);if(null==e)throw new Error('"useUserPreferencesContext" is used outside of "Layout" component.');return e},l=n(8722),c=n(6355),p="tabItem_2JgS";function d(e){var t,n,o,s=e.lazy,r=e.block,d=e.defaultValue,u=e.values,m=e.groupId,h=e.className,f=a.Children.map(e.children,(function(e){if((0,a.isValidElement)(e)&&"string"==typeof e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),b=null!=u?u:f.map((function(e){var t=e.props;return{value:t.value,label:t.label}})),g=(0,l.lx)(b,(function(e,t){return e.value===t.value}));if(g.length>0)throw new Error('Docusaurus error: Duplicate values "'+g.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var k=null===d?d:null!=(t=null!=d?d:null==(n=f.find((function(e){return e.props.default})))?void 0:n.props.value)?t:null==(o=f[0])?void 0:o.props.value;if(null!==k&&!b.some((function(e){return e.value===k})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+k+'" but none of its children has the corresponding value. Available values are: '+b.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var v=i(),y=v.tabGroupChoices,w=v.setTabGroupChoices,N=(0,a.useState)(k),C=N[0],D=N[1],P=[],x=(0,l.o5)().blockElementScrollPositionUntilNextRender;if(null!=m){var j=y[m];null!=j&&j!==C&&b.some((function(e){return e.value===j}))&&D(j)}var T=function(e){var t=e.currentTarget,n=P.indexOf(t),o=b[n].value;o!==C&&(x(t),D(o),null!=m&&w(m,o))},O=function(e){var t,n=null;switch(e.key){case"ArrowRight":var o=P.indexOf(e.currentTarget)+1;n=P[o]||P[0];break;case"ArrowLeft":var a=P.indexOf(e.currentTarget)-1;n=P[a]||P[P.length-1]}null==(t=n)||t.focus()};return a.createElement("div",{className:"tabs-container"},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,c.Z)("tabs",{"tabs--block":r},h)},b.map((function(e){var t=e.value,n=e.label;return a.createElement("li",{role:"tab",tabIndex:C===t?0:-1,"aria-selected":C===t,className:(0,c.Z)("tabs__item",p,{"tabs__item--active":C===t}),key:t,ref:function(e){return P.push(e)},onKeyDown:O,onFocus:T,onClick:T},null!=n?n:t)}))),s?(0,a.cloneElement)(f.filter((function(e){return e.props.value===C}))[0],{className:"margin-vert--md"}):a.createElement("div",{className:"margin-vert--md"},f.map((function(e,t){return(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==C})}))))}function u(e){var t=(0,s.Z)();return a.createElement(d,(0,o.Z)({key:String(t)},e))}},6565:function(e,t,n){var o=(0,n(6687).createContext)(void 0);t.Z=o},2497:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return c},contentTitle:function(){return p},metadata:function(){return d},toc:function(){return u},default:function(){return h}});var o=n(3206),a=n(5421),s=(n(6687),n(7300)),r=n(6151),i=n(405),l=["components"],c={id:"lecture3",title:"Lecture 3"},p=void 0,d={unversionedId:"lecture3",id:"version-2020sp/lecture3",isDocsHomePage:!1,title:"Lecture 3",description:"Lecture Slides",source:"@site/versioned_docs/version-2020sp/lecture3.md",sourceDirName:".",slug:"/lecture3",permalink:"/docs/2020sp/lecture3",tags:[],version:"2020sp",frontMatter:{id:"lecture3",title:"Lecture 3"},sidebar:"version-2020sp/docs",previous:{title:"Lecture 2",permalink:"/docs/2020sp/lecture2"},next:{title:"Lecture 4",permalink:"/docs/2020sp/lecture4"}},u=[{value:"Before the lecture",id:"before-the-lecture",children:[{value:"Install Postman",id:"install-postman",children:[],level:3},{value:"Firebase Setup",id:"firebase-setup",children:[],level:3},{value:"Check your setup",id:"check-your-setup",children:[{value:"Code",id:"code",children:[],level:4},{value:"Verify that it works",id:"verify-that-it-works",children:[],level:4}],level:3}],level:2},{value:"Basic Database Manipulations",id:"basic-database-manipulations",children:[],level:2},{value:"Sample code",id:"sample-code",children:[],level:2}],m={toc:u};function h(e){var t=e.components,n=(0,a.Z)(e,l);return(0,s.kt)("wrapper",(0,o.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://docs.google.com/presentation/d/1iimIRpAw1ud1yhCCx1cdwypZw2J8VVN8mTLWXOc8g-U/edit?usp=sharing"},"Lecture Slides")),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://drive.google.com/file/d/14JeWpqIm4uiTl0bSO8hgvg_kqVadsR0Z/view?usp=sharing"},"Lecture Video")),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://firebase.google.com/docs/firestore"},"Firebase Documentation")),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://github.com/ashneeldas2/trends-sp20/tree/master/Assignments/a2"},"Assignment 2")," due ",(0,s.kt)("strong",{parentName:"p"},"03/04 7:59pm")),(0,s.kt)("h2",{id:"before-the-lecture"},"Before the lecture"),(0,s.kt)("h3",{id:"install-postman"},"Install Postman"),(0,s.kt)("p",null,"Install Postman from ",(0,s.kt)("a",{parentName:"p",href:"https://www.postman.com/downloads/"},"https://www.postman.com/downloads/"),"\nIf necessary, set up a Postman account using your Cornell email address."),(0,s.kt)("h3",{id:"firebase-setup"},"Firebase Setup"),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},"Create an account on ",(0,s.kt)("a",{parentName:"li",href:"https://firebase.google.com"},"Firebase"),". You only need the free version."),(0,s.kt)("li",{parentName:"ol"},"Go to Firebase console and click ",(0,s.kt)("inlineCode",{parentName:"li"},"Add project"),". Choose any random name for the project name. You\nwon't need Google Analytics in this class but it is fine to enable it. Analytics location doesn't\nmatter, leave it at default United States and check the remaining boxes agreeing to terms and click ",(0,s.kt)("inlineCode",{parentName:"li"},"Create project"),"."),(0,s.kt)("li",{parentName:"ol"},"Once your project is created, go into it and go to the ",(0,s.kt)("inlineCode",{parentName:"li"},"Database")," tab under ",(0,s.kt)("inlineCode",{parentName:"li"},"Develop"),". Choose to create database starting in production mode. Keep the Firestore location as default."),(0,s.kt)("li",{parentName:"ol"},"Download the service account in ",(0,s.kt)("inlineCode",{parentName:"li"},"Project Settings > Service accounts")," as ",(0,s.kt)("inlineCode",{parentName:"li"},"service-account.json"),". ",(0,s.kt)("inlineCode",{parentName:"li"},"Project Settings")," can be found by clicking the gear button on the left panel next to ",(0,s.kt)("inlineCode",{parentName:"li"},"Project Overview"),". Go to ",(0,s.kt)("inlineCode",{parentName:"li"},"Service accounts")," tab and click the ",(0,s.kt)("inlineCode",{parentName:"li"},"Generate new private key button"),". Save the downloaded file as ",(0,s.kt)("inlineCode",{parentName:"li"},"service-account.json"),"\nThis json should be kept secret.")),(0,s.kt)("h3",{id:"check-your-setup"},"Check your setup"),(0,s.kt)("h4",{id:"code"},"Code"),(0,s.kt)("p",null,"Create a folder with empty ",(0,s.kt)("inlineCode",{parentName:"p"},"package.json")," and empty ",(0,s.kt)("inlineCode",{parentName:"p"},"index.js"),". Put the downloaded\n",(0,s.kt)("inlineCode",{parentName:"p"},"service-account.json")," in this folder."),(0,s.kt)("p",null,"Copy the following code into ",(0,s.kt)("inlineCode",{parentName:"p"},"package.json"),"."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "name": "self-check",\n  "version": "0.1.0",\n  "main": "index.js",\n  "license": "MIT",\n  "dependencies": {\n    "body-parser": "^1.18.3",\n    "express": "^4.16.4",\n    "firebase-admin": "^7.2.0"\n  }\n}\n')),(0,s.kt)("p",null,"Copy the following code into ",(0,s.kt)("inlineCode",{parentName:"p"},"index.js"),". Remember to replace ",(0,s.kt)("inlineCode",{parentName:"p"},"databaseURL")," with\nthe url of your own. You can find this ",(0,s.kt)("inlineCode",{parentName:"p"},"databaseURL")," in the code snippet in the service accounts tab of Firebase."),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"Don't worry if you don't understand this code! You'll know what it does and how to write similar code by the end of this course!")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"const admin = require('firebase-admin');\nconst serviceAccount = require('./service-account.json');\nconst express = require('express');\nconst bodyParser = require('body-parser');\n\nadmin.initializeApp({\n  credential: admin.credential.cert(serviceAccount),\n  databaseURL: '[YOUR_OWN_DATABASE_URL]',\n});\n\nconst db = admin.firestore();\n\nconst app = express();\nconst port = 8080;\napp.use(bodyParser.json());\n\napp.get('/', (_, resp) => resp.send('Hello World!'));\n\napp.get('/self-check', async (_, resp) => {\n  const data = {\n    name: 'Hello World',\n    time: admin.firestore.FieldValue.serverTimestamp(),\n  };\n  console.log('Sending doc to DB.');\n  await db.collection('test').doc('random-id').set(data);\n  console.log('Doc recorded in DB');\n  const docRef = db.collection('test').doc('random-id');\n  console.log('Trying to obtain doc in DB.');\n  const docSnapshot = await docRef.get();\n  console.log(\n    `We obtained a doc with id ${docSnapshot.id}. It's content is logged below:`\n  );\n  console.log(docSnapshot.data());\n  console.log('Now we will try to remove it.');\n  await docRef.delete();\n  console.log('The document is deleted.');\n  console.log(\n    'After all these operations, the db should be empty. We check that.'\n  );\n  db.collection('test')\n    .get()\n    .then((querySnapshot) => {\n      if (querySnapshot.docs.length === 0) {\n        console.log('We passed the check. The page in browser should say OK.');\n        resp.status(200).send('OK.');\n      } else {\n        console.log('We failed the check. Please check your setup.');\n        resp.status(500).send('Something is messed up!');\n      }\n    });\n});\n\napp.listen(port, () => console.log(`Example app listening on port ${port}!`));\n")),(0,s.kt)("h4",{id:"verify-that-it-works"},"Verify that it works"),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},"Run ",(0,s.kt)("inlineCode",{parentName:"li"},"yarn install"),";"),(0,s.kt)("li",{parentName:"ol"},"Run ",(0,s.kt)("inlineCode",{parentName:"li"},"node index.js"),";"),(0,s.kt)("li",{parentName:"ol"},"Open ",(0,s.kt)("a",{parentName:"li",href:"http://localhost:8080"},(0,s.kt)("inlineCode",{parentName:"a"},"http://localhost:8080")),". You will see\n",(0,s.kt)("inlineCode",{parentName:"li"},"Hello World!"),";"),(0,s.kt)("li",{parentName:"ol"},"Open ",(0,s.kt)("a",{parentName:"li",href:"http://localhost:8080/self-check"},(0,s.kt)("inlineCode",{parentName:"a"},"http://localhost:8080/self-check")),".\nYou will see ",(0,s.kt)("inlineCode",{parentName:"li"},"OK!")," in the browser. In the terminal, you will see something\nlike this:")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-text"},"Example app listening on port 8080!\nSending doc to DB.\nDoc recorded in DB\nTrying to obtain doc in DB.\nWe obtained a doc with id random-id. It's content is logged below:\n{ name: 'Hello World',\n  time: Timestamp { _seconds: 1554738493, _nanoseconds: 994000000 } }\nNow we will try to remove it.\nThe document is deleted.\nAfter all these operations, the db should be empty. We check that.\nWe passed the check. The page in browser should say OK.\n")),(0,s.kt)("h2",{id:"basic-database-manipulations"},"Basic Database Manipulations"),(0,s.kt)("p",null,"People usually call that ",(0,s.kt)("inlineCode",{parentName:"p"},"CRUD"),", which stands for:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"C"),"reate/Insert - Create a document (will fail if the document exists)"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"R"),"ead/Find/Query - To search for documents based on their properties"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"U"),"pdate - Update an existing document (will fail otherwise)"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"D"),"elete - Delete an existing document")),(0,s.kt)("p",null,"For convenience, most NoSQL database also provides an ",(0,s.kt)("em",{parentName:"p"},"upsert")," operation. It\nwill create the document or update an existing document. You can think of that\nas an atomic operation that does:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"if (document.exists()) {\n  database.update(document);\n} else {\n  database.insert(document);\n}\n")),(0,s.kt)("p",null,"In Firestore, you can either insert a new document with a specified ID, or allow\nFirestore to generate its own ID for you."),(0,s.kt)("p",null,"The update method in Firestore allows you to update certain fields of the\ndocument without overwriting the entire thing."),(0,s.kt)("h2",{id:"sample-code"},"Sample code"),(0,s.kt)("p",null,"The following code demonstrate how we can do basic CRUD with Firestore.\nNote that the code below does not care about what are the fields of a post,\nbecause Firestore doesn't require you to have a predefined set of field. This\ngives you flexibility when writing your backend code."),(0,s.kt)(r.Z,{groupId:"lang",defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"}],mdxType:"Tabs"},(0,s.kt)(i.Z,{value:"ts",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="index.ts"',title:'"index.ts"'},"// in typescript import packages as modules\nimport admin from 'firebase-admin';\nimport express from 'express'; // also install type aliases for Request, Response\nimport bodyParser from 'body-parser';\n\nconst serviceAccount = require('./service-account.json');\n\nadmin.initializeApp({\n  credential: admin.credential.cert(serviceAccount),\n  databaseURL: 'https://dti-web-dev-sp19-db-demo.firebaseio.com',\n});\n\nconst db = admin.firestore();\n\nconst app = express();\nconst port: number = 8080;\napp.use(bodyParser.json());\n\n// Define a type for our Post document stored in Firebase\ntype Post = {\n  content: string;\n  name: string;\n};\n\ntype PostWithID = Post & {\n  id: string;\n};\n\napp.get('/', (_, res) => res.send('Hello World!'));\n\nconst postsCollection = db.collection('posts');\n\n// create a post\napp.post('/post', function (req, res) {\n  const post: Post = req.body;\n  const myDoc = postsCollection.doc();\n  myDoc.set(post);\n  res.send(myDoc.id);\n});\n\n// read all posts\napp.get('/post', async function (_, res) {\n  // we don't use the first request parameter\n  const allPostsDoc = await postsCollection.get();\n  const posts: PostWithID[] = [];\n  for (let doc of allPostsDoc.docs) {\n    let post: PostWithID = doc.data() as PostWithID;\n    post.id = doc.id;\n    posts.push(post);\n  }\n  res.send(posts);\n});\n\n// read posts by name\napp.get('/post/:name', async function (req, res) {\n  const namePostsDoc = await postsCollection\n    .where('name', '==', req.params.name)\n    .get();\n  const posts: PostWithID[] = [];\n  for (let doc of namePostsDoc.docs) {\n    let post: PostWithID = doc.data() as PostWithID;\n    post.id = doc.id;\n    posts.push(post);\n  }\n  res.send(posts);\n});\n\n// sorted posts by name\napp.get('/postsorted', async function (_, res) {\n  // we don't use the first request parameter\n  const sortedPosts = await postsCollection.orderBy('name', 'desc').get();\n  const posts: PostWithID[] = [];\n  for (let doc of sortedPosts.docs) {\n    let post: PostWithID = doc.data() as PostWithID;\n    post.id = doc.id;\n    posts.push(post);\n  }\n  res.send(posts);\n});\n\n// update a post\napp.post('/post/:id', async function (req, res) {\n  const id: string = req.params.id;\n  const newPost = req.body;\n  await postsCollection.doc(id).update(newPost);\n  res.send('UPDATED');\n});\n\n// delete a post\napp.delete('/post/:id', async function (req, res) {\n  const id: string = req.params.id;\n  await postsCollection.doc(id).delete();\n  res.send('DELETED');\n});\n\napp.listen(port, () => console.log(`Example app listening on port ${port}!`));\n")),(0,s.kt)("p",null,"For TypeScript, we need to compile this down to JavaScript before we run it:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"tsc index.ts\nnode index.js\n")),(0,s.kt)("p",null,"The first command compiles ",(0,s.kt)("inlineCode",{parentName:"p"},"index.ts")," to a JS file of the same name. The second runs that JS file.")),(0,s.kt)(i.Z,{value:"js",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript",metastring:'title="index.js"',title:'"index.js"'},"const admin = require('firebase-admin');\nconst serviceAccount = require('./service-account.json');\nconst express = require('express');\nconst bodyParser = require('body-parser');\n\nadmin.initializeApp({\n  credential: admin.credential.cert(serviceAccount),\n  databaseURL: 'https://dti-web-dev-sp19-db-demo.firebaseio.com',\n});\n\nconst db = admin.firestore();\n\nconst app = express();\nconst port = 8080;\napp.use(bodyParser.json());\n\napp.get('/', (req, res) => res.send('Hello World!'));\n\nconst postsCollection = db.collection('posts');\n\n// create a post\napp.post('/post', function (req, res) {\n  const post = req.body;\n  const myDoc = postsCollection.doc();\n  myDoc.set(post);\n  res.send(myDoc.id);\n});\n\n// read all posts\napp.get('/post', async function (req, res) {\n  const allPostsDoc = await postsCollection.get();\n  const posts = [];\n  for (let doc of allPostsDoc.docs) {\n    let post = doc.data();\n    post.id = doc.id;\n    posts.push(post);\n  }\n  res.send(posts);\n});\n\n// read posts by name\napp.get('/post/:name', async function (req, res) {\n  const namePostsDoc = await postsCollection\n    .where('name', '==', req.params.name)\n    .get();\n  const posts = [];\n  for (let doc of namePostsDoc.docs) {\n    let post = doc.data();\n    post.id = doc.id;\n    posts.push(post);\n  }\n  res.send(posts);\n});\n\n// sorted posts by name\napp.get('/postsorted', async function (req, res) {\n  const sortedPosts = await postsCollection.orderBy('name', 'desc').get();\n  const posts = [];\n  for (let doc of sortedPosts.docs) {\n    let post = doc.data();\n    post.id = doc.id;\n    posts.push(post);\n  }\n  res.send(posts);\n});\n\n// update a post\napp.post('/post/:id', async function (req, res) {\n  const id = req.params.id;\n  const newPost = req.body;\n  await postsCollection.doc(id).update(newPost);\n  res.send('UPDATED');\n});\n\n// delete a post\napp.delete('/post/:id', async function (req, res) {\n  const id = req.params.id;\n  await postsCollection.doc(id).delete();\n  res.send('DELETED');\n});\n\napp.listen(port, () => console.log(`Example app listening on port ${port}!`));\n")),(0,s.kt)("p",null,"Run it using ",(0,s.kt)("inlineCode",{parentName:"p"},"node index.js"),"!"))))}h.isMDXComponent=!0}}]);