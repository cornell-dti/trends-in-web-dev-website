"use strict";(self.webpackChunktrends_in_web_dev_website=self.webpackChunktrends_in_web_dev_website||[]).push([[2987],{3905:function(e,t,n){n.d(t,{Zo:function(){return h},kt:function(){return c}});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},h=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,h=s(e,["components","mdxType","originalType","parentName"]),u=p(n),c=i,m=u["".concat(l,".").concat(c)]||u[c]||d[c]||o;return n?a.createElement(m,r(r({ref:t},h),{},{components:n})):a.createElement(m,r({ref:t},h))}));function c(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,r=new Array(o);r[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,r[1]=s;for(var p=2;p<o;p++)r[p]=n[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},6268:function(e,t,n){n.r(t),n.d(t,{contentTitle:function(){return l},default:function(){return u},frontMatter:function(){return s},metadata:function(){return p},toc:function(){return h}});var a=n(7462),i=n(3366),o=(n(7294),n(3905)),r=["components"],s={id:"assignment5",title:"Assignment 5"},l=void 0,p={unversionedId:"assignment5",id:"version-2021fa/assignment5",isDocsHomePage:!1,title:"Assignment 5",description:"For A5, you'll be building a React app that utilizes conditional rendering and",source:"@site/versioned_docs/version-2021fa/assignment5.md",sourceDirName:".",slug:"/assignment5",permalink:"/docs/2021fa/assignment5",tags:[],version:"2021fa",frontMatter:{id:"assignment5",title:"Assignment 5"},sidebar:"version-2021fa/docs",previous:{title:"Assignment 4",permalink:"/docs/2021fa/assignment4"},next:{title:"Final Project",permalink:"/docs/2021fa/finalproject"}},h=[{value:"Part 1 - <code>App.tsx</code> Scaffolding",id:"part-1---apptsx-scaffolding",children:[],level:2},{value:"Part 2 - Lifting State Up",id:"part-2---lifting-state-up",children:[],level:2},{value:"Part 3 - Render the Shopping List",id:"part-3---render-the-shopping-list",children:[],level:2},{value:"Part 4 - Conditional Rendering",id:"part-4---conditional-rendering",children:[],level:2},{value:"Part 5 - Status Text",id:"part-5---status-text",children:[],level:2},{value:"Submission",id:"submission",children:[],level:2},{value:"FAQ",id:"faq",children:[{value:"Does my app need to look exactly like what the GIF shows?",id:"does-my-app-need-to-look-exactly-like-what-the-gif-shows",children:[],level:3},{value:"How do I get the type for the callback function when lifting the state up from the child components?",id:"how-do-i-get-the-type-for-the-callback-function-when-lifting-the-state-up-from-the-child-components",children:[],level:3},{value:"Getting a weird error with my items state in the <code>App.tsx</code> (<code>never[]</code>)",id:"getting-a-weird-error-with-my-items-state-in-the-apptsx-never",children:[],level:3}],level:2}],d={toc:h};function u(e){var t=e.components,s=(0,i.Z)(e,r);return(0,o.kt)("wrapper",(0,a.Z)({},d,s,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"For A5, you'll be building a React app that utilizes conditional rendering and\nthe concept of lifting state up."),(0,o.kt)("p",null,"In this project, we'll be building a searchable/filterable shopping list that\nmaintains a list of items, each with its own metadata. This metadata simply\nconsists of the name of the item and whether it has been purchased. The app is\ncomposed out of a few components: one that maintains each item itself, one that\nrenders the list of items, and one that acts as a search bar for us to filter\nand search through our list of items, rerendering the list of items. There will\nalso be some text describing the state of the shopping list. We will use a\npotpourri of React knowledge to accomplish all of this, including lifting state\nup, conditional rendering, hooks, callbacks, and more!"),(0,o.kt)("p",null,"Here is a GIF showing the final functionality of the app:"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Assignment 5 Demo",src:n(2320).Z})),(0,o.kt)("h2",{id:"part-1---apptsx-scaffolding"},"Part 1 - ",(0,o.kt)("inlineCode",{parentName:"h2"},"App.tsx")," Scaffolding"),(0,o.kt)("p",null,"In App.tsx, we will have two states, as well as a type definition to be exported\nto other components. Let's start with the type definition. We want to make a\ntype for each item's metadata (remember, each item has a name and a \"purchased\"\nstatus). When you define this, make sure to put the ",(0,o.kt)("inlineCode",{parentName:"p"},"export")," keyword before the\ntype definition so that you can import it in other components that need to use\nit."),(0,o.kt)("p",null,"Next, create the two states, each of which will be lifted up from a child\ncomponent. The first state should represent all of the items (metadata) on the\nlist, and the second should keep track of the current search query string. Do\nnot display the list in this component; we will be passing it down to a child\ncomponent."),(0,o.kt)("h2",{id:"part-2---lifting-state-up"},"Part 2 - Lifting State Up"),(0,o.kt)("p",null,"Create two components: ",(0,o.kt)("inlineCode",{parentName:"p"},"SearchBar.tsx")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"AddItemBar.tsx"),". The first one will\nhave an ",(0,o.kt)("inlineCode",{parentName:"p"},"<input>")," field representing the search bar, and will need to lift the\nvalue of the input up into the ",(0,o.kt)("inlineCode",{parentName:"p"},"App.tsx")," parent. The second one will also have a\ninput field, representing the name of the item to be added, as well as a button\nto actually add the data to the list. The button ",(0,o.kt)("inlineCode",{parentName:"p"},"onClick")," prop will be useful\nfor implementing this, as well as maintaining the state for the name in\n",(0,o.kt)("inlineCode",{parentName:"p"},"AddItemBar"),"."),(0,o.kt)("p",null,"At this point we can also do some input validation by disabling the add button\nwhen the input field is empty. The ",(0,o.kt)("inlineCode",{parentName:"p"},"disabled")," prop for buttons takes a boolean\nand will be useful for this!"),(0,o.kt)("p",null,"Once you've created these child components, add them to ",(0,o.kt)("inlineCode",{parentName:"p"},"App.tsx")," and supply\nthem with the necessary props. Assuming you've lifted state up correctly from\nthem, you can now make use of the search query and the list of item metadata in\norder to render a filtered list based on the query."),(0,o.kt)("h2",{id:"part-3---render-the-shopping-list"},"Part 3 - Render the Shopping List"),(0,o.kt)("p",null,"Create a new component called ",(0,o.kt)("inlineCode",{parentName:"p"},"ShoppingList.tsx"),". This should display the list\nin a similar way as the songs list from Assignment 4, but should be made up of\nthe items that have the search query as a substring of their name\n(",(0,o.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/2021fa/Web/JavaScript/Reference/Global_Objects/Array/includes"},"hint"),").\nIt should also show each item's name and purchased status (as a checkbox). You\ncan format it as in the GIF."),(0,o.kt)("p",null,"How do we make a checkbox? Glad you asked! You can use ",(0,o.kt)("inlineCode",{parentName:"p"},'<input type="checkbox" ... />')," to represent tags. Useful props for this element/tag would be ",(0,o.kt)("inlineCode",{parentName:"p"},"checked"),"\n(analogous to ",(0,o.kt)("inlineCode",{parentName:"p"},"value")," for text inputs) and ",(0,o.kt)("inlineCode",{parentName:"p"},"onChange"),". You'll need to use\ncallbacks to modify the item's lifted states up the tree!"),(0,o.kt)("p",null,"(Hint: add something to the item metadata that uniquely identifies it)"),(0,o.kt)("h2",{id:"part-4---conditional-rendering"},"Part 4 - Conditional Rendering"),(0,o.kt)("p",null,"Use conditional rendering to handle two cases:"),(0,o.kt)("p",null,"First, if there are no items in the shopping list, render some text that tells\nthe user that the list is empty."),(0,o.kt)("p",null,"Second, if the search query didn't match any of the items in the list, make sure\nto render a message saying that the item could not be found."),(0,o.kt)("p",null,"Else, just show the list."),(0,o.kt)("h2",{id:"part-5---status-text"},"Part 5 - Status Text"),(0,o.kt)("p",null,"Each item has a purchased status - let's display how many we have left to buy!"),(0,o.kt)("p",null,"First, we will render this information on the webpage itself - this should be\nfairly simple."),(0,o.kt)("p",null,"Then, we will show something similar on the window title - the text on your\nbrowser tab. See the demo GIF for how it might look like. Make sure you display\nthe number of unpurchased items in the list, and that it updates each time this\nnumber list changes!"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"useEffect")," hook as well as the ",(0,o.kt)("inlineCode",{parentName:"p"},"window.document.title")," property will be\nuseful."),(0,o.kt)("h2",{id:"submission"},"Submission"),(0,o.kt)("p",null,"Submit to CMS a zip file of everything in your project directory but ",(0,o.kt)("strong",{parentName:"p"},"remove\nnode_modules")," . ",(0,o.kt)("em",{parentName:"p"},"Failure to remove")," ",(0,o.kt)("inlineCode",{parentName:"p"},"node_modules")," ",(0,o.kt)("em",{parentName:"p"},"will result in a ",(0,o.kt)("strong",{parentName:"em"},"10\npoint")," deduction"),"."),(0,o.kt)("h2",{id:"faq"},"FAQ"),(0,o.kt)("h3",{id:"does-my-app-need-to-look-exactly-like-what-the-gif-shows"},"Does my app need to look exactly like what the GIF shows?"),(0,o.kt)("p",null,"No, you're free to make your UI as pretty or as ugly as you want, as long as the\nfunctionality is there."),(0,o.kt)("p",null,"Here is what you ",(0,o.kt)("strong",{parentName:"p"},"don't")," need:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},'a "Clear" button for the search bar'),(0,o.kt)("li",{parentName:"ul"},'a "X" (remove) button for each item'),(0,o.kt)("li",{parentName:"ul"},'handling "item" vs "item',(0,o.kt)("em",{parentName:"li"},"s"),'" when there is 1 item - using "item(s)" is perfectly fine'),(0,o.kt)("li",{parentName:"ul"},'being able to add items by pressing "Enter" instead of clicking the button'),(0,o.kt)("li",{parentName:"ul"},"a random image of Spongebob (but feel free to add one!)"),(0,o.kt)("li",{parentName:"ul"},"to make dinner for your React app")),(0,o.kt)("p",null,"Here is what you ",(0,o.kt)("strong",{parentName:"p"},"do")," need:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"a rendered shopping list of items"),(0,o.kt)("li",{parentName:"ul"},"a case-insensitive search bar (as shown in demo GIF)"),(0,o.kt)("li",{parentName:"ul"},"an Add button that gets disabled when name field is empty"),(0,o.kt)("li",{parentName:"ul"},"a window title that gets updated"),(0,o.kt)("li",{parentName:"ul"},"interactable checkbox for each item that reflects its purchased status")),(0,o.kt)("h3",{id:"how-do-i-get-the-type-for-the-callback-function-when-lifting-the-state-up-from-the-child-components"},"How do I get the type for the callback function when lifting the state up from the child components?"),(0,o.kt)("p",null,"You can mouse over the type (using VS Code) of the setter function in the ",(0,o.kt)("inlineCode",{parentName:"p"},"useState"),"\nhook for the state you want to lift up into the ",(0,o.kt)("inlineCode",{parentName:"p"},"App.tsx"),". This way, you can use\nit in the prop type for each of the child components that need it."),(0,o.kt)("h3",{id:"getting-a-weird-error-with-my-items-state-in-the-apptsx-never"},"Getting a weird error with my items state in the ",(0,o.kt)("inlineCode",{parentName:"h3"},"App.tsx")," (",(0,o.kt)("inlineCode",{parentName:"h3"},"never[]"),")"),(0,o.kt)("p",null,"Unfortunately, TypeScript can't infer the type of your state if you set the initial\nvalue to simply ",(0,o.kt)("inlineCode",{parentName:"p"},"[]"),", and it assumes that it's just a falsy value. To fix this,\nmake sure to parametrize the ",(0,o.kt)("inlineCode",{parentName:"p"},"useState")," hook using the type definition you created;\nfor example, ",(0,o.kt)("inlineCode",{parentName:"p"},"const [state, setState] = useState<MyType[]>([])"),"."))}u.isMDXComponent=!0},2320:function(e,t,n){t.Z=n.p+"assets/images/a5_demo-b05c73d722e5ddf20f992d83ca40d651.gif"}}]);