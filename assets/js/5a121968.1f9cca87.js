"use strict";(self.webpackChunktrends_in_web_dev_website=self.webpackChunktrends_in_web_dev_website||[]).push([[4090],{7300:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var a=n(6687);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),d=p(n),m=r,h=d["".concat(s,".").concat(m)]||d[m]||u[m]||l;return n?a.createElement(h,i(i({ref:t},c),{},{components:n})):a.createElement(h,i({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=d;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var p=2;p<l;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8684:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return o},contentTitle:function(){return s},metadata:function(){return p},toc:function(){return c},default:function(){return d}});var a=n(3206),r=n(5421),l=(n(6687),n(7300)),i=["components"],o={id:"lecture0",title:"Lecture 0"},s=void 0,p={unversionedId:"lecture0",id:"version-2020fa/lecture0",isDocsHomePage:!1,title:"Lecture 0",description:"Lecture Video",source:"@site/versioned_docs/version-2020fa/lecture0.md",sourceDirName:".",slug:"/lecture0",permalink:"/docs/2020fa/lecture0",tags:[],version:"2020fa",frontMatter:{id:"lecture0",title:"Lecture 0"},sidebar:"version-2020fa/docs",previous:{title:"Setup your editor",permalink:"/docs/2020fa/setup-editor"},next:{title:"Lecture 1",permalink:"/docs/2020fa/lecture1"}},c=[{value:"JavaScript",id:"javascript",children:[{value:"What is JavaScript",id:"what-is-javascript",children:[],level:3},{value:"Basic JavaScript Syntax",id:"basic-javascript-syntax",children:[{value:"Variables",id:"variables",children:[],level:4},{value:"if statements",id:"if-statements",children:[],level:4},{value:"for loops",id:"for-loops",children:[{value:"regular counter for loop",id:"regular-counter-for-loop",children:[],level:5},{value:"for of loop",id:"for-of-loop",children:[],level:5}],level:4},{value:"for in loop",id:"for-in-loop",children:[],level:4},{value:"while loops",id:"while-loops",children:[],level:4},{value:"function declaration",id:"function-declaration",children:[],level:4}],level:3}],level:2},{value:"TypeScript",id:"typescript",children:[{value:"JavaScript Types",id:"javascript-types",children:[],level:3},{value:"How are types used?",id:"how-are-types-used",children:[],level:3},{value:"Why TypeScript?",id:"why-typescript",children:[],level:3},{value:"TypeScript Types",id:"typescript-types",children:[{value:"Basic Types",id:"basic-types",children:[],level:4},{value:"Any",id:"any",children:[],level:4},{value:"Functions",id:"functions",children:[],level:4},{value:"Literal Types",id:"literal-types",children:[{value:"String Literal Types",id:"string-literal-types",children:[],level:5},{value:"Numeric Literal Types",id:"numeric-literal-types",children:[],level:5}],level:4},{value:"Union Types",id:"union-types",children:[],level:4},{value:"Intersection Types",id:"intersection-types",children:[],level:4}],level:3},{value:"Demo",id:"demo",children:[],level:3}],level:2}],u={toc:c};function d(e){var t=e.components,n=(0,r.Z)(e,i);return(0,l.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://drive.google.com/file/d/1Y7KShrkY0IDFoVN0vsZ1XhGFMf3qopnE/view?usp=sharing"},"Lecture Video")),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://docs.google.com/presentation/d/1WpfGvyGtjkEmM2MrV2yFfQ_b7pVHGbO-GlnViJOa4HY/edit?usp=sharing"},"Lecture Slides")),(0,l.kt)("p",null,"No homework this week! We're still getting CMS/Piazza set up"),(0,l.kt)("h2",{id:"javascript"},"JavaScript"),(0,l.kt)("h3",{id:"what-is-javascript"},"What is JavaScript"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"JavaScript is the defacto language of the web"),(0,l.kt)("li",{parentName:"ul"},"Commonly used in conjunction with HTML/CSS"),(0,l.kt)("li",{parentName:"ul"},"Became really popular for powering client-side logic through AJAX",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Previously, languages like PHP had to communicate with the server before coming back with a response"))),(0,l.kt)("li",{parentName:"ul"},"These days JavaScript is everywhere!")),(0,l.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},"Java is to JavaScript as car is to carpet. They are very different languages!"))),(0,l.kt)("h3",{id:"basic-javascript-syntax"},"Basic JavaScript Syntax"),(0,l.kt)("h4",{id:"variables"},"Variables"),(0,l.kt)("p",null,"There are three ways to create variables in JS:"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("del",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"del"},"var x = 5"))),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("inlineCode",{parentName:"li"},"let x = 5")),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"const x = 5")))),(0,l.kt)("p",null,"We prefer using ",(0,l.kt)("strong",{parentName:"p"},"const")," for immutability although let is also accepted. ",(0,l.kt)("em",{parentName:"p"},(0,l.kt)("strong",{parentName:"em"},"Never use var."))),(0,l.kt)("h4",{id:"if-statements"},"if statements"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"if (condition) {\n  // executes if condition is true\n} else if (condition2) {\n  // executes if condition is false but condition2 is true\n} else {\n  // executes if condition is false\n}\n")),(0,l.kt)("h4",{id:"for-loops"},"for loops"),(0,l.kt)("h5",{id:"regular-counter-for-loop"},"regular counter for loop"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"for (let i = 0; i < 5; i++) {\n  console.log(i);\n}\n")),(0,l.kt)("h5",{id:"for-of-loop"},"for of loop"),(0,l.kt)("p",null,"We can use ",(0,l.kt)("inlineCode",{parentName:"p"},"for..of")," loops to loop through elements of an array."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"const arr = [10, 20, 30, 40];\nfor (const val of arr) {\n  console.log(val); // prints values: 10, 20, 30, 40\n}\n")),(0,l.kt)("h4",{id:"for-in-loop"},"for in loop"),(0,l.kt)("p",null,"We can use ",(0,l.kt)("inlineCode",{parentName:"p"},"for..in")," loops to loop through keys of an object."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'const object = { a: 1, b: 2, c: 3 };\n\nfor (const property in object) {\n  console.log(`${property}: ${object[property]}`);\n}\n\n// expected output:\n// "a: 1"\n// "b: 2"\n// "c: 3"\n')),(0,l.kt)("h4",{id:"while-loops"},"while loops"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'let n = 0;\n\nwhile (n < 3) {\n  console.log(n);\n  n++;\n}\n\n// expected output:\n// "0"\n// "1"\n// "2"\n')),(0,l.kt)("h4",{id:"function-declaration"},"function declaration"),(0,l.kt)("p",null,"We can use the function key word to define a function!"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"function calcRectArea(width, height) {\n  return width * height;\n}\n\nconsole.log(calcRectArea(5, 6)); // 30\n")),(0,l.kt)("p",null,"or we can use ",(0,l.kt)("em",{parentName:"p"},"arrow functions"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"const calcRectArea = (width, height) => {\n  return width * height;\n};\n")),(0,l.kt)("p",null,"More details on arrow functions in a few weeks when we talk about ES6!"),(0,l.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},"JavaScript is a super powerful language and this was just a small sample of its language features. Check out Mozilla Developer Network (MDN) for the best JavaScript documentation: ",(0,l.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide"},"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide")))),(0,l.kt)("h2",{id:"typescript"},"TypeScript"),(0,l.kt)("p",null,"TypeScript is a typed ",(0,l.kt)("em",{parentName:"p"},"superset")," of JavaScript that compiles to plain JavaScript. Superset means TypeScript has everything in JavaScript and more. (Built by Microsoft!)"),(0,l.kt)("h3",{id:"javascript-types"},"JavaScript Types"),(0,l.kt)("p",null,"JavaScript has 6 primitive types:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Boolean"),(0,l.kt)("li",{parentName:"ul"},"String"),(0,l.kt)("li",{parentName:"ul"},"Number"),(0,l.kt)("li",{parentName:"ul"},"Symbol"),(0,l.kt)("li",{parentName:"ul"},"undefined"),(0,l.kt)("li",{parentName:"ul"},"BigInt")),(0,l.kt)("p",null,"All JavaScript values are those 6 primitive types or a:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"object"),(0,l.kt)("li",{parentName:"ul"},"function (JavaScript is functional!)"),(0,l.kt)("li",{parentName:"ul"},"null")),(0,l.kt)("h3",{id:"how-are-types-used"},"How are types used?"),(0,l.kt)("p",null,"In JavaScript we had:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"let str = 'Hello, trends';\nlet num = 42;\nlet truth = true;\n\nconst someFunc = (x, s, b) => {\n  // do some operations...\n  return x;\n};\n")),(0,l.kt)("p",null,"Notice we don't have any types here! JavaScript is weakly typed."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"let str: string = 'Hello, trends';\nlet num: number = 42;\nlet truth: boolean = false;\nconst someFunc = (x: number, s: string, b: boolean): number => {\n  // do some operations...\n  return x;\n};\n")),(0,l.kt)("p",null,"TypeScript allows us to add type information!"),(0,l.kt)("h3",{id:"why-typescript"},"Why TypeScript?"),(0,l.kt)("p",null,"JavaScript code can be ambiguous. We had the function:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"const someFunc = (x, s, b) => {\n  // do some operations...\n  return x;\n};\n")),(0,l.kt)("p",null,"What are ",(0,l.kt)("inlineCode",{parentName:"p"},"x, s, b"),"? What should I pass in for those? What should I expect returned?"),(0,l.kt)("p",null,"Adding the TypeScript types makes this code self-documenting:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"const someFunc = (x: number, s: string, b: boolean): number => {\n  // do some operations...\n  return x;\n};\n")),(0,l.kt)("p",null,"JavaScript variables can also change type which can be undesirable, unexpected, and error-prone."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"let str = 'Hello, trends';\nlet num = 42;\nlet truth = true;\nstr = 13;\n")),(0,l.kt)("p",null,"None of these variables have to be any specific type! I can have ",(0,l.kt)("inlineCode",{parentName:"p"},"str")," be a string and then a number."),(0,l.kt)("p",null,"In the end, we want to use TypeScript because it is:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Easier to read"),(0,l.kt)("li",{parentName:"ul"},"Easier and faster to implement"),(0,l.kt)("li",{parentName:"ul"},"Easier to refactor"),(0,l.kt)("li",{parentName:"ul"},"Less buggy")),(0,l.kt)("h3",{id:"typescript-types"},"TypeScript Types"),(0,l.kt)("p",null,"Basic Syntax:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"let <var_name>: <type> = <something>;\n")),(0,l.kt)("p",null,"We can also use ",(0,l.kt)("inlineCode",{parentName:"p"},"const")," but again no ",(0,l.kt)("inlineCode",{parentName:"p"},"var"),"."),(0,l.kt)("h4",{id:"basic-types"},"Basic Types"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"// Boolean\nlet isDone: boolean = false;\n// Number can be decimal, or in any base!\nlet decimal: number = 4.2;\nlet binary: number = 0b1010;\nlet hex: number = 0xf00d;\n// String\nlet lang: string = 'typescript';\nlet templateStr: string = `We love ${lang}`;\n// Boolean\nlet isDone: boolean = false;\n// Number can be decimal, or in any base!\nlet decimal: number = 4.2;\nlet binary: number = 0b1010;\nlet hex: number = 0xf00d;\n// String\nlet lang: string = 'typescript';\nlet templateStr: string = `We love ${lang}`;\n")),(0,l.kt)("h4",{id:"any"},"Any"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"Any")," is a wildcard and it can be anything. ",(0,l.kt)("inlineCode",{parentName:"p"},"any")," places no restrictions on type."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"// Any: can be anything!\nlet notSure: any = 4;\nnotSure = 'maybe a string instead';\nnotSure = false; // okay, definitely a boolean\n")),(0,l.kt)("p",null,"If you were to use ",(0,l.kt)("inlineCode",{parentName:"p"},"any")," everywhere though you might as well just use JavaScript"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"let anyList: any[] = [4, 'maybe a string', false];\n")),(0,l.kt)("p",null,"But it can be useful in specifying collections of items of different types!"),(0,l.kt)("h4",{id:"functions"},"Functions"),(0,l.kt)("p",null,"Functions can have types too!"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"// un-typed\nconst myFunc = (x, y) => x + y;\n// typed\nconst myFunc = (x: number, y: number): number => x + y;\n")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"myFunc")," has type ",(0,l.kt)("inlineCode",{parentName:"p"},"(x: number, y: number): number"),"."),(0,l.kt)("p",null,"TypeScript can do some limited type inference so if you leave out the return type ",(0,l.kt)("inlineCode",{parentName:"p"},"number"),", TypeScript can infer it since we are just adding two numbers which can only produce a number. If TypeScript can't infer the type, it defaults as ",(0,l.kt)("inlineCode",{parentName:"p"},"any"),"."),(0,l.kt)("p",null,"We can also have optional parameters:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"const introduce = (name: string, github?: string): string => {\n  return github\n    ? `Hi, I'm ${name}. Checkout my GitHub @${github}`\n    : `Hi, I'm ${name}. I don't have a GitHub.`;\n};\n")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"github?")," designates ",(0,l.kt)("inlineCode",{parentName:"p"},"github")," as an optional parameter that defaults to ",(0,l.kt)("inlineCode",{parentName:"p"},"undefined"),"."),(0,l.kt)("h4",{id:"literal-types"},"Literal Types"),(0,l.kt)("p",null,"Literal Types are types that can be a literal set of possibilities that you specify. TypeScript allows number and string literal types:"),(0,l.kt)("h5",{id:"string-literal-types"},"String Literal Types"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"// String literal type\ntype TrafficLightColors = 'red' | 'green' | 'yellow';\n")),(0,l.kt)("p",null,"Any variable with ",(0,l.kt)("inlineCode",{parentName:"p"},"TrafficLightColors")," type can only take on values ",(0,l.kt)("inlineCode",{parentName:"p"},'"red", "green", "yellow"'),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"let light1: TrafficLightColors = 'red';\nlight1 = 'blue'; // TypeError\n")),(0,l.kt)("h5",{id:"numeric-literal-types"},"Numeric Literal Types"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"// Numeric literal type\ntype DiceRoll = 1 | 2 | 3 | 4 | 5 | 6;\nconst rollDice = (): DiceRoll => {\n  // ...\n};\n")),(0,l.kt)("h4",{id:"union-types"},"Union Types"),(0,l.kt)("p",null,"With union types, a variable can be of one type or another type."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"const union: number | string = 5; // number\nconst union2: number | string = 'hello'; // string\n\ntype TrafficLightColors = 'red' | 'green' | 'yellow';\ntype PrimaryColors = 'red' | 'green' | 'blue';\n\n// \"red\" | \"green\" | \"yellow\" | \"blue\"\ntype union = PrimaryColors | TrafficLightColors;\n")),(0,l.kt)("h4",{id:"intersection-types"},"Intersection Types"),(0,l.kt)("p",null,"With union types, a variable must be of one type and another type."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"// Intersection Type\ntype TrafficLightColors = 'red' | 'green' | 'yellow';\ntype PrimaryColors = 'red' | 'green' | 'blue';\ntype intersect = PrimaryColors & TrafficLightColors; // \"red\" | \"green\"\n")),(0,l.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},"There's also so much more to TypeScript. Checkout TypeScript docs to learn more! ",(0,l.kt)("a",{parentName:"p",href:"https://www.typescriptlang.org/docs/"},"https://www.typescriptlang.org/docs/")))),(0,l.kt)("h3",{id:"demo"},"Demo"),(0,l.kt)("p",null,"We went through a demo of writing and running code in TypeScript using the preassessment as an example. First install ",(0,l.kt)("inlineCode",{parentName:"p"},"typescript")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"ts-node"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"yarn global add typescript\nyarn global add ts-node\n")),(0,l.kt)("p",null,"We used the following example code:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="script.ts"',title:'"script.ts"'},"const mySum = (inputArray: number[]): number => {\n  let sum: number = 0;\n  for (const num of inputArray) {\n    sum += num;\n  }\n  return sum;\n};\n\nconsole.log(mySum([1, 2, 3])); // expected 6\n\nconst isLeapYear = (year: number): boolean => {\n  return (year % 4 == 0 && year % 100 != 0) || year % 400 == 0;\n};\n\nconsole.log(isLeapYear(2000)); // is a leap year\nconsole.log(isLeapYear(2100)); // is NOT a leap year;\n\nconst perfectSquares = (arr: number[]): number[] => {\n  const ans: number[] = [];\n  for (const num of arr) {\n    if (Math.sqrt(num) % 1 === 0) {\n      ans.push(num);\n    }\n  }\n  return ans;\n};\n\nconsole.log(perfectSquares([1, 4, 9])); // expected same as input\nconsole.log(perfectSquares([1, 5, 9])); // expected [1, 9]\n")),(0,l.kt)("p",null,"Run it with ",(0,l.kt)("inlineCode",{parentName:"p"},"ts-node script.ts")))}d.isMDXComponent=!0},3206:function(e,t,n){function a(){return a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},a.apply(this,arguments)}n.d(t,{Z:function(){return a}})},5421:function(e,t,n){function a(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}n.d(t,{Z:function(){return a}})}}]);