"use strict";(self.webpackChunktrends_in_web_dev_website=self.webpackChunktrends_in_web_dev_website||[]).push([[6338],{7300:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return m}});var a=t(6687);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=a.createContext({}),l=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=l(e.components);return a.createElement(s.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),d=l(t),m=o,h=d["".concat(s,".").concat(m)]||d[m]||p[m]||r;return t?a.createElement(h,i(i({ref:n},u),{},{components:t})):a.createElement(h,i({ref:n},u))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,i=new Array(r);i[0]=d;var c={};for(var s in n)hasOwnProperty.call(n,s)&&(c[s]=n[s]);c.originalType=e,c.mdxType="string"==typeof e?e:o,i[1]=c;for(var l=2;l<r;l++)i[l]=t[l];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},4677:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return c},contentTitle:function(){return s},metadata:function(){return l},toc:function(){return u},default:function(){return d}});var a=t(3206),o=t(5421),r=(t(6687),t(7300)),i=["components"],c={id:"lecture5",title:"Lecture 5"},s=void 0,l={unversionedId:"lecture5",id:"version-2021fa/lecture5",isDocsHomePage:!1,title:"Lecture 5",description:"Lecture Slides",source:"@site/versioned_docs/version-2021fa/lecture5.md",sourceDirName:".",slug:"/lecture5",permalink:"/docs/lecture5",tags:[],version:"2021fa",frontMatter:{id:"lecture5",title:"Lecture 5"},sidebar:"docs",previous:{title:"Lecture 4",permalink:"/docs/lecture4"},next:{title:"Assignments",permalink:"/docs/assignments"}},u=[{value:"Your First Component",id:"your-first-component",children:[],level:2},{value:"Wat! What&#39;s going on",id:"wat-whats-going-on",children:[{value:"Functional Component",id:"functional-component",children:[],level:3},{value:"<code>index.tsx</code>",id:"indextsx",children:[],level:3}],level:2},{value:"Stateful Component",id:"stateful-component",children:[],level:2},{value:"Rendering lists",id:"rendering-lists",children:[],level:2}],p={toc:u};function d(e){var n=e.components,t=(0,o.Z)(e,i);return(0,r.kt)("wrapper",(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://docs.google.com/presentation/d/1LKOlGi1fo_6BewlhKCMEH_rsUZyutd4mfRJeWsSq1Uc/edit?usp=sharing"},"Lecture Slides")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/assignment3"},"Assignment 3")," (due 10/28 6:29 PM on CMS)"),(0,r.kt)("h2",{id:"your-first-component"},"Your First Component"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="ContactCard.tsx"',title:'"ContactCard.tsx"'},"type Props = { readonly name: string; readonly githubLink: string };\n\nconst ContactCard = ({ name, githubLink }: Props) => (\n  <div>\n    You can reach {name} at\n    <a href={githubLink}>{githubLink}</a>\n  </div>\n);\n")),(0,r.kt)("h2",{id:"wat-whats-going-on"},"Wat! What's going on"),(0,r.kt)("h3",{id:"functional-component"},"Functional Component"),(0,r.kt)("p",null,"The simplest component in React is a functional component. A functional component\ndoes not have any internal state. You can think of it as a function whose inputs\nare some JavaScript object and the output is some HTML code that is generated\nfrom the data."),(0,r.kt)("p",null,"In React, we call the JavaScript object ",(0,r.kt)("inlineCode",{parentName:"p"},"props"),", so you can see code like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="ContactCard.tsx"',title:'"ContactCard.tsx"'},"type Props = { readonly name: string; readonly githubLink: string };\n\nconst ContactCard = (props: Props) => (\n  <div>\n    You can reach {props.name} at\n    <a href={props.githubLink}>{props.githubLink}</a>\n  </div>\n);\n")),(0,r.kt)("p",null,"Just calling the input ",(0,r.kt)("inlineCode",{parentName:"p"},"props")," is not good for documentation purpose, so we\nusually use object destructuring to make it more explicit:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="ContactCard.tsx"',title:'"ContactCard.tsx"'},"type Props = { readonly name: string; readonly githubLink: string };\n\nconst ContactCard = ({ name, githubLink }: Props) => (\n  <div>\n    You can reach {name} at\n    <a href={githubLink}>{githubLink}</a>\n  </div>\n);\n")),(0,r.kt)("p",null,"In order for this component to be reused in another file, we need to export it:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="ContactCard.tsx"',title:'"ContactCard.tsx"'},"type Props = { readonly name: string; readonly githubLink: string };\n\nconst ContactCard = ({ name, githubLink }: Props) => (\n  <div>\n    You can reach {name} at\n    <a href={githubLink}>{githubLink}</a>\n  </div>\n);\n\nexport default ContactCard;\n")),(0,r.kt)("p",null,"React does not care about the arrow function syntax, so you can also write\nit in function definition syntax:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="ContactCard.tsx"',title:'"ContactCard.tsx"'},"type Props = { readonly name: string; readonly githubLink: string };\n\nfunction ContactCard({ name, githubLink }: Props) {\n  return (\n    <div>\n      You can reach {name} at\n      <a href={githubLink}>{githubLink}</a>\n    </div>\n  );\n}\n\nexport default ContactCard;\n")),(0,r.kt)("p",null,"For this course, we prefer that you use arrow function syntax."),(0,r.kt)("h3",{id:"indextsx"},(0,r.kt)("inlineCode",{parentName:"h3"},"index.tsx")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="index.tsx"',title:'"index.tsx"'},"import ReactDOM from 'react-dom';\nimport ContactCard from './ContactCard';\n\nconst link = 'https://github.com/cornell-dti';\nconst root = document.getElementById('root');\n\nReactDOM.render(<ContactCard name=\"Cornell DTI\" githubLink={link} />, root);\n")),(0,r.kt)("p",null,"In a React app, ",(0,r.kt)("inlineCode",{parentName:"p"},"index.tsx")," is usually the entry point. In the code above, it\nrenders your component into the DOM element that has id ",(0,r.kt)("inlineCode",{parentName:"p"},"root"),"."),(0,r.kt)("h2",{id:"stateful-component"},"Stateful Component"),(0,r.kt)("p",null,"Imagine you are writing a contacts app and you need to implement an editor."),(0,r.kt)("p",null,"Unlike the previous components, you need to maintain state. In React, you will\nneed ",(0,r.kt)("inlineCode",{parentName:"p"},"hooks"),". Hooks are functions that use state and lifecycle methods inside\nfunctional components. The ",(0,r.kt)("inlineCode",{parentName:"p"},"useState")," hook is the hook for maintaining state.\nNote that the general naming convention of a hook is ",(0,r.kt)("inlineCode",{parentName:"p"},"useXXXX"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"import { useState, ChangeEvent } from 'react';\n\nconst NewContact = () => {\n  // name is the variable for the state, setName is the function you can use\n  // to change the state.\n  const [name, setName] = useState('');\n  const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\n    // To extract the value from input box, use the following line.\n    const n = event.currentTarget.value;\n    setName(n);\n  };\n  return (\n    <div>\n      <p>Name: {name}</p>\n      <input\n        type=\"text\"\n        placeholder=\"enter the name here\"\n        value={name}\n        onChange={handleChange}\n      />\n    </div>\n  );\n};\n\nexport default NewContact;\n")),(0,r.kt)("h2",{id:"rendering-lists"},"Rendering lists"),(0,r.kt)("p",null,"You may want to render a list of ",(0,r.kt)("inlineCode",{parentName:"p"},"YourAwesomeComponent"),". Here are some examples\nto show how you can achieve this in different ways."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"// Suppose you have a ContactCard component defined there.\nimport ContactCard from './ContactCard';\n\ntype Contact = { name: string; githubLink: string };\n\nconst data: Contact[] = [\n  { name: 'Jason', githubLink: 'www.github.com/guessJason' },\n  { name: 'Peter', githubLink: 'www.github.com/peterIsCool' },\n  { name: 'Enoch', githubLink: 'www.github.com/eno' },\n];\n\nconst ListBySimpleMap = () => (\n  <div>\n    {data.map((contact: Contact) => (\n      <ContactCard\n        key={contact.name}\n        name={contact.name}\n        githubLink={contact.githubLink}\n      />\n    ))}\n  </div>\n);\n\nconst ListBySimpleMapWithObjectDestructing = () => (\n  <div>\n    {data.map(({ name, githubLink }) => (\n      <ContactCard key={name} name={name} githubLink={githubLink} />\n    ))}\n  </div>\n);\n\nconst ListBySimpleMapWithSpread = () => (\n  <div>\n    {data.map((contact: Contact) => (\n      <ContactCard key={contact.name} {...contact} />\n    ))}\n  </div>\n);\n")),(0,r.kt)("p",null,"Note that we always need a ",(0,r.kt)("inlineCode",{parentName:"p"},"key")," prop. Without this, React will give you\nwarnings in the console. React needs a unique ",(0,r.kt)("inlineCode",{parentName:"p"},"key")," for each item in the list to\nhelp it avoid rerendering everything when only one item in the list changes.\nIn this particular example, you should only use ",(0,r.kt)("inlineCode",{parentName:"p"},"name")," as the key if you know\nthat the property ",(0,r.kt)("inlineCode",{parentName:"p"},"name")," is unique. However, if there are multiple objects with\nthe same name in the list that are used as a key, it would confuse React."))}d.isMDXComponent=!0},3206:function(e,n,t){function a(){return a=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var a in t)Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a])}return e},a.apply(this,arguments)}t.d(n,{Z:function(){return a}})},5421:function(e,n,t){function a(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}t.d(n,{Z:function(){return a}})}}]);