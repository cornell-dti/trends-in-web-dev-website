"use strict";(self.webpackChunktrends_in_web_dev_website=self.webpackChunktrends_in_web_dev_website||[]).push([[3112],{7300:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var a=n(6687);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),d=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},p=function(e){var t=d(e.components);return a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,s=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),c=d(n),m=o,h=c["".concat(l,".").concat(m)]||c[m]||u[m]||s;return n?a.createElement(h,r(r({ref:t},p),{},{components:n})):a.createElement(h,r({ref:t},p))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var s=n.length,r=new Array(s);r[0]=c;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:o,r[1]=i;for(var d=2;d<s;d++)r[d]=n[d];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},88:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return i},contentTitle:function(){return l},metadata:function(){return d},toc:function(){return p},default:function(){return c}});var a=n(3206),o=n(5421),s=(n(6687),n(7300)),r=["components"],i={id:"lecture3",title:"Lecture 3"},l=void 0,d={unversionedId:"lecture3",id:"version-2021fa/lecture3",isDocsHomePage:!1,title:"Lecture 3",description:"Lecture Slides",source:"@site/versioned_docs/version-2021fa/lecture3.md",sourceDirName:".",slug:"/lecture3",permalink:"/docs/lecture3",tags:[],version:"2021fa",frontMatter:{id:"lecture3",title:"Lecture 3"},sidebar:"version-2021fa/docs",previous:{title:"Lecture 2",permalink:"/docs/lecture2"},next:{title:"Lecture 4",permalink:"/docs/lecture4"}},p=[{value:"Before the lecture",id:"before-the-lecture",children:[{value:"Create <code>tsconfig.json</code>",id:"create-tsconfigjson",children:[],level:3},{value:"Install Postman",id:"install-postman",children:[],level:3}],level:2},{value:"Postman and Request Bodies",id:"postman-and-request-bodies",children:[{value:"Postman",id:"postman",children:[],level:3},{value:"POST Request",id:"post-request",children:[],level:3},{value:"DELETE Request",id:"delete-request",children:[],level:3}],level:2},{value:"Intro to Databases and Firebase",id:"intro-to-databases-and-firebase",children:[{value:"Why do we need a database for our backend?",id:"why-do-we-need-a-database-for-our-backend",children:[],level:3},{value:"MySQL + Relational Databases",id:"mysql--relational-databases",children:[],level:3},{value:"NoSQL and Firestore",id:"nosql-and-firestore",children:[],level:3},{value:"SQL vs NoSQL",id:"sql-vs-nosql",children:[],level:3},{value:"What is Firebase?",id:"what-is-firebase",children:[],level:3},{value:"Why Firebase?",id:"why-firebase",children:[],level:3}],level:2},{value:"Basic Database Manipulations",id:"basic-database-manipulations",children:[],level:2},{value:"Sample code",id:"sample-code",children:[],level:2}],u={toc:p};function c(e){var t=e.components,n=(0,o.Z)(e,r);return(0,s.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://docs.google.com/presentation/d/1P8kf-H0n5my1O2OW1MOjo5GpvdMFsWGm68vgwU9TQc8/edit?usp=sharing"},"Lecture Slides")),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"/docs/assignment2"},"Assignment 2")," (due 10/21 6:29 PM on CMS)"),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://www.postman.com/downloads/"},"Install Postman")),(0,s.kt)("h2",{id:"before-the-lecture"},"Before the lecture"),(0,s.kt)("h3",{id:"create-tsconfigjson"},"Create ",(0,s.kt)("inlineCode",{parentName:"h3"},"tsconfig.json")),(0,s.kt)("p",null,"From now on, we will be using a ",(0,s.kt)("inlineCode",{parentName:"p"},"tsconfig.json")," file within every Node project we create (a recap on how to do that is below this section). Essentially, the ",(0,s.kt)("inlineCode",{parentName:"p"},"tsconfig.json")," is a file at the root of a Node project which indicates it is using TypeScript, and allows us to configure the TypeScript compiler. If you'd like to follow the lecture synchronously, you can put the following chunk of code into the root directory of your lecture 3 project. If you're more curious about how the file works, you can refer ",(0,s.kt)("a",{parentName:"p",href:"https://www.typescriptlang.org/docs/handbook/tsconfig-json.html"},"to this link"),"."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "compilerOptions": {\n    "target": "ES2021",\n    "outDir": "dist",\n    "lib": ["dom", "dom.iterable", "esnext"],\n    "baseUrl": "./src",\n    "skipLibCheck": true,\n    "esModuleInterop": true,\n    "allowSyntheticDefaultImports": true,\n    "strict": true,\n    "forceConsistentCasingInFileNames": true,\n    "isolatedModules": true,\n    "noUnusedLocals": true,\n    "importsNotUsedAsValues": "error",\n    "module": "commonjs",\n    "moduleResolution": "node",\n    "resolveJsonModule": true\n  },\n  "include": ["src"]\n}\n')),(0,s.kt)("h3",{id:"install-postman"},"Install Postman"),(0,s.kt)("p",null,"Use the link above to install Postman."),(0,s.kt)("h2",{id:"postman-and-request-bodies"},"Postman and Request Bodies"),(0,s.kt)("h3",{id:"postman"},"Postman"),(0,s.kt)("p",null,"Instead of always going to the endpoint in the browser, a robust way of testing\nour endpoints is to use Postman."),(0,s.kt)("p",null,"Postman is a software that allows you to simulate requests that could be sent by\na user to your backend. It is useful for testing and ensuring that the behavior\nof your requests (including necessary headers) is what you expect."),(0,s.kt)("h3",{id:"post-request"},"POST Request"),(0,s.kt)("p",null,"Usually when you want to send a ",(0,s.kt)("inlineCode",{parentName:"p"},"POST")," request you also want to send information\nwith it. Situationally, you want to do this using request bodies rather than\nquery parameters."),(0,s.kt)("p",null,"Let's say we have this ",(0,s.kt)("inlineCode",{parentName:"p"},"addSong")," endpoint:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="index.ts"',title:'"index.ts"'},"app.post('/addSong', (req, res) => {\n  const song: Song = { name: req.body.name, rating: req.body.rating };\n  console.log(song);\n  songs.push(song);\n  res.send(`Song ${req.body.name} added!`);\n});\n")),(0,s.kt)("p",null,"where ",(0,s.kt)("inlineCode",{parentName:"p"},"Song")," is the type:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="index.ts"',title:'"index.ts"'},"type Song = {\n  name: string;\n  rating: number;\n};\n")),(0,s.kt)("p",null,"Previously, we may have considered using query parameters for sending data for\nthe backend. There's nothing wrong with that; for example, we could have used\n",(0,s.kt)("inlineCode",{parentName:"p"},"/addSong?name=Despacito&rating=5"),". However, this can lead to extremely long\nURLs, and limit us from sending more complicated data. That's where ",(0,s.kt)("strong",{parentName:"p"},"request\nbodies")," come in handy. We can instead send request data in JSON format to the\nbackend, allowing us to use the data more easily and integrate it seamlessly\nwith our backend (which happens to be in TypeScript, so we can easily deal with\nit)."),(0,s.kt)("p",null,"The snippet above tells ",(0,s.kt)("inlineCode",{parentName:"p"},"express")," to listen for ",(0,s.kt)("inlineCode",{parentName:"p"},"POST")," requests at endpoint\n",(0,s.kt)("inlineCode",{parentName:"p"},"/addSong"),". ",(0,s.kt)("inlineCode",{parentName:"p"},"req.body")," is a JavaScript object, and we access its properties\n",(0,s.kt)("inlineCode",{parentName:"p"},"req.body.name")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"req.body.rating")," to add a new song to our array of songs."),(0,s.kt)("p",null,"Now, we should have a working ",(0,s.kt)("inlineCode",{parentName:"p"},"POST")," endpoint that does something with the\nrequest body."),(0,s.kt)("p",null,"However, we can't test request bodies quite as easily through the\nbrowser; we can check that this endpoint is working using Postman. Set the\nrequest type to ",(0,s.kt)("inlineCode",{parentName:"p"},"POST")," and URL as ",(0,s.kt)("inlineCode",{parentName:"p"},"localhost:8080/addSong"),". To send a request\nbody, first go to Headers and add a new key ",(0,s.kt)("inlineCode",{parentName:"p"},"Content-Type")," with value\n",(0,s.kt)("inlineCode",{parentName:"p"},"application/json"),". This says we are sending JSON input (essentially, an object\nor dictionary) in our request body. JSON is generally used in POST requests to\nsend a payload (and also for more nested structures). In the Body section,\nselect the raw radio button and enter the following in the text field:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "name": "Despacito",\n  "rating": 5\n}\n')),(0,s.kt)("p",null,"We will be sending ",(0,s.kt)("inlineCode",{parentName:"p"},"name")," with a value of ",(0,s.kt)("inlineCode",{parentName:"p"},'"Despacito"')," and ",(0,s.kt)("inlineCode",{parentName:"p"},"rating")," with a\nvalue of ",(0,s.kt)("inlineCode",{parentName:"p"},"5")," in the request body."),(0,s.kt)("p",null,"Sending this request, you should see the corresponding song printed out to the\nconsole by the endpoint."),(0,s.kt)("p",null,"Now, let's create another ",(0,s.kt)("inlineCode",{parentName:"p"},"POST")," endpoint to update a song's rating. This will\nalso use a request body with just a ",(0,s.kt)("inlineCode",{parentName:"p"},"name")," field, which should match the song we\nwant to update."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="index.ts"',title:'"index.ts"'},"app.post('/updateRating', (req, res) => {\n  for (const song of songs) {\n    if (song.name === req.body.name) {\n      song.rating = req.body.rating;\n    }\n  }\n  res.send('Rating updated!');\n  console.log(songs);\n});\n")),(0,s.kt)("h3",{id:"delete-request"},"DELETE Request"),(0,s.kt)("p",null,"When creating APIs, we use the ",(0,s.kt)("inlineCode",{parentName:"p"},"DELETE")," request method to quite simply delete a\nspecific resource. This should be pretty straightforward: we simply take the\nname of the song to delete through the request body, and create a new version of\nthe songs without the specified song. We then send text to the requester that it\nwas deleted."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="index.ts"',title:'"index.ts"'},"app.delete('/removeSong', (req, res) => {\n  const newSongs = [];\n  for (let song of songs) {\n    if (song.name !== req.body.name) {\n      newSongs.push(song);\n    }\n  }\n  songs = newSongs;\n  res.send(`Song ${req.body.name} deleted!`);\n});\n")),(0,s.kt)("p",null,"And with that, we're done!"),(0,s.kt)("h2",{id:"intro-to-databases-and-firebase"},"Intro to Databases and Firebase"),(0,s.kt)("p",null,'The song API we just made "works": we can add songs and then get them\nwhile running the Express server. But it has one fatal flaw: try stopping the\nserver and then running it again. You\'ll see that all the music is gone! We need\nsome kind of persistent storage for this data: through\u2014you guessed it\u2014a\ndatabase.'),(0,s.kt)("h3",{id:"why-do-we-need-a-database-for-our-backend"},"Why do we need a database for our backend?"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Data stored within Node.js is per instance"),(0,s.kt)("li",{parentName:"ul"},"Most applications require persistence"),(0,s.kt)("li",{parentName:"ul"},"Data analysis"),(0,s.kt)("li",{parentName:"ul"},"Performant data location"),(0,s.kt)("li",{parentName:"ul"},"Offloading unneeded data from memory")),(0,s.kt)("h3",{id:"mysql--relational-databases"},"MySQL + Relational Databases"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Stores data in tables, utilizing rows and tables."),(0,s.kt)("li",{parentName:"ul"},"Is relational (think a tuple)"),(0,s.kt)("li",{parentName:"ul"},"Has a schema")),(0,s.kt)("h3",{id:"nosql-and-firestore"},"NoSQL and Firestore"),(0,s.kt)("p",null,"We will focus on NoSQL"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Many NoSQL implementations are schema-less or have a partial schema"),(0,s.kt)("li",{parentName:"ul"},"Firestore is a cloud-hosted NoSQL database"),(0,s.kt)("li",{parentName:"ul"},"Very flexible and can be used with most popular languages"),(0,s.kt)("li",{parentName:"ul"},"Uses documents to store data"),(0,s.kt)("li",{parentName:"ul"},"Efficient querying for data")),(0,s.kt)("h3",{id:"sql-vs-nosql"},"SQL vs NoSQL"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"SQL databases have a predefined schema, whereas NoSQL databases can abide to\nany structure you want it to."),(0,s.kt)("li",{parentName:"ul"},"NoSQL databases are better suited for large sets of data, but not for complex\nqueries."),(0,s.kt)("li",{parentName:"ul"},"SQL databases tend to be less expensive for smaller datasets, but also less\nflexible."),(0,s.kt)("li",{parentName:"ul"},"SQL leans towards strong consistency whereas NoSQL favors eventual consistency\n(i.e. there may be some delay in getting the response back)"),(0,s.kt)("li",{parentName:"ul"},"SQL databases tend to be vertically scalable (need more computing power on one\nmachine to store more data) while NoSQL databases tend to be horizontally\nscalable (can distribute storage and compute power on multiple machines)"),(0,s.kt)("li",{parentName:"ul"},"Examples of SQL databases: MySQL, PostgreSQL"),(0,s.kt)("li",{parentName:"ul"},"Examples of NoSQL databases: Firebase, MongoDB")),(0,s.kt)("h3",{id:"what-is-firebase"},"What is Firebase?"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Firebase is a Backend as a Service (BaaS) offered by Google",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"Allows you to store data"),(0,s.kt)("li",{parentName:"ul"},"Host websites"),(0,s.kt)("li",{parentName:"ul"},"Authentication"))),(0,s.kt)("li",{parentName:"ul"},"NoSQL DB",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"Not only SQL"),(0,s.kt)("li",{parentName:"ul"},"Non relational")))),(0,s.kt)("h3",{id:"why-firebase"},"Why Firebase?"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Real-time operations"),(0,s.kt)("li",{parentName:"ul"},"Firebase Authentication"),(0,s.kt)("li",{parentName:"ul"},"Built-in analytics"),(0,s.kt)("li",{parentName:"ul"},"Also supports hosting/deployment"),(0,s.kt)("li",{parentName:"ul"},"Integration with other Google services"),(0,s.kt)("li",{parentName:"ul"},"Structure we\u2019re familiar with!")),(0,s.kt)("h2",{id:"basic-database-manipulations"},"Basic Database Manipulations"),(0,s.kt)("p",null,"People usually call that ",(0,s.kt)("inlineCode",{parentName:"p"},"CRUD"),", which stands for:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"C"),"reate/Insert - Create a document (will fail if the document exists)"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"R"),"ead/Find/Query - To search for documents based on their properties"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"U"),"pdate - Update an existing document (will fail otherwise)"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"D"),"elete - Delete an existing document")),(0,s.kt)("p",null,"For convenience, most NoSQL database also provides an ",(0,s.kt)("em",{parentName:"p"},"upsert")," operation. It\nwill create the document or update an existing document. You can think of that\nas an atomic operation that does:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"if (document.exists()) {\n  database.update(document);\n} else {\n  database.insert(document);\n}\n")),(0,s.kt)("p",null,"In Firestore, you can either insert a new document with a specified ID, or allow\nFirestore to generate its own ID for you."),(0,s.kt)("p",null,"The update method in Firestore allows you to update certain fields of the\ndocument without overwriting the entire thing."),(0,s.kt)("h2",{id:"sample-code"},"Sample code"),(0,s.kt)("p",null,"The following code demonstrates how we can do basic CRUD with Firestore. Note\nthat the code below does not care about what are the fields of a post, because\nFirestore doesn't require you to have a predefined set of fields. This gives you\nflexibility when writing your backend code."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="index.ts"',title:'"index.ts"'},"import admin from 'firebase-admin';\nimport express from 'express';\n\n// require the service account: note the file path\nconst serviceAccount = require('../service-account.json');\n// initialize the firebase app\nadmin.initializeApp({\n  credential: admin.credential.cert(serviceAccount),\n});\n\nconst db = admin.firestore();\nconst app = express();\nconst port = 8080;\n// allow request body parsing\napp.use(express.json());\n\n// check connections\napp.get('/', (_, res) => {\n  res.send('connected!');\n});\n\n// create a post type and post with id\ntype Post = {\n  content: string;\n  name: string;\n};\n\ntype PostWithID = Post & {\n  id: string;\n};\n\n// CRUD with firestore\nlet posts1: Post[] = [{ content: 'I miss wellness days', name: 'Becky' }];\n\n// posts collection from db\nconst postsCollection = db.collection('posts');\n\n// GET requests: get the songs\napp.get('/getPostsLocal', (_, res) => {\n  res.send(posts1);\n});\n\n// use firebase instead\napp.get('/getPostsFirebase', async (_, res) => {\n  const postsSnapshot = await postsCollection.get();\n  const allPostsDoc = postsSnapshot.docs;\n  const posts: PostWithID[] = [];\n  for (let doc of allPostsDoc) {\n    const post: PostWithID = doc.data() as PostWithID;\n    post.id = doc.id;\n    posts.push(post);\n  }\n  res.send(posts);\n});\n\n// read posts by name\napp.get('/getPosts/:name', async function (req, res) {\n  const name = req.params.name;\n  const postsSnapshot = await postsCollection.where('name', '==', name).get();\n  const allPostsDoc = postsSnapshot.docs;\n  const posts: PostWithID[] = [];\n  for (let doc of allPostsDoc) {\n    const post: PostWithID = doc.data() as PostWithID;\n    post.id = doc.id;\n    posts.push(post);\n  }\n  res.send(posts);\n});\n\n// read posts by id\napp.get('/getPostById/:id', async function (req, res) {\n  const id = req.params.id;\n  const postsSnapshot = await postsCollection.doc(id).get();\n  const post: PostWithID = postsSnapshot.data() as PostWithID;\n  res.send(post);\n});\n\n// sort posts in descending order by name\napp.get('/getPostsSorted', async function (req, res) {\n  const postsSnapshot = await postsCollection.orderBy('name', 'desc').get();\n  const allPostsDoc = postsSnapshot.docs;\n  const posts: PostWithID[] = [];\n  for (let doc of allPostsDoc) {\n    const post: PostWithID = doc.data() as PostWithID;\n    post.id = doc.id;\n    posts.push(post);\n  }\n  res.send(posts);\n});\n\n// POST method: create a new post\napp.post('/addPostLocal', (req, res) => {\n  const post: Post = req.body;\n  posts1.push(post);\n  res.send(`Post created by ${req.body.name}!`);\n});\n\n// generate a document with a random name to store the post's data\napp.post('/addPostFirebase', async function (req, res) {\n  const post: Post = req.body;\n  const postDoc = postsCollection.doc();\n  await postDoc.set(post);\n  res.send(postDoc.id);\n});\n\n// POST method: update an existing post\napp.post('/updatePostLocal', (req, res) => {\n  for (let post of posts1) {\n    if (post.name === req.body.name) {\n      post.content = req.body.content;\n    }\n  }\n  console.log(posts1);\n  res.send('content updated!');\n});\n\n// update by id\napp.post('/updatePostFirebase/:id', async function (req, res) {\n  const newPost: Post = req.body;\n  const id: string = req.params.id;\n  await postsCollection.doc(id).update(newPost);\n  res.send('updated!');\n});\n\n// DELETE methdod: delete a post\napp.delete('/removePostLocal', (req, res) => {\n  const newPosts = [];\n  for (let post of posts1) {\n    if (post.name !== req.body.name) {\n      newPosts.push(post);\n    }\n  }\n  posts1 = newPosts;\n  res.send(`Post by ${req.body.name} deleted!`);\n});\n\n// delete by id\napp.delete('/removePostFirebase/:id', async function (req, res) {\n  const id = req.params.id;\n  await postsCollection.doc(id).delete();\n  res.send('deleted!');\n});\n\napp.listen(port, () => console.log(`App started on port ${port}!`));\n")))}c.isMDXComponent=!0},3206:function(e,t,n){function a(){return a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},a.apply(this,arguments)}n.d(t,{Z:function(){return a}})},5421:function(e,t,n){function a(e,t){if(null==e)return{};var n,a,o={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}n.d(t,{Z:function(){return a}})}}]);