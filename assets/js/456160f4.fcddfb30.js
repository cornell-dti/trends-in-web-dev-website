"use strict";(self.webpackChunktrends_in_web_dev_website=self.webpackChunktrends_in_web_dev_website||[]).push([[5272],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return d}});var o=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,o,a=function(e,n){if(null==e)return{};var t,o,a={},i=Object.keys(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=o.createContext({}),c=function(e){var n=o.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},p=function(e){var n=c(e.components);return o.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},m=o.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=c(t),d=a,h=m["".concat(l,".").concat(d)]||m[d]||u[d]||i;return t?o.createElement(h,r(r({ref:n},p),{},{components:t})):o.createElement(h,r({ref:n},p))}));function d(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,r=new Array(i);r[0]=m;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,r[1]=s;for(var c=2;c<i;c++)r[c]=t[c];return o.createElement.apply(null,r)}return o.createElement.apply(null,t)}m.displayName="MDXCreateElement"},976:function(e,n,t){t.r(n),t.d(n,{contentTitle:function(){return l},default:function(){return m},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return p}});var o=t(7462),a=t(3366),i=(t(7294),t(3905)),r=["components"],s={id:"unit2",title:"Frontend / Unit 2"},l=void 0,c={unversionedId:"unit2",id:"version-2023fa/unit2",isDocsHomePage:!1,title:"Frontend / Unit 2",description:"Welcome to Unit 2!",source:"@site/versioned_docs/version-2023fa/unit2.md",sourceDirName:".",slug:"/unit2",permalink:"/docs/unit2",tags:[],version:"2023fa",frontMatter:{id:"unit2",title:"Frontend / Unit 2"},sidebar:"docs",previous:{title:"Frontend / Unit 1",permalink:"/docs/unit1"},next:{title:"Assignments",permalink:"/docs/assignments"}},p=[{value:"How React?",id:"how-react",children:[{value:"Components",id:"components",children:[],level:3},{value:"Hooks",id:"hooks",children:[],level:3}],level:2},{value:"Introducing Complexity into our React Apps",id:"introducing-complexity-into-our-react-apps",children:[],level:2},{value:"Component #1: ContactCard",id:"component-1-contactcard",children:[],level:2},{value:"What! What&#39;s going on??",id:"what-whats-going-on",children:[{value:"Functional Component",id:"functional-component",children:[{value:"Modules",id:"modules",children:[],level:4}],level:3}],level:2},{value:"Stateful Component",id:"stateful-component",children:[],level:2},{value:"Common use-case one: Rendering lists",id:"common-use-case-one-rendering-lists",children:[],level:2},{value:"Common use-case two: Conditional rendering",id:"common-use-case-two-conditional-rendering",children:[],level:2},{value:"Modifying State",id:"modifying-state",children:[{value:"Optimizing <code>useEffect</code>",id:"optimizing-useeffect",children:[],level:3},{value:"Aside: Lifecycle Cleanup",id:"aside-lifecycle-cleanup",children:[],level:3},{value:"What we have so far",id:"what-we-have-so-far",children:[{value:"Note the concepts of Composition and Inheritance we promised we&#39;d come back to last lecture!",id:"note-the-concepts-of-composition-and-inheritance-we-promised-wed-come-back-to-last-lecture",children:[],level:4}],level:3}],level:2},{value:"Composition vs. Inheritance",id:"composition-vs-inheritance",children:[{value:"Composition",id:"composition",children:[],level:3},{value:"Inheritance",id:"inheritance",children:[],level:3},{value:"<strong>React uses Composition</strong>",id:"react-uses-composition",children:[],level:3},{value:"Containment",id:"containment",children:[],level:3}],level:2},{value:"Now, let&#39;s add more functionality!",id:"now-lets-add-more-functionality",children:[{value:"useRef",id:"useref",children:[],level:3},{value:"useCallback",id:"usecallback",children:[],level:3},{value:"useMemo",id:"usememo",children:[],level:3},{value:"useContext",id:"usecontext",children:[],level:3},{value:"Using Hooks!",id:"using-hooks",children:[{value:"Naming",id:"naming",children:[],level:4},{value:"Top Level",id:"top-level",children:[],level:4}],level:3},{value:"Custom Hooks",id:"custom-hooks",children:[{value:"Syntax for Custom Hook",id:"syntax-for-custom-hook",children:[],level:4}],level:3}],level:2}],u={toc:p};function m(e){var n=e.components,t=(0,a.Z)(e,r);return(0,i.kt)("wrapper",(0,o.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Welcome to Unit 2!"),(0,i.kt)("p",null,"This unit will cover the basics of frontend development using React, a popular frontend framework."),(0,i.kt)("p",null,"Homework: HW3 and HW4, due 10/10 and 10/17 respectively."),(0,i.kt)("p",null,"Slides: ",(0,i.kt)("a",{parentName:"p",href:"https://docs.google.com/presentation/d/1JRflVjtGvkqgrGemb98fCALpkdYL7fpaVZy9ZF2hH3o/edit?usp=sharing"},"Here")),(0,i.kt)("h2",{id:"how-react"},"How React?"),(0,i.kt)("p",null,"Allows developers to create reusable UI components and manage the state of those components efficiently. React uses a virtual DOM (Document Object Model) to improve performance by minimizing the amount of DOM manipulation required when a user interacts with a React application. This allows for efficient updates and rendering of components, making it a popular choice for building complex and high-performing web and mobile applications."),(0,i.kt)("p",null,"In essence, it's built around a few core features:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Reusable components"),(0,i.kt)("li",{parentName:"ul"},"Reactivity (state management)")),(0,i.kt)("p",null,"Conceptually, everything in React is a ",(0,i.kt)("em",{parentName:"p"},"function"),". Your entire UI is therefore a function of your state. This is a very powerful concept."),(0,i.kt)("h3",{id:"components"},"Components"),(0,i.kt)("p",null,"Components are the building blocks of visual React. They are reusable pieces of code that can be used to build more complex components. These functional components form the visual basis of all React applications. They are defined as functions that return a React element. They are the simplest way to define a component."),(0,i.kt)("p",null,"Here, an example of a functional component (implemented as an arrow function):"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"const MyComponent = () => {\n  return <div>Hello World!</div>;\n};\n")),(0,i.kt)("p",null,"Then, elsewhere, you can reuse MyComponent, such as in a higher-order App.tsx component:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"const App = () => {\n  return (\n    <div>\n      <MyComponent />\n    </div>\n  );\n};\n")),(0,i.kt)("p",null,"The returned code is JSX, which is a JavaScript extension that allows you to write HTML-like code in JavaScript. It is compiled to JavaScript by Babel, and then inserted as HTML into the DOM."),(0,i.kt)("p",null,"Thus, we can ",(0,i.kt)("em",{parentName:"p"},"compose")," components together to build more complex components. This is the basis of React's component-based architecture, which is ",(0,i.kt)("em",{parentName:"p"},"compositional"),". This is a very powerful concept, and we'll cover it in more detail later in the next lecture, once you have a more firm grasp of basic React."),(0,i.kt)("h3",{id:"hooks"},"Hooks"),(0,i.kt)("p",null,"Hooks are the building blocks of logical React. They are reusable pieces of code that can be used to manage the state of your application, and are the most powerful feature of React. Changes to a hook variable will cause components and other hooks that depend on it to re-render or re-calculate their values, which is the basis of React's reactivity."),(0,i.kt)("p",null,"Like for components, you can create custom hooks to encapsulate logic and reuse it across your application. However, extremely frequently, you'll also use the built-in hooks provided by React."),(0,i.kt)("p",null,"The most important hook is useState, which simply provides a getter and setter for a variable. This is the basis of React's state management."),(0,i.kt)("p",null,"Here, an example of a component that uses useState:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"const MyComponent = () => {\n  const [count, setCount] = useState(0);\n\n  return (\n    <div>\n      <p>You clicked {count} times</p>\n      <button onClick={() => setCount(count + 1)}>Click me</button>\n    </div>\n  );\n};\n")),(0,i.kt)("p",null,"The other most important built-in hook is useEffect, which allows you to run code when a component is mounted or unmounted, or when a variable changes. This is the basis of React's lifecycle management."),(0,i.kt)("p",null,"Lifecycle management is when you want to run code when a component is mounted or unmounted, or when a variable changes, or on every render. It encapsulates logic that must in essence run at certain points during a component's lifecycle."),(0,i.kt)("p",null,"Here, an example of a component that uses useEffect:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"const MyComponent = () => {\n  const [count, setCount] = useState(0);\n\n  useEffect(() => {\n    console.log('The count changed!'); // this will fire every time count variable changes\n  }, [count]);\n\n  useEffect(() => {\n    console.log('The component mounted or the count changed!'); // this will fire every render (all the time)\n  });\n\n  useEffect(() => {\n    console.log('The component mounted!'); // this will fire once, when the component is mounted\n    return () => {\n      console.log('The component unmounted!'); // this will fire once, when the component is unmounted\n    };\n  }, []);\n\n  return (\n    <div>\n      <p>You clicked {count} times</p>\n      <button onClick={() => setCount(count + 1)}>Click me</button>\n    </div>\n  );\n};\n")),(0,i.kt)("p",null,"Combining components and hooks, you can build complex applications with React that respond to events, update their state accordingly, and then re-render the UI to reflect the new state!"),(0,i.kt)("p",null,"Today, let's build an extremely simple React app to get a feel for how React works. Next time, we'll use useState, useEffect, and components more extensively, along with other React features."),(0,i.kt)("h2",{id:"introducing-complexity-into-our-react-apps"},"Introducing Complexity into our React Apps"),(0,i.kt)("h2",{id:"component-1-contactcard"},"Component #1: ContactCard"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="ContactCard.tsx"',title:'"ContactCard.tsx"'},"type Props = { readonly name: string; readonly githubLink: string };\n\nconst ContactCard = ({ name, githubLink }: Props) => (\n  <div>\n    You can reach {name} at\n    <a href={githubLink}>{githubLink}</a>\n  </div>\n);\n")),(0,i.kt)("h2",{id:"what-whats-going-on"},"What! What's going on??"),(0,i.kt)("h3",{id:"functional-component"},"Functional Component"),(0,i.kt)("p",null,"Recall: the simplest component in React is a functional component. A functional component\ndoes not have any internal state. You can think of it as a function whose inputs\nare some JavaScript object and the output is some HTML code that is generated\nfrom the data."),(0,i.kt)("p",null,"In React, we call the JavaScript object ",(0,i.kt)("inlineCode",{parentName:"p"},"props"),", so you can see code like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="ContactCard.tsx"',title:'"ContactCard.tsx"'},"type Props = { readonly name: string; readonly githubLink: string };\n\nconst ContactCard = (props: Props) => (\n  <div>\n    You can reach {props.name} at\n    <a href={props.githubLink}>{props.githubLink}</a>\n  </div>\n);\n")),(0,i.kt)("p",null,"Just calling the input ",(0,i.kt)("inlineCode",{parentName:"p"},"props")," is not good for documentation purpose, so we\ncommonly use object destructuring to make it more explicit:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="ContactCard.tsx"',title:'"ContactCard.tsx"'},"type Props = { readonly name: string; readonly githubLink: string };\n\nconst ContactCard = ({ name, githubLink }: Props) => (\n  <div>\n    You can reach {name} at\n    <a href={githubLink}>{githubLink}</a>\n  </div>\n);\n")),(0,i.kt)("h4",{id:"modules"},"Modules"),(0,i.kt)("p",null,"In order for this component to be reused in another file, we need to export it:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="ContactCard.tsx"',title:'"ContactCard.tsx"'},"type Props = { readonly name: string; readonly githubLink: string };\n\nconst ContactCard = ({ name, githubLink }: Props) => (\n  <div>\n    You can reach {name} at\n    <a href={githubLink}>{githubLink}</a>\n  </div>\n);\n\nexport default ContactCard;\n")),(0,i.kt)("p",null,"This is because React is organized around the concept of ",(0,i.kt)("strong",{parentName:"p"},"modules"),". A module is\na collection of components that are related to each other. In our case, we have\na module called ",(0,i.kt)("inlineCode",{parentName:"p"},"ContactCard")," that contains a single component called\n",(0,i.kt)("inlineCode",{parentName:"p"},"ContactCard"),". In order to use this component in another file, we need to\nexport it (make it publicly available to other modules)."),(0,i.kt)("h2",{id:"stateful-component"},"Stateful Component"),(0,i.kt)("p",null,"Imagine you are writing a contacts app and you need to implement an editor."),(0,i.kt)("p",null,"Unlike the previous components, you need to maintain state. In React, you will\nneed ",(0,i.kt)("inlineCode",{parentName:"p"},"hooks"),". Hooks are functions that use state and lifecycle methods inside\nfunctional components. The ",(0,i.kt)("inlineCode",{parentName:"p"},"useState")," hook is the hook for maintaining state.\nNote that the general naming convention of a hook is ",(0,i.kt)("inlineCode",{parentName:"p"},"useXXXX"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},"import { useState, ChangeEvent } from 'react';\n\nconst NewContact = () => {\n  // name is the variable for the state, setName is the function you can use\n  // to change the state.\n  const [name, setName] = useState('');\n  const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\n    // To extract the value from input box, use the following line.\n    const n = event.currentTarget.value;\n    setName(n);\n  };\n  return (\n    <div>\n      <p>Name: {name}</p>\n      <input\n        type=\"text\"\n        placeholder=\"enter the name here\"\n        value={name}\n        onChange={handleChange}\n      />\n    </div>\n  );\n};\n\nexport default NewContact;\n")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"useState")," returns a length-2 array that includes the following elements (in order):"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"a state variable that is always synchronized (in a consistent state everywhere any time)"),(0,i.kt)("li",{parentName:"ol"},"a function that can be used to update the state variable.")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Note that the names of the two should always be in the form x, setX.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},"const [prosAndCons, setProsAndCons] = useState([]);\n")),(0,i.kt)("p",null,"Note that the ",(0,i.kt)("inlineCode",{parentName:"p"},"useState")," statement above uses ",(0,i.kt)("em",{parentName:"p"},"array destructuring")," syntax."),(0,i.kt)("h2",{id:"common-use-case-one-rendering-lists"},"Common use-case one: Rendering lists"),(0,i.kt)("p",null,"You may want to render a list of ",(0,i.kt)("inlineCode",{parentName:"p"},"YourAwesomeComponent"),". Here are some examples\nto show how you can achieve this in different ways."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},"// Suppose you have a ContactCard component defined there.\nimport ContactCard from './ContactCard';\n\ntype Contact = { name: string; githubLink: string };\n\nconst data: Contact[] = [\n  { name: 'Jason', githubLink: 'www.github.com/guessJason' },\n  { name: 'Peter', githubLink: 'www.github.com/peterIsCool' },\n  { name: 'Enoch', githubLink: 'www.github.com/eno' },\n];\n\nconst ListBySimpleMap = () => (\n  <div>\n    {data.map((contact: Contact) => (\n      <ContactCard\n        key={contact.name}\n        name={contact.name}\n        githubLink={contact.githubLink}\n      />\n    ))}\n  </div>\n);\n\nconst ListBySimpleMapWithObjectDestructing = () => (\n  <div>\n    {data.map(({ name, githubLink }) => (\n      <ContactCard key={name} name={name} githubLink={githubLink} />\n    ))}\n  </div>\n);\n\nconst ListBySimpleMapWithSpread = () => (\n  <div>\n    {data.map((contact: Contact) => (\n      <ContactCard key={contact.name} {...contact} />\n    ))}\n  </div>\n);\n")),(0,i.kt)("p",null,"Note that we always need a ",(0,i.kt)("inlineCode",{parentName:"p"},"key")," prop. Without this, React will give you\nwarnings in the console. React needs a unique ",(0,i.kt)("inlineCode",{parentName:"p"},"key")," for each item in the list to\nhelp it avoid rerendering everything when only one item in the list changes.\nIn this particular example, you should only use ",(0,i.kt)("inlineCode",{parentName:"p"},"name")," as the key if you know\nthat the property ",(0,i.kt)("inlineCode",{parentName:"p"},"name")," is unique. However, if there are multiple objects with\nthe same name in the list that are used as a key, it would confuse React."),(0,i.kt)("h2",{id:"common-use-case-two-conditional-rendering"},"Common use-case two: Conditional rendering"),(0,i.kt)("p",null,"Sometimes we only want things to render when a certain condition is met. For\nexample, only display text when we meet a certain condition. React has\nconditional rendering to make this very simple."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="PrelimTime.tsx"',title:'"PrelimTime.tsx"'},"import React from 'react';\n\nexport default ({ prelimToday }: { readonly prelimToday: boolean }) => {\n  if (prelimToday) {\n    return <p>I have a prelim today.</p>;\n  } else {\n    return <p>I don't have a prelim today.</p>;\n  }\n};\n")),(0,i.kt)("p",null,"In this example, we have a functional component ",(0,i.kt)("inlineCode",{parentName:"p"},"PrelimTime")," that takes in a\nprop ",(0,i.kt)("inlineCode",{parentName:"p"},"prelimToday"),". ",(0,i.kt)("inlineCode",{parentName:"p"},"prelimToday"),' is a boolean holding whether we have a prelim\ntoday or not. We want the component to display "I have a prelim today." if\n',(0,i.kt)("inlineCode",{parentName:"p"},"prelimToday")," is ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),' and "I don\'t have a prelim today." if it is ',(0,i.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,i.kt)("p",null,"Traditionally, we would use the ",(0,i.kt)("inlineCode",{parentName:"p"},"if")," statement for this behavior (as shown\nabove). We can also use conditional rendering to make writing this functionality\nmore convenient."),(0,i.kt)("p",null,"First we can use the ",(0,i.kt)("strong",{parentName:"p"},"ternary operator")," (remember this?):"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="PrelimTime.tsx"',title:'"PrelimTime.tsx"'},"import React from 'react';\n\nexport default ({ prelimToday }: { readonly prelimToday: boolean }) => (\n  prelimToday\n    ? <p>I have a prelim today.</p>\n    : <p>I don't have a prelim today.</p>;\n);\n")),(0,i.kt)("p",null,"The ternary operator is also very common in other languages as well such as\nJava or Python. The basic syntax is as follows:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"[boolean expression] ? [true_result] : [false_result]\n")),(0,i.kt)("p",null,"Before the ",(0,i.kt)("inlineCode",{parentName:"p"},"?")," you have your expression producing ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),". The part\nafter the ",(0,i.kt)("inlineCode",{parentName:"p"},"?")," but before the ",(0,i.kt)("inlineCode",{parentName:"p"},":")," is the result/functionality you want if the\nboolean expression evaluates to ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),". The part after the ",(0,i.kt)("inlineCode",{parentName:"p"},":")," is what you want\nto happen if the expression is ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,i.kt)("p",null,"Connecting with the ",(0,i.kt)("inlineCode",{parentName:"p"},"PrelimTime")," example, my boolean expression was just the\nprop ",(0,i.kt)("inlineCode",{parentName:"p"},"prelimToday"),", although in your code it can be a more complex boolean\nexpression. If ",(0,i.kt)("inlineCode",{parentName:"p"},"prelimToday"),' is true, I display "I have a prelim today." If\n',(0,i.kt)("inlineCode",{parentName:"p"},"prelimToday"),' is false, I display "I have a prelim today."'),(0,i.kt)("p",null,'Notice though, how the only thing changing in this text is adding the word\n"don\'t" if ',(0,i.kt)("inlineCode",{parentName:"p"},"prelimToday")," is ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),". So only if ",(0,i.kt)("inlineCode",{parentName:"p"},"prelimToday")," is ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),", we\nwant to add don't."),(0,i.kt)("p",null,"React supports the use of ",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"&&"))," operator (remember this?):"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="PrelimTime.tsx"',title:'"PrelimTime.tsx"'},"import React from 'react';\n\nexport default ({ prelimToday }: { readonly prelimToday: boolean }) => (\n  <p>I {!prelimToday && \"don't\"} have a prelim today.</p>\n);\n")),(0,i.kt)("p",null,'Here, we display the text "I have a prelim today.". However, in the curly\nbraces, if ',(0,i.kt)("inlineCode",{parentName:"p"},"prelimToday")," is ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),' then the word "don\'t" will be rendered.\nConditional rendering with ',(0,i.kt)("inlineCode",{parentName:"p"},"&&")," is useful when you only have expected behavior\nfor one branch of the conditional. In this case, I only had desired behavior if\n",(0,i.kt)("inlineCode",{parentName:"p"},"prelimToday")," was ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,i.kt)("p",null,"As you have seen, React's conditional rendering made modifying render behavior\nbased on conditions a lot easier. In this small example, we went from five lines\nof code in the component to just one!"),(0,i.kt)("h2",{id:"modifying-state"},"Modifying State"),(0,i.kt)("p",null,"We can use the ",(0,i.kt)("inlineCode",{parentName:"p"},"useEffect")," hook. Using ",(0,i.kt)("inlineCode",{parentName:"p"},"useEffect")," + ",(0,i.kt)("inlineCode",{parentName:"p"},"setStateVar")," (state variable setter) allows state variables to \u201chook into\u201d the React component and \u201cride along\u201d other changes that occur. \ud83e\udd20\ud83c\udfc7 Here is how!"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"useEffect(effect_function)")," => ",(0,i.kt)("inlineCode",{parentName:"p"},"useEffect(() => {})"),"\nWhenever the component updates/re-renders, useEffect runs the argument (a function)."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"useEffect(() => {setCount(count + 1)})"),"\nThe function can have any arbitrary logic/function calls\u2026 such as the ",(0,i.kt)("inlineCode",{parentName:"p"},"setCount")," state variable update function! But ",(0,i.kt)("inlineCode",{parentName:"p"},"setCount")," also triggers another component update so\u2026"),(0,i.kt)("h3",{id:"optimizing-useeffect"},"Optimizing ",(0,i.kt)("inlineCode",{parentName:"h3"},"useEffect")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"useEffect(function, filters)"),"\n",(0,i.kt)("inlineCode",{parentName:"p"},"useEffect")," triggers the function at every component update, but you can restrict this to occur only when the variables in the ",(0,i.kt)("inlineCode",{parentName:"p"},"filters")," array update. This makes your React component more optimized. You could say that these variables are a ",(0,i.kt)("em",{parentName:"p"},"dependency")," of the ",(0,i.kt)("inlineCode",{parentName:"p"},"useEffect")," statement. Example below:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},"useEffect(function, [prop1, observable])\n")),(0,i.kt)("p",null,"As a fun fact, it is possible to enter an infinite loop if the dependencies are state variables that are also set inside the effect. Don't do this!"),(0,i.kt)("h3",{id:"aside-lifecycle-cleanup"},"Aside: Lifecycle Cleanup"),(0,i.kt)("p",null,"A good use of useEffect is to hook into file streams, WebSockets, Firebase hooks, or some other Observable-like API in order to make your component ",(0,i.kt)("em",{parentName:"p"},"reactive")," to changes in data. (when the observed data/value/file stream updates, the React component should update.) In order to use an API for this purpose, it is often necessary to open up an initial connection or subscription. It is ",(0,i.kt)("em",{parentName:"p"},"good manners")," to ",(0,i.kt)("em",{parentName:"p"},"cleanup")," by closing or unsubscribing. In a ",(0,i.kt)("inlineCode",{parentName:"p"},"useEffect")," statement, the cleanup code is stored in a function that is returned by the effect (function)."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},"useEffect(() => {\n  return () => {\n    cleanup();\n  };\n});\n")),(0,i.kt)("p",null,"Example usage below:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},"useEffect(() => {\n  return () => {\n    ObservableAPI.unsubscribe()\n  });\n}, [valueFromObservableApi]);\n\nuseEffect(() => {\n  return () => {\n    dataStream.close()\n  });\n}, [dataStreamContents]);\n")),(0,i.kt)("h3",{id:"what-we-have-so-far"},"What we have so far"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},"import { useState, useEffect } from 'react';\n\ntype Props = { readonly name: string; readonly githubLink: string };\n\nconst ContactCard = ({ name, githubLink }: Props) => (\n  <div>\n    You can reach {name} at\n    <a href={githubLink}>{githubLink}</a>\n  </div>\n);\n\n// -----\n\nconst NewContact = () => {\n  // name is the variable for the state, setName is the function you can use\n  // to change the state.\n  const [name, setName] = useState('');\n  const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\n    // To extract the value from input box, use the following line.\n    const n = event.currentTarget.value;\n    setName(n);\n  };\n  return (\n    <div>\n      <p>Name: {name}</p>\n      <input\n        type=\"text\"\n        placeholder=\"enter the name here\"\n        value={name}\n        onChange={handleChange}\n      />\n    </div>\n  );\n};\n\n// -----\n\ntype Contact = { name: string; githubLink: string };\n\nconst data: Contact[] = [\n  { name: 'Jason', githubLink: 'www.github.com/guessJason' },\n  { name: 'Peter', githubLink: 'www.github.com/peterIsCool' },\n  { name: 'Enoch', githubLink: 'www.github.com/eno' },\n];\n\nconst ContactList = () => (\n  <div>\n    {data.map((contact: Contact) => (\n      <ContactCard\n        key={contact.name}\n        name={contact.name}\n        githubLink={contact.githubLink}\n      />\n    ))}\n  </div>\n);\n\n// -----\n\nconst App = () => {\n  const [showNewContactDialog, setShowNewContactDialog] = useState(false);\n  return (\n    <div>\n      <button onClick={() => setShowNewContactDialog(!showNewContactDialog)}>\n        {showNewContactDialog ? 'Hide' : 'Show'}\n      </button>\n      {showNewContactDialog && <NewContact />}\n      <ContactList />\n    </div>\n  );\n};\n")),(0,i.kt)("h4",{id:"note-the-concepts-of-composition-and-inheritance-we-promised-wed-come-back-to-last-lecture"},"Note the concepts of Composition and Inheritance we promised we'd come back to last lecture!"),(0,i.kt)("h2",{id:"composition-vs-inheritance"},"Composition vs. Inheritance"),(0,i.kt)("p",null,"Composition and inheritance are two programming techniques for defining how classes relate to objects. (Think of classes as the blueprint for a house and objects the actual houses created from that blueprint)"),(0,i.kt)("h3",{id:"composition"},"Composition"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Composition"),' defines a class as the sum of its individual parts. This is a "has-a" relationship (e.g. a car has a steering wheel, has a window, etc). In Java (and other object oriented languages), these components are represented as ',(0,i.kt)("em",{parentName:"p"},"instance")," variables."),(0,i.kt)("h3",{id:"inheritance"},"Inheritance"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Inheritance"),' derives one class from another. If class A is the parent of class B and C, B and C inherit the properties/functions of A. This is a "is-a" relationship (e.g. car is a vehicle, circle is a shape.)'),(0,i.kt)("h3",{id:"react-uses-composition"},(0,i.kt)("strong",{parentName:"h3"},"React uses Composition")),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"\u201cReact has a powerful composition model, and we recommend using composition instead of inheritance to reuse code between components.\u201d"),"\n-- ",(0,i.kt)("a",{parentName:"p",href:"https://reactjs.org/docs/2021fa/composition-vs-inheritance.html"},"React Docs")),(0,i.kt)("h3",{id:"containment"},"Containment"),(0,i.kt)("p",null,"Components may not know their children ahead of time."),(0,i.kt)("p",null,"Children are the components you put within another component:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"<ComponentA>{/* anything here is a child of Component A */}</ComponentA>\n")),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"children")," prop to pass in children components."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="Container.tsx"',title:'"Container.tsx"'},"import React, { ReactNode } from 'react';\ntype Props = { readonly children: ReactNode };\nconst Container = (props: Props) => (\n  <div className=\"Border\">{props.children}</div>\n);\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},'const App = () => (\n  <div className="App">\n    <Container>\n      <p>Hello!</p>\n      <p>Bye!</p>\n    </Container>\n  </div>\n);\n')),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"props.children")," will have the paragraph elements."),(0,i.kt)("p",null,"We didn't actually get to this live demo, adapted from ",(0,i.kt)("a",{parentName:"p",href:"https://reactjs.org/docs/2021fa/composition-vs-inheritance.html"},"this tutorial")," in the React docs, during lecture but it is very simple if you want to try it out yourself. We also show how to import styles."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="Container.tsx"',title:'"Container.tsx"'},"import React, { ReactNode } from 'react';\nimport './Container.css'; // this is how we import styles\n\ntype Props = { readonly children: ReactNode };\n\nexport default (props: Props) => <div className=\"Border\">{props.children}</div>;\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-css",metastring:'title="Container.css"',title:'"Container.css"'},".Border {\n  border: 4px solid black;\n  background-color: azure;\n}\n")),(0,i.kt)("p",null,'Less common but you also may want multiple "holes" in your component (for example, a left and right child):'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="SplintPane.tsx"',title:'"SplintPane.tsx"'},"import React, { ReactNode } from 'react';\nimport './SplitPane.css';\n\ntype Props = { readonly left: ReactNode; readonly right: ReactNode };\n\nexport default (props: Props) => (\n  <div>\n    <div className=\"LeftPane\">{props.left}</div>\n    <div className=\"RightPane\">{props.right}</div>\n  </div>\n);\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-css",metastring:'title="SplitPane.css"',title:'"SplitPane.css"'},"/* these colors are ugly I know */\n.LeftPane {\n  float: left;\n  width: 50%;\n  background-color: red;\n}\n\n.RightPane {\n  float: right;\n  width: 50%;\n  background-color: aquamarine;\n}\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},"import React from 'react';\nimport SplitPane from './SplitPane';\nimport Container from './Container';\n\nexport default () => {\n  return (\n    <div className=\"App\">\n      <Container>\n        <p>Hello, world!</p>\n      </Container>\n      <SplitPane\n        left={<div>I'm on the left!</div>}\n        right={<div>I'm on the right!</div>}\n      />\n    </div>\n  );\n};\n")),(0,i.kt)("h2",{id:"now-lets-add-more-functionality"},"Now, let's add more functionality!"),(0,i.kt)("p",null,"There's a few hooks we haven't yet covered, which add additional functionality to React."),(0,i.kt)("h3",{id:"useref"},"useRef"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"useRef"),' allows you to create a "ref" to an element or a variable in your component. This can be useful for accessing the DOM or for keeping track of a value that should persist across renders.'),(0,i.kt)("p",null,"Here's an example of using ",(0,i.kt)("inlineCode",{parentName:"p"},"useRef")," to create a ref to an input element:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"import { useRef } from 'react';\n\nfunction InputExample() {\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const handleClick = () => {\n    inputRef.current!.focus();\n  };\n\n  return (\n    <div>\n      <input ref={inputRef} />\n      <button onClick={handleClick}>Focus Input</button>\n    </div>\n  );\n}\n")),(0,i.kt)("p",null,"In this example, we're creating a ref to an ",(0,i.kt)("inlineCode",{parentName:"p"},"<input>")," element using useRef. We pass null as the initial value, which is the default. Then we're passing the ref to the ",(0,i.kt)("inlineCode",{parentName:"p"},"<input>")," element using the ref attribute. We can access the input element using inputRef.current and call focus() on it."),(0,i.kt)("h3",{id:"usecallback"},"useCallback"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"useCallback")," allows you to memoize a callback function, so that it will only be recreated if one of its dependencies has changed. This can be useful for preventing unnecessary re-renders in child components."),(0,i.kt)("p",null,"Here's an example of using ",(0,i.kt)("inlineCode",{parentName:"p"},"useCallback")," to memoize a callback function:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"import { useCallback } from 'react';\n\nfunction Parent({ data }) {\n  const handleClick = useCallback(\n    (index) => {\n      console.log(data[index]);\n    },\n    [data]\n  );\n\n  return <Child onClick={handleClick} />;\n}\n\nfunction Child({ onClick }) {\n  const items = [1, 2, 3];\n\n  return (\n    <div>\n      {items.map((item, index) => (\n        <button key={item} onClick={() => onClick(index)}>\n          {item}\n        </button>\n      ))}\n    </div>\n  );\n}\n")),(0,i.kt)("p",null,"In this example, we're using ",(0,i.kt)("inlineCode",{parentName:"p"},"useCallback")," to create a memoized version of the ",(0,i.kt)("inlineCode",{parentName:"p"},"handleClick")," function, which takes an ",(0,i.kt)("inlineCode",{parentName:"p"},"index")," argument and logs the corresponding data from the ",(0,i.kt)("inlineCode",{parentName:"p"},"data")," prop. The second argument to ",(0,i.kt)("inlineCode",{parentName:"p"},"useCallback")," is an array of dependencies, in this case, just ",(0,i.kt)("inlineCode",{parentName:"p"},"data"),". We're passing the memoized ",(0,i.kt)("inlineCode",{parentName:"p"},"handleClick")," function as a prop to the ",(0,i.kt)("inlineCode",{parentName:"p"},"Child")," component. When the buttons in the ",(0,i.kt)("inlineCode",{parentName:"p"},"Child")," component are clicked, the memoized ",(0,i.kt)("inlineCode",{parentName:"p"},"handleClick")," function is called with the corresponding index, and it logs the corresponding data from the ",(0,i.kt)("inlineCode",{parentName:"p"},"data")," prop, without re-creating the function and re-rendering the child component."),(0,i.kt)("h3",{id:"usememo"},"useMemo"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"useMemo")," is a useful hook that can help you improve the performance of your\ncomponent by reducing the amount of unnecessary calculations."),(0,i.kt)("p",null,"Syntax: ",(0,i.kt)("inlineCode",{parentName:"p"},"const result = useMemo(func, deps)")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"func"),' is an "expensive" calculation that we want to memoize'),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"deps")," is the list of dependencies (just like in ",(0,i.kt)("inlineCode",{parentName:"p"},"useEffect"),")"),(0,i.kt)("p",null,"In essence, the hook will call ",(0,i.kt)("inlineCode",{parentName:"p"},"func")," initially and put whatever it returns into\n",(0,i.kt)("inlineCode",{parentName:"p"},"result"),". Then ONLY when something in ",(0,i.kt)("inlineCode",{parentName:"p"},"deps")," changes does ",(0,i.kt)("inlineCode",{parentName:"p"},"func")," gets called\nagain - otherwise ",(0,i.kt)("inlineCode",{parentName:"p"},"result")," will be the ",(0,i.kt)("strong",{parentName:"p"},"memoized")," return value. Whenever such\na refresh occurs, the new return value of ",(0,i.kt)("inlineCode",{parentName:"p"},"func")," will overwrite the old memo."),(0,i.kt)("p",null,"Here is an example of where you might want to ",(0,i.kt)("inlineCode",{parentName:"p"},"useMemo"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"const expensiveFunction = (n: number) => {\n  /** do something that takes a lot of cpu */\n};\n\nconst RandomComponent = () => {\n  const [foo, setFoo] = useState(0);\n  const [bar, setBar] = useState(0);\n\n  // This runs expensiveFunction when foo changes but bar doesn't\n  const baz = expensiveFunction(bar);\n\n  // This runs expensiveFunction ONLY when bar changes\n  const baz = useMemo(() => expensiveFunction(bar), [bar]);\n};\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"IMPORTANT PITFALL"),": You may be tempted to put ",(0,i.kt)("inlineCode",{parentName:"p"},"useMemo")," everywhere; however,\nthis is not a good idea. Every hook has some performance overhead, so adding\n",(0,i.kt)("inlineCode",{parentName:"p"},"useMemo")," in places where you don't need it can actually ",(0,i.kt)("strong",{parentName:"p"},"worsen")," performance!"),(0,i.kt)("p",null,"You can ",(0,i.kt)("em",{parentName:"p"},"profile")," your code with and without the ",(0,i.kt)("inlineCode",{parentName:"p"},"useMemo")," call to judge whether\nit's a good idea. You can profile the performance of your website using the\nDeveloper Tools found in most browsers."),(0,i.kt)("h3",{id:"usecontext"},"useContext"),(0,i.kt)("p",null,"We've covered passing down props in previous React lectures. However, that's\npretty annoying if ",(0,i.kt)("em",{parentName:"p"},"every")," component within a hierarchy needs that prop."),(0,i.kt)("p",null,"Is there a better way then manually passing down that prop to every component\nthat needs it?"),(0,i.kt)("p",null,"Yes!"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"useContext")," hook allows you to wrap an entire component ",(0,i.kt)("strong",{parentName:"p"},"tree"),' with a\n"context" that every component in that tree can access!'),(0,i.kt)("p",null,"A great use case for this hook is for theme data - each component needs to know\nwhich theme is selected in order to display the correct colors, for example."),(0,i.kt)("p",null,"Here is the example pulled from the ",(0,i.kt)("a",{parentName:"p",href:"https://reactjs.org/docs/hooks-reference.html#usecontext"},"official React docs")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const themes = {\n  light: {\n    foreground: '#000000',\n    background: '#eeeeee',\n  },\n  dark: {\n    foreground: '#ffffff',\n    background: '#222222',\n  },\n};\n\nconst ThemeContext = React.createContext(themes.light);\n\nconst App = () => {\n  return (\n    <ThemeContext.Provider value={themes.dark}>\n      <Toolbar />\n    </ThemeContext.Provider>\n  );\n};\n\nconst Toolbar = () => {\n  return (\n    <div>\n      <ThemedButton />\n    </div>\n  );\n};\n\nconst ThemedButton = () => {\n  const theme = useContext(ThemeContext);\n  return (\n    <button style={{ background: theme.background, color: theme.foreground }}>\n      I am styled by theme context!\n    </button>\n  );\n};\n")),(0,i.kt)("h3",{id:"using-hooks"},"Using Hooks!"),(0,i.kt)("h4",{id:"naming"},"Naming"),(0,i.kt)("p",null,"Hooks have the following naming scheme: ",(0,i.kt)("inlineCode",{parentName:"p"},"useXXXX")," (camelCase). It is\n",(0,i.kt)("strong",{parentName:"p"},"imperative")," that you name your hooks using this scheme - the function name is\nthe only way to identify the function as a hook to other developers as well as\nyour IDE."),(0,i.kt)("p",null,"It is also a good idea to avoid prefixing regular variable names with ",(0,i.kt)("inlineCode",{parentName:"p"},"use"),", to\navoid confusion."),(0,i.kt)("h4",{id:"top-level"},"Top Level"),(0,i.kt)("p",null,"Hooks (both built-in and custom hooks) can only be called within React\ncomponents or other React hooks. More specifically, they should only be called\nin the ",(0,i.kt)("strong",{parentName:"p"},"top level")," of such functions."),(0,i.kt)("p",null,"The reason for this is that you want hooks to be called in the same order, the\nsame amount of times each time the function runs. This restriction is necessary\nfor React to optimize the performance of hooks."),(0,i.kt)("p",null,"This means that you should not call hooks in:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"conditionals"),(0,i.kt)("li",{parentName:"ul"},"loops"),(0,i.kt)("li",{parentName:"ul"},"nested functions")),(0,i.kt)("p",null,"Here are some examples of what ",(0,i.kt)("strong",{parentName:"p"},"not")," to do (and would trigger linter errors):"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"const RandomComponent = () => {\n  const [foo, setFoo] = useState(0); // this is fine\n  if (foo < 100) {\n    const [bar, setBar] = useState(0); // this is NOT fine\n  }\n};\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"const RandomComponent = () => {\n  const [foo, setFoo] = useState(0); // this is fine\n  for (let i = 0; i < foo; i++) {\n    const [bar, setBar] = useState(0); // this is NOT fine\n  }\n};\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"const RandomComponent = () => {\n  const doHookStuff = () => {\n    const [bar, setBar] = useState(0); // this is NOT fine\n  };\n  doHookStuff();\n};\n")),(0,i.kt)("p",null,"It's a good practice to call all your hooks line-by-line at the top of your\nfunction."),(0,i.kt)("h3",{id:"custom-hooks"},"Custom Hooks"),(0,i.kt)("p",null,"There are many hooks that React gives us out of the box, but we can put them\ntogether to make our own hooks!"),(0,i.kt)("p",null,"This is useful to abstract out common functionality, the same way programmers do\nwith regular functions."),(0,i.kt)("p",null,"If you ever notice that you are doing repetitive tasks with hooks across\nmultiple React components, it might be a good idea to put all that logic into\nyour own hook."),(0,i.kt)("h4",{id:"syntax-for-custom-hook"},"Syntax for Custom Hook"),(0,i.kt)("p",null,"Just write a function using hooks! Make sure your function is named according to\nthe ",(0,i.kt)("inlineCode",{parentName:"p"},"useXXXX")," scheme."),(0,i.kt)("p",null,"There is no function signature that you must follow in order for it to be hook -\nit can have whatever arguments and return type that you choose."),(0,i.kt)("p",null,"Learn more about custom hooks ",(0,i.kt)("a",{parentName:"p",href:"https://reactjs.org/docs/hooks-custom.html"},"here")))}m.isMDXComponent=!0}}]);