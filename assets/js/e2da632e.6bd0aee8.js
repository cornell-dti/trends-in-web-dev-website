"use strict";(self.webpackChunktrends_in_web_dev_website=self.webpackChunktrends_in_web_dev_website||[]).push([[3839],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),d=s(n),m=r,y=d["".concat(p,".").concat(m)]||d[m]||c[m]||i;return n?a.createElement(y,l(l({ref:t},u),{},{components:n})):a.createElement(y,l({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=d;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var s=2;s<i;s++)l[s]=n[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5487:function(e,t,n){n.r(t),n.d(t,{contentTitle:function(){return p},default:function(){return d},frontMatter:function(){return o},metadata:function(){return s},toc:function(){return u}});var a=n(7462),r=n(3366),i=(n(7294),n(3905)),l=["components"],o={id:"lecture9",title:"Lecture 9"},p=void 0,s={unversionedId:"lecture9",id:"version-2020sp/lecture9",isDocsHomePage:!1,title:"Lecture 9",description:"Final Project due May 6 7:59pm",source:"@site/versioned_docs/version-2020sp/lecture9.md",sourceDirName:".",slug:"/lecture9",permalink:"/docs/2020sp/lecture9",tags:[],version:"2020sp",frontMatter:{id:"lecture9",title:"Lecture 9"},sidebar:"version-2020sp/docs",previous:{title:"Lecture 8",permalink:"/docs/2020sp/lecture8"},next:{title:"Lecture 10",permalink:"/docs/2020sp/lecture10"}},u=[{value:"Deployment",id:"deployment",children:[{value:"Frontend Deployment",id:"frontend-deployment",children:[],level:3},{value:"Backend Deployment",id:"backend-deployment",children:[],level:3}],level:2},{value:"Authentication",id:"authentication",children:[],level:2},{value:"TypeScript",id:"typescript",children:[{value:"JavaScript Types",id:"javascript-types",children:[],level:3},{value:"How are types used?",id:"how-are-types-used",children:[],level:3},{value:"Why TypeScript?",id:"why-typescript",children:[],level:3},{value:"TypeScript Types",id:"typescript-types",children:[{value:"Basic Types",id:"basic-types",children:[],level:4},{value:"Any",id:"any",children:[],level:4},{value:"Functions",id:"functions",children:[],level:4},{value:"Literal Types",id:"literal-types",children:[{value:"String Literal Types",id:"string-literal-types",children:[],level:5},{value:"Numeric Literal Types",id:"numeric-literal-types",children:[],level:5}],level:4},{value:"Union Types",id:"union-types",children:[],level:4},{value:"Intersection Types",id:"intersection-types",children:[],level:4}],level:3},{value:"Type Inference",id:"type-inference",children:[],level:3},{value:"Add TypeScript to React!",id:"add-typescript-to-react",children:[],level:3}],level:2}],c={toc:u};function d(e){var t=e.components,n=(0,r.Z)(e,l);return(0,i.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Final Project due ",(0,i.kt)("strong",{parentName:"p"},"May 6 7:59pm")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://drive.google.com/file/d/1roLl69hhtFiPuw2Sq5har-9IeU_hwGSF/view?usp=sharing"},"Lecture Video")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://docs.google.com/presentation/d/1BBYlbYxKl2qpOOosClVwt-xVr-r7knLTzxY41x7Z6_c/edit?usp=sharing"},"Lecture Slides")),(0,i.kt)("h2",{id:"deployment"},"Deployment"),(0,i.kt)("p",null,"To deploy your web application means to put it on a Web server so others can access it via the internet. We will deploy frontend on Firebase and backend on Heroku."),(0,i.kt)("h3",{id:"frontend-deployment"},"Frontend Deployment"),(0,i.kt)("p",null,"To deploy to Firebase enter the following commands into terminal:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"yarn global add firebase-tools\nyarn build\nfirebase login\nfirebase init\n<answer the questions>\nfirebase deploy\n")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"yarn build")," will create a ",(0,i.kt)("inlineCode",{parentName:"p"},"build")," directory containing a production build of your application."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"firebase login")," will prompt you to log in by opening up a web browser if you're not already signed it."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"firebase init")," will ask you the following questions:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Which Firebase CLI features do you want to set up for this folder? Select ",(0,i.kt)("strong",{parentName:"li"},"Hosting"),"."),(0,i.kt)("li",{parentName:"ol"},"Associate with a Firebase project. ",(0,i.kt)("strong",{parentName:"li"},"Select your Firebase project")),(0,i.kt)("li",{parentName:"ol"},"What do you want as your public directory? ",(0,i.kt)("strong",{parentName:"li"},"build")),(0,i.kt)("li",{parentName:"ol"},"Configure as a single-page app (rewrite all urls to /index.html)? ",(0,i.kt)("strong",{parentName:"li"},"Yes")),(0,i.kt)("li",{parentName:"ol"},"Overwrite ",(0,i.kt)("inlineCode",{parentName:"li"},"index.html"),"? ",(0,i.kt)("strong",{parentName:"li"},"No"))),(0,i.kt)("p",null,"Running ",(0,i.kt)("inlineCode",{parentName:"p"},"firebase deploy")," will push your build assets to Firebase remote server and give you a URL to your live Firebase app site! Now you can share this site and access it over the internet."),(0,i.kt)("h3",{id:"backend-deployment"},"Backend Deployment"),(0,i.kt)("p",null,"We will deploy backend on Heroku because deploying on Firebase is much more involved"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'yarn global add heroku\ngit init\ngit add .\ngit commit -m "COMMIT MESSAGE"\nheroku login\nheroku create <optional project name>\ngit push heroku master\n(optional) heroku open\n')),(0,i.kt)("p",null,"You can then use the url generated as your backend endpoint in your frontend code."),(0,i.kt)("h2",{id:"authentication"},"Authentication"),(0,i.kt)("p",null,"One of the best parts about Firebase is you can use Sign in with Google/Facebook/GitHub/etc! This way you don't have to deal with usernames and passwords yourself!"),(0,i.kt)("p",null,"We did a Live Coding Demo here based on the Songs example from last week. I will include the files changed here."),(0,i.kt)("p",null,"To handle authentication we made a wrapper component ",(0,i.kt)("inlineCode",{parentName:"p"},"Authenticated")," to handle all Authentication:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="Authenticated.jsx"',title:'"Authenticated.jsx"'},"import React, { useState } from 'react';\nimport 'firebase/auth';\nimport * as firebase from 'firebase/app';\nimport FirebaseAuth from 'react-firebaseui/FirebaseAuth';\nimport { useEffect } from 'react';\n\nconst firebaseConfig = {}; // put firebase config in here\n\nfirebase.initializeApp(firebaseConfig);\n\nexport default (props) => {\n  const [user, setUser] = useState(null);\n\n  const uiConfig = {\n    signInFlow: 'popup',\n    signInOptions: [firebase.auth.GoogleAuthProvider.PROVIDER_ID],\n  };\n\n  function onAuthStateChange() {\n    return firebase.auth().onAuthStateChanged((user) => {\n      setUser(user);\n    });\n  }\n\n  useEffect(() => onAuthStateChange(), []);\n\n  return (\n    <div>\n      {user && props.children}\n      {!user && (\n        <FirebaseAuth uiConfig={uiConfig} firebaseAuth={firebase.auth()} />\n      )}\n    </div>\n  );\n};\n")),(0,i.kt)("p",null,"We then wrap our whole ",(0,i.kt)("inlineCode",{parentName:"p"},"SongList")," app in ",(0,i.kt)("inlineCode",{parentName:"p"},"Authenticated"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="App.js"',title:'"App.js"'},"import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport SongList from './SongList';\nimport Authenticated from './Authenticated';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Authenticated>\n        <SongList />\n      </Authenticated>\n    </div>\n  );\n}\n\nexport default App;\n")),(0,i.kt)("p",null,"If the user is logged in, ",(0,i.kt)("inlineCode",{parentName:"p"},"SongList")," will show. Otherwise they will be asked to log in."),(0,i.kt)("p",null,"We then deployed this app on Firebase for the frontend and Heroku for the backend. Refer to the commands above."),(0,i.kt)("h2",{id:"typescript"},"TypeScript"),(0,i.kt)("p",null,"TypeScript is a typed ",(0,i.kt)("em",{parentName:"p"},"superset")," of JavaScript that compiles to plain JavaScript. Superset means TypeScript has everything in JavaScript and more. (Built by Microsoft!)"),(0,i.kt)("h3",{id:"javascript-types"},"JavaScript Types"),(0,i.kt)("p",null,"JavaScript has 6 primitive types:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Boolean"),(0,i.kt)("li",{parentName:"ul"},"String"),(0,i.kt)("li",{parentName:"ul"},"Number"),(0,i.kt)("li",{parentName:"ul"},"Symbol"),(0,i.kt)("li",{parentName:"ul"},"undefined"),(0,i.kt)("li",{parentName:"ul"},"BigInt")),(0,i.kt)("p",null,"All JavaScript values are those 6 primitive types or a:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"object"),(0,i.kt)("li",{parentName:"ul"},"function (JavaScript is functional!)"),(0,i.kt)("li",{parentName:"ul"},"null")),(0,i.kt)("h3",{id:"how-are-types-used"},"How are types used?"),(0,i.kt)("p",null,"In JavaScript we had:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"let str = 'Hello, trends';\nlet num = 42;\nlet truth = true;\n\nconst someFunc = (x, s, b) => {\n  // do some operations...\n  return x;\n};\n")),(0,i.kt)("p",null,"Notice we don't have any types here! JavaScript is weakly typed."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"let str: string = 'Hello, trends';\nlet num: number = 42;\nlet truth: boolean = false;\nconst someFunc = (x: number, s: string, b: boolean): number => {\n  // do some operations...\n  return x;\n};\n")),(0,i.kt)("p",null,"TypeScript allows us to add type information!"),(0,i.kt)("h3",{id:"why-typescript"},"Why TypeScript?"),(0,i.kt)("p",null,"JavaScript code can be ambiguous. We had the function:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const someFunc = (x, s, b) => {\n  // do some operations...\n  return x;\n};\n")),(0,i.kt)("p",null,"What are ",(0,i.kt)("inlineCode",{parentName:"p"},"x, s, b"),"? What should I pass in for those? What should I expect returned?"),(0,i.kt)("p",null,"Adding the TypeScript types makes this code self-documenting:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"const someFunc = (x: number, s: string, b: boolean): number => {\n  // do some operations...\n  return x;\n};\n")),(0,i.kt)("p",null,"JavaScript variables can also change type which can be undesirable, unexpected, and error-prone."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"let str = 'Hello, trends';\nlet num = 42;\nlet truth = true;\nstr = 13;\n")),(0,i.kt)("p",null,"None of these variables have to be any specific type! I can have ",(0,i.kt)("inlineCode",{parentName:"p"},"str")," be a string and then a number."),(0,i.kt)("p",null,"In the end, we want to use TypeScript because it is:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Easier to read"),(0,i.kt)("li",{parentName:"ul"},"Easier and faster to implement"),(0,i.kt)("li",{parentName:"ul"},"Easier to refactor"),(0,i.kt)("li",{parentName:"ul"},"Less buggy")),(0,i.kt)("h3",{id:"typescript-types"},"TypeScript Types"),(0,i.kt)("p",null,"Basic Syntax:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"let <var_name>: <type> = <something>;\n")),(0,i.kt)("p",null,"We can also use ",(0,i.kt)("inlineCode",{parentName:"p"},"const")," but again no ",(0,i.kt)("inlineCode",{parentName:"p"},"var"),"."),(0,i.kt)("h4",{id:"basic-types"},"Basic Types"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"// Boolean\nlet isDone: boolean = false;\n// Number can be decimal, or in any base!\nlet decimal: number = 4.2;\nlet binary: number = 0b1010;\nlet hex: number = 0xf00d;\n// String\nlet lang: string = 'typescript';\nlet templateStr: string = `We love ${lang}`;\n// Boolean\nlet isDone: boolean = false;\n// Number can be decimal, or in any base!\nlet decimal: number = 4.2;\nlet binary: number = 0b1010;\nlet hex: number = 0xf00d;\n// String\nlet lang: string = 'typescript';\nlet templateStr: string = `We love ${lang}`;\n")),(0,i.kt)("h4",{id:"any"},"Any"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Any")," is a wildcard and it can be anything. ",(0,i.kt)("inlineCode",{parentName:"p"},"any")," places no restrictions on type."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"// Any: can be anything!\nlet notSure: any = 4;\nnotSure = 'maybe a string instead';\nnotSure = false; // okay, definitely a boolean\n")),(0,i.kt)("p",null,"If you were to use ",(0,i.kt)("inlineCode",{parentName:"p"},"any")," everywhere though you might as well just use JavaScript"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"let anyList: any[] = [4, 'maybe a string', false];\n")),(0,i.kt)("p",null,"But it can be useful in specifying collections of items of different types!"),(0,i.kt)("h4",{id:"functions"},"Functions"),(0,i.kt)("p",null,"Functions can have types too!"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"// un-typed\nconst myFunc = (x, y) => x + y;\n// typed\nconst myFunc = (x: number, y: number): number => x + y;\n")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"myFunc")," has type ",(0,i.kt)("inlineCode",{parentName:"p"},"(x: number, y: number): number"),"."),(0,i.kt)("p",null,"TypeScript can do some limited type inference so if you leave out the return type ",(0,i.kt)("inlineCode",{parentName:"p"},"number"),", TypeScript can infer it since we are just adding two numbers which can only produce a number. If TypeScript can't infer the type, it defaults as ",(0,i.kt)("inlineCode",{parentName:"p"},"any"),"."),(0,i.kt)("p",null,"We can also have optional parameters:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"const introduce = (name: string, github?: string): string => {\n  return github\n    ? `Hi, I'm ${name}. Checkout my GitHub @${github}`\n    : `Hi, I'm ${name}. I don't have a GitHub.`;\n};\n")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"github?")," designates ",(0,i.kt)("inlineCode",{parentName:"p"},"github")," as an optional parameter that defaults to ",(0,i.kt)("inlineCode",{parentName:"p"},"undefined"),"."),(0,i.kt)("h4",{id:"literal-types"},"Literal Types"),(0,i.kt)("p",null,"Literal Types are types that can be a literal set of possibilities that you specify. TypeScript allows number and string literal types:"),(0,i.kt)("h5",{id:"string-literal-types"},"String Literal Types"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"// String literal type\ntype TrafficLightColors = 'red' | 'green' | 'yellow';\n")),(0,i.kt)("p",null,"Any variable with ",(0,i.kt)("inlineCode",{parentName:"p"},"TrafficLightColors")," type can only take on values ",(0,i.kt)("inlineCode",{parentName:"p"},'"red", "green", "yellow"'),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"let light1: TrafficLightColors = 'red';\nlight1 = 'blue'; // TypeError\n")),(0,i.kt)("h5",{id:"numeric-literal-types"},"Numeric Literal Types"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"// Numeric literal type\ntype DiceRoll = 1 | 2 | 3 | 4 | 5 | 6;\nconst rollDice = (): DiceRoll => {\n  // ...\n};\n")),(0,i.kt)("h4",{id:"union-types"},"Union Types"),(0,i.kt)("p",null,"With union types, a variable can be of one type or another type."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"const union: number | string = 5; // number\nconst union2: number | string = 'hello'; // string\n\ntype TrafficLightColors = 'red' | 'green' | 'yellow';\ntype PrimaryColors = 'red' | 'green' | 'blue';\n\n// \"red\" | \"green\" | \"yellow\" | \"blue\"\ntype union = PrimaryColors | TrafficLightColors;\n")),(0,i.kt)("h4",{id:"intersection-types"},"Intersection Types"),(0,i.kt)("p",null,"With union types, a variable must be of one type and another type."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"// Intersection Type\ntype TrafficLightColors = 'red' | 'green' | 'yellow';\ntype PrimaryColors = 'red' | 'green' | 'blue';\ntype intersect = PrimaryColors & TrafficLightColors; // \"red\" | \"green\"\n")),(0,i.kt)("h3",{id:"type-inference"},"Type Inference"),(0,i.kt)("p",null,"Type inference is determining type information without being told explicitly. TypeScript has limited type inference capabilities. If it can't infer the type the default is ",(0,i.kt)("inlineCode",{parentName:"p"},"any"),"."),(0,i.kt)("p",null,"Sometimes type inference is easy:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"// TypeScript can infer these types\nlet isDone = false; // boolean\nlet decimal = 4.2; // number\nlet lang = 'typescript'; // string\n")),(0,i.kt)("p",null,"Other times it involves some more advanced reasoning:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"const whatType = (a, b, c) => (a(b + 1) === true ? b : c);\n")),(0,i.kt)("p",null,"What are the types of ",(0,i.kt)("inlineCode",{parentName:"p"},"a, b, c")," and what is the return type?"),(0,i.kt)("p",null,"First ",(0,i.kt)("inlineCode",{parentName:"p"},"b")," should be a number because we are adding 1 to it. Knowing ",(0,i.kt)("inlineCode",{parentName:"p"},"b")," should be a number, ",(0,i.kt)("inlineCode",{parentName:"p"},"a")," should then be a function taking in a ",(0,i.kt)("inlineCode",{parentName:"p"},"number")," and returning a ",(0,i.kt)("inlineCode",{parentName:"p"},"boolean"),". Finally, this function returns either ",(0,i.kt)("inlineCode",{parentName:"p"},"b")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"c")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"b")," is already a ",(0,i.kt)("inlineCode",{parentName:"p"},"number")," so ",(0,i.kt)("inlineCode",{parentName:"p"},"c")," must also be ",(0,i.kt)("inlineCode",{parentName:"p"},"number"),". Thus the return type is ",(0,i.kt)("inlineCode",{parentName:"p"},"number"),"."),(0,i.kt)("p",null,"We expect the following types:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"a: number => boolean\nb: number\nc: number\nreturn: number\n")),(0,i.kt)("p",null,"In reality TypeScript infers the following:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"a: any\nb: any\nc: any\nreturn: any\n")),(0,i.kt)("h3",{id:"add-typescript-to-react"},"Add TypeScript to React!"),(0,i.kt)("p",null,"You can learn how to add TypeScript to your Create React App application ",(0,i.kt)("a",{parentName:"p",href:"https://create-react-app.dev/docs/adding-typescript/"},"here"),"."))}d.isMDXComponent=!0}}]);