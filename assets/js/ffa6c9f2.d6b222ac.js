"use strict";(self.webpackChunktrends_in_web_dev_website=self.webpackChunktrends_in_web_dev_website||[]).push([[6338],{7300:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var a=n(6687);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=a.createContext({}),s=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=s(e.components);return a.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=s(n),m=o,h=d["".concat(c,".").concat(m)]||d[m]||u[m]||r;return n?a.createElement(h,i(i({ref:t},p),{},{components:n})):a.createElement(h,i({ref:t},p))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=d;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var s=2;s<r;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},4677:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return c},metadata:function(){return s},toc:function(){return p},default:function(){return d}});var a=n(3206),o=n(5421),r=(n(6687),n(7300)),i=["components"],l={id:"lecture5",title:"Lecture 5"},c=void 0,s={unversionedId:"lecture5",id:"version-2021fa/lecture5",isDocsHomePage:!1,title:"Lecture 5",description:"Lecture Slides",source:"@site/versioned_docs/version-2021fa/lecture5.md",sourceDirName:".",slug:"/lecture5",permalink:"/docs/lecture5",tags:[],version:"2021fa",frontMatter:{id:"lecture5",title:"Lecture 5"},sidebar:"version-2021fa/docs",previous:{title:"Lecture 4",permalink:"/docs/lecture4"},next:{title:"Lecture 6",permalink:"/docs/lecture6"}},p=[{value:"Creating a React project",id:"creating-a-react-project",children:[],level:2},{value:"Your First Component",id:"your-first-component",children:[],level:2},{value:"Wat! What&#39;s going on",id:"wat-whats-going-on",children:[{value:"Functional Component",id:"functional-component",children:[],level:3},{value:"<code>App.tsx</code>",id:"apptsx",children:[],level:3},{value:"<code>index.tsx</code>",id:"indextsx",children:[],level:3}],level:2},{value:"Stateful Component",id:"stateful-component",children:[],level:2},{value:"Rendering lists",id:"rendering-lists",children:[],level:2}],u={toc:p};function d(e){var t=e.components,n=(0,o.Z)(e,i);return(0,r.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://docs.google.com/presentation/d/1LKOlGi1fo_6BewlhKCMEH_rsUZyutd4mfRJeWsSq1Uc/edit?usp=sharing"},"Lecture Slides")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/assignment3"},"Assignment 3")," (due 10/28 6:29 PM on CMS)"),(0,r.kt)("h2",{id:"creating-a-react-project"},"Creating a React project"),(0,r.kt)("p",null,"When working with React, there are a bunch of libraries and tools that we want\nto use to make our lives easier. We ",(0,r.kt)("em",{parentName:"p"},"could")," set it up manually, but thankfully\nCRA (create-react-app) does a lot of it for us!"),(0,r.kt)("p",null,"We can set up a project with CRA with the following command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"yarn create react-app [APP_NAME] --template typescript\n")),(0,r.kt)("p",null,"This will create a folder called ",(0,r.kt)("inlineCode",{parentName:"p"},"[APP_NAME]")," (you can change it to whatever you\nwant) which will contain a TypeScript React project with everything set up!"),(0,r.kt)("p",null,"You'll be able to run commands like ",(0,r.kt)("inlineCode",{parentName:"p"},"yarn start")," inside that folder to do things\nlike serve your website locally."),(0,r.kt)("p",null,"The entry point of the program is (as usual) ",(0,r.kt)("inlineCode",{parentName:"p"},"src/index.tsx")," and the main React\ncomponent by convention is found in ",(0,r.kt)("inlineCode",{parentName:"p"},"src/App.tsx"),"."),(0,r.kt)("h2",{id:"your-first-component"},"Your First Component"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="ContactCard.tsx"',title:'"ContactCard.tsx"'},"type Props = { readonly name: string; readonly githubLink: string };\n\nconst ContactCard = ({ name, githubLink }: Props) => (\n  <div>\n    You can reach {name} at\n    <a href={githubLink}>{githubLink}</a>\n  </div>\n);\n")),(0,r.kt)("h2",{id:"wat-whats-going-on"},"Wat! What's going on"),(0,r.kt)("h3",{id:"functional-component"},"Functional Component"),(0,r.kt)("p",null,"The simplest component in React is a functional component. A functional component\ndoes not have any internal state. You can think of it as a function whose inputs\nare some JavaScript object and the output is some HTML code that is generated\nfrom the data."),(0,r.kt)("p",null,"In React, we call the JavaScript object ",(0,r.kt)("inlineCode",{parentName:"p"},"props"),", so you can see code like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="ContactCard.tsx"',title:'"ContactCard.tsx"'},"type Props = { readonly name: string; readonly githubLink: string };\n\nconst ContactCard = (props: Props) => (\n  <div>\n    You can reach {props.name} at\n    <a href={props.githubLink}>{props.githubLink}</a>\n  </div>\n);\n")),(0,r.kt)("p",null,"Just calling the input ",(0,r.kt)("inlineCode",{parentName:"p"},"props")," is not good for documentation purpose, so we\nusually use object destructuring to make it more explicit:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="ContactCard.tsx"',title:'"ContactCard.tsx"'},"type Props = { readonly name: string; readonly githubLink: string };\n\nconst ContactCard = ({ name, githubLink }: Props) => (\n  <div>\n    You can reach {name} at\n    <a href={githubLink}>{githubLink}</a>\n  </div>\n);\n")),(0,r.kt)("p",null,"In order for this component to be reused in another file, we need to export it:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="ContactCard.tsx"',title:'"ContactCard.tsx"'},"type Props = { readonly name: string; readonly githubLink: string };\n\nconst ContactCard = ({ name, githubLink }: Props) => (\n  <div>\n    You can reach {name} at\n    <a href={githubLink}>{githubLink}</a>\n  </div>\n);\n\nexport default ContactCard;\n")),(0,r.kt)("p",null,"React does not care about the arrow function syntax, so you can also write\nit in function definition syntax:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="ContactCard.tsx"',title:'"ContactCard.tsx"'},"type Props = { readonly name: string; readonly githubLink: string };\n\nfunction ContactCard({ name, githubLink }: Props) {\n  return (\n    <div>\n      You can reach {name} at\n      <a href={githubLink}>{githubLink}</a>\n    </div>\n  );\n}\n\nexport default ContactCard;\n")),(0,r.kt)("p",null,"For this course, we prefer that you use arrow function syntax."),(0,r.kt)("h3",{id:"apptsx"},(0,r.kt)("inlineCode",{parentName:"h3"},"App.tsx")),(0,r.kt)("p",null,"Convention has ",(0,r.kt)("inlineCode",{parentName:"p"},"App.tsx")," as the main component of your React app. To add an\ninstance of ",(0,r.kt)("inlineCode",{parentName:"p"},"ContactCard")," to your app, you can add it to ",(0,r.kt)("inlineCode",{parentName:"p"},"App.tsx"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="App.tsx"',title:'"App.tsx"'},'const link = \'https://github.com/cornell-dti\';\n\nconst App = () => {\n  return (\n    <div className="App">\n      <ContactCard name="Cornell DTI" githubLink={link} />\n    </div>\n  );\n};\n')),(0,r.kt)("h3",{id:"indextsx"},(0,r.kt)("inlineCode",{parentName:"h3"},"index.tsx")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="index.tsx"',title:'"index.tsx"'},"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n")),(0,r.kt)("p",null,"In a React app, ",(0,r.kt)("inlineCode",{parentName:"p"},"index.tsx")," is usually the entry point. You usually won't need\nto touch this file too much."),(0,r.kt)("h2",{id:"stateful-component"},"Stateful Component"),(0,r.kt)("p",null,"Imagine you are writing a contacts app and you need to implement an editor."),(0,r.kt)("p",null,"Unlike the previous components, you need to maintain state. In React, you will\nneed ",(0,r.kt)("inlineCode",{parentName:"p"},"hooks"),". Hooks are functions that use state and lifecycle methods inside\nfunctional components. The ",(0,r.kt)("inlineCode",{parentName:"p"},"useState")," hook is the hook for maintaining state.\nNote that the general naming convention of a hook is ",(0,r.kt)("inlineCode",{parentName:"p"},"useXXXX"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"import { useState, ChangeEvent } from 'react';\n\nconst NewContact = () => {\n  // name is the variable for the state, setName is the function you can use\n  // to change the state.\n  const [name, setName] = useState('');\n  const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\n    // To extract the value from input box, use the following line.\n    const n = event.currentTarget.value;\n    setName(n);\n  };\n  return (\n    <div>\n      <p>Name: {name}</p>\n      <input\n        type=\"text\"\n        placeholder=\"enter the name here\"\n        value={name}\n        onChange={handleChange}\n      />\n    </div>\n  );\n};\n\nexport default NewContact;\n")),(0,r.kt)("h2",{id:"rendering-lists"},"Rendering lists"),(0,r.kt)("p",null,"You may want to render a list of ",(0,r.kt)("inlineCode",{parentName:"p"},"YourAwesomeComponent"),". Here are some examples\nto show how you can achieve this in different ways."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"// Suppose you have a ContactCard component defined there.\nimport ContactCard from './ContactCard';\n\ntype Contact = { name: string; githubLink: string };\n\nconst data: Contact[] = [\n  { name: 'Jason', githubLink: 'www.github.com/guessJason' },\n  { name: 'Peter', githubLink: 'www.github.com/peterIsCool' },\n  { name: 'Enoch', githubLink: 'www.github.com/eno' },\n];\n\nconst ListBySimpleMap = () => (\n  <div>\n    {data.map((contact: Contact) => (\n      <ContactCard\n        key={contact.name}\n        name={contact.name}\n        githubLink={contact.githubLink}\n      />\n    ))}\n  </div>\n);\n\nconst ListBySimpleMapWithObjectDestructing = () => (\n  <div>\n    {data.map(({ name, githubLink }) => (\n      <ContactCard key={name} name={name} githubLink={githubLink} />\n    ))}\n  </div>\n);\n\nconst ListBySimpleMapWithSpread = () => (\n  <div>\n    {data.map((contact: Contact) => (\n      <ContactCard key={contact.name} {...contact} />\n    ))}\n  </div>\n);\n")),(0,r.kt)("p",null,"Note that we always need a ",(0,r.kt)("inlineCode",{parentName:"p"},"key")," prop. Without this, React will give you\nwarnings in the console. React needs a unique ",(0,r.kt)("inlineCode",{parentName:"p"},"key")," for each item in the list to\nhelp it avoid rerendering everything when only one item in the list changes.\nIn this particular example, you should only use ",(0,r.kt)("inlineCode",{parentName:"p"},"name")," as the key if you know\nthat the property ",(0,r.kt)("inlineCode",{parentName:"p"},"name")," is unique. However, if there are multiple objects with\nthe same name in the list that are used as a key, it would confuse React."))}d.isMDXComponent=!0},3206:function(e,t,n){function a(){return a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},a.apply(this,arguments)}n.d(t,{Z:function(){return a}})},5421:function(e,t,n){function a(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}n.d(t,{Z:function(){return a}})}}]);