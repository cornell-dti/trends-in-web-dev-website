(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{62:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",function(){return s}),n.d(t,"rightToc",function(){return i}),n.d(t,"default",function(){return d});n(0);var a=n(66);function o(){return(o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}function r(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s={id:"lecture7",title:"Lecture 7 - Database 1"},i=[{value:"Before the lecture",id:"before-the-lecture",children:[{value:"Firebase Setup",id:"firebase-setup",children:[]},{value:"Check your setup",id:"check-your-setup",children:[]}]},{value:"Database 101",id:"database-101",children:[{value:"Why do we need a database for our backend",id:"why-do-we-need-a-database-for-our-backend",children:[]},{value:"Types of database",id:"types-of-database",children:[]}]},{value:"Key Terms for Firestore & NoSQL Manipulations",id:"key-terms-for-firestore--nosql-manipulations",children:[]},{value:"Basic Database Manipuations",id:"basic-database-manipuations",children:[]},{value:"Sample code",id:"sample-code",children:[]}],l={rightToc:i},c="wrapper";function d(e){var t=e.components,n=r(e,["components"]);return Object(a.b)(c,o({},l,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("h2",{id:"before-the-lecture"},"Before the lecture"),Object(a.b)("h3",{id:"firebase-setup"},"Firebase Setup"),Object(a.b)("ol",null,Object(a.b)("li",{parentName:"ol"},"Create an account on ",Object(a.b)("a",o({parentName:"li"},{href:"https://firebase.google.com"}),"Firebase"),". You only need the free version."),Object(a.b)("li",{parentName:"ol"},"Go to the database tab in Firebase console. Choose to create ",Object(a.b)("strong",{parentName:"li"},"Firestore")," starting in locked\nmode."),Object(a.b)("li",{parentName:"ol"},"Download the service account in ",Object(a.b)("inlineCode",{parentName:"li"},"Project Settings > Service accounts")," as ",Object(a.b)("inlineCode",{parentName:"li"},"service-account.json"),".\nThis json should be kept secret.")),Object(a.b)("h3",{id:"check-your-setup"},"Check your setup"),Object(a.b)("h4",{id:"code"},"Code"),Object(a.b)("p",null,"Create an folder with empty ",Object(a.b)("inlineCode",{parentName:"p"},"package.json")," and empty ",Object(a.b)("inlineCode",{parentName:"p"},"index.js"),". Put the downloaded\n",Object(a.b)("inlineCode",{parentName:"p"},"service-account.json")," in this folder."),Object(a.b)("p",null,"Copy the following code into ",Object(a.b)("inlineCode",{parentName:"p"},"package.json"),"."),Object(a.b)("pre",null,Object(a.b)("code",o({parentName:"pre"},{className:"language-json"}),'{\n  "name": "self-check",\n  "version": "0.1.0",\n  "main": "index.js",\n  "license": "MIT",\n  "dependencies": {\n    "body-parser": "^1.18.3",\n    "express": "^4.16.4",\n    "firebase-admin": "^7.2.0"\n  }\n}\n')),Object(a.b)("p",null,"Copy the following code into ",Object(a.b)("inlineCode",{parentName:"p"},"index.js"),". Remember to replace ",Object(a.b)("inlineCode",{parentName:"p"},"databaseURL")," with\nthe url of your own."),Object(a.b)("pre",null,Object(a.b)("code",o({parentName:"pre"},{className:"language-javascript"}),"const admin = require('firebase-admin');\nconst serviceAccount = require('./service-account.json');\nconst express = require('express');\nconst bodyParser = require('body-parser');\n\nadmin.initializeApp({\n  credential: admin.credential.cert(serviceAccount),\n  databaseURL: '[YOUR_OWN_DATABASE_URL]'\n});\n\nconst db = admin.firestore();\n\nconst app = express();\nconst port = 8080;\napp.use(bodyParser.json());\n\napp.get('/', (_, resp) => resp.send('Hello World!'));\n\napp.get('/self-check', async (_, resp) => {\n  const data = {\n    name: 'Hello World',\n    time: admin.firestore.FieldValue.serverTimestamp()\n  };\n  console.log('Sending doc to DB.');\n  await db\n    .collection('test')\n    .doc('random-id')\n    .set(data);\n  console.log('Doc recorded in DB');\n  const docRef = db.collection('test').doc('random-id');\n  console.log('Trying to obtain doc in DB.');\n  const docSnapshot = await docRef.get();\n  console.log(\n    `We obtained a doc with id ${docSnapshot.id}. It's content is logged below:`\n  );\n  console.log(docSnapshot.data());\n  console.log('Now we will try to remove it.');\n  await docRef.delete();\n  console.log('The document is deleted.');\n  console.log(\n    'After all these operations, the db should be empty. We check that.'\n  );\n  db.collection('test')\n    .get()\n    .then(querySnapshot => {\n      if (querySnapshot.docs.length === 0) {\n        console.log('We passed the check. The page in browser should say OK.');\n        resp.status(200).send('OK.');\n      } else {\n        console.log('We failed the check. Please check your setup.');\n        resp.status(500).send('Something is messed up!');\n      }\n    });\n});\n\napp.listen(port, () => console.log(`Example app listening on port ${port}!`));\n")),Object(a.b)("h4",{id:"verify-that-it-works"},"Verify that it works"),Object(a.b)("ol",null,Object(a.b)("li",{parentName:"ol"},"Run ",Object(a.b)("inlineCode",{parentName:"li"},"npm install"),";"),Object(a.b)("li",{parentName:"ol"},"Run ",Object(a.b)("inlineCode",{parentName:"li"},"node index.js"),";"),Object(a.b)("li",{parentName:"ol"},"Open ",Object(a.b)("a",o({parentName:"li"},{href:"http://localhost:8080"}),Object(a.b)("inlineCode",{parentName:"a"},"http://localhost:8080")),". You will see\n",Object(a.b)("inlineCode",{parentName:"li"},"Hello World!"),";"),Object(a.b)("li",{parentName:"ol"},"Open ",Object(a.b)("a",o({parentName:"li"},{href:"http://localhost:8080/self-check"}),Object(a.b)("inlineCode",{parentName:"a"},"http://localhost:8080/self-check")),".\nYou will see ",Object(a.b)("inlineCode",{parentName:"li"},"OK!")," in the browser. In the terminal, you will see something\nlike this:")),Object(a.b)("pre",null,Object(a.b)("code",o({parentName:"pre"},{className:"language-text"}),"Example app listening on port 8080!\nSending doc to DB.\nDoc recorded in DB\nTrying to obtain doc in DB.\nWe obtained a doc with id random-id. It's content is logged below:\n{ name: 'Hello World',\n  time: Timestamp { _seconds: 1554738493, _nanoseconds: 994000000 } }\nNow we will try to remove it.\nThe document is deleted.\nAfter all these operations, the db should be empty. We check that.\nWe passed the check. The page in browser should say OK.\n")),Object(a.b)("h2",{id:"database-101"},"Database 101"),Object(a.b)("h3",{id:"why-do-we-need-a-database-for-our-backend"},"Why do we need a database for our backend"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"Data stored within Node.js is ",Object(a.b)("strong",{parentName:"li"},"per instance")),Object(a.b)("li",{parentName:"ul"},"Most applications require ",Object(a.b)("strong",{parentName:"li"},"persistence")),Object(a.b)("li",{parentName:"ul"},"Data analysis"),Object(a.b)("li",{parentName:"ul"},"Performant data location"),Object(a.b)("li",{parentName:"ul"},"Offloading unneeded data from memory")),Object(a.b)("h3",{id:"types-of-database"},"Types of database"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"MySQL + Relational Databases",Object(a.b)("ul",{parentName:"li"},Object(a.b)("li",{parentName:"ul"},"Stores data in tables, utilizing rows and tables."),Object(a.b)("li",{parentName:"ul"},"Is relational (think a tuple)"),Object(a.b)("li",{parentName:"ul"},"Has a schema"))),Object(a.b)("li",{parentName:"ul"},"NoSQL + Less-Relational Databases",Object(a.b)("ul",{parentName:"li"},Object(a.b)("li",{parentName:"ul"},"Literally they are not MySQL"),Object(a.b)("li",{parentName:"ul"},"Many types: hierarchies, object-oriented, and more!"))),Object(a.b)("li",{parentName:"ul"},"NoSQL + Firestore",Object(a.b)("ul",{parentName:"li"},Object(a.b)("li",{parentName:"ul"},"We will focus on NoSQL"),Object(a.b)("li",{parentName:"ul"},"Many NoSQL implementations are schema-less or have a partial schema"),Object(a.b)("li",{parentName:"ul"},"Firestore is a cloud-hosted NoSQL database",Object(a.b)("ul",{parentName:"li"},Object(a.b)("li",{parentName:"ul"},"Very flexible and can be used with most popular languages"),Object(a.b)("li",{parentName:"ul"},"Uses documents to store data"),Object(a.b)("li",{parentName:"ul"},"Efficient querying for data")))))),Object(a.b)("h2",{id:"key-terms-for-firestore--nosql-manipulations"},"Key Terms for Firestore & NoSQL Manipulations"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},'Document - the "entry" in the database'),Object(a.b)("li",{parentName:"ul"},"ID - the unique identifier for a Document"),Object(a.b)("li",{parentName:"ul"},"Key & Property - like JavaScript, each key is mapped to a property"),Object(a.b)("li",{parentName:"ul"},"Maps - Nested objects within a document"),Object(a.b)("li",{parentName:"ul"},"Collections: Set of related documents")),Object(a.b)("p",null,"Example:"),Object(a.b)("pre",null,Object(a.b)("code",o({parentName:"pre"},{className:"language-yml"}),"alovelance: # id\n  - name: # property name\n      first: 'Ada' # Properties can be nested.\n      last: 'Lovelace'\n    # Properties can have different types. Firestore doesn't enforce the schema.\n    born: 1815\n")),Object(a.b)("p",null,"Here is a JSON representation of the same document:"),Object(a.b)("pre",null,Object(a.b)("code",o({parentName:"pre"},{className:"language-json"}),'{\n  "id": "alovelance",\n  "data": {\n    "name": {\n      "first": "Ada",\n      "last": "Lovelace"\n    },\n    "born": 1815\n  }\n}\n')),Object(a.b)("h2",{id:"basic-database-manipuations"},"Basic Database Manipuations"),Object(a.b)("p",null,"People usually call that ",Object(a.b)("inlineCode",{parentName:"p"},"CRUD"),", which stands for:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("strong",{parentName:"li"},"C"),"reate/Insert - Create a document (will fail if the document exists)"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("strong",{parentName:"li"},"R"),"ead/Find/Query - To search for documents based on their properties"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("strong",{parentName:"li"},"U"),"pdate - Update an existing document (will fail otherwise)"),Object(a.b)("li",{parentName:"ul"},"Delete - Delete an existing document")),Object(a.b)("p",null,"For convenience, most NoSQL database also provides an ",Object(a.b)("em",{parentName:"p"},"upsert")," operation. It\nwill create the document or update an existing document. You can think of that\nas an atomic operation that does:"),Object(a.b)("pre",null,Object(a.b)("code",o({parentName:"pre"},{className:"language-javascript"}),"if (document.exists()) {\n  database.update(document);\n} else {\n  database.insert(document);\n}\n")),Object(a.b)("p",null,"In Firestore, you can either insert a new document with a specified ID, or allow\nFirestore to generate its own ID for you."),Object(a.b)("p",null,"The update method in Firestore allows you to update certain fields of the\ndocument without overwriting the entire thing."),Object(a.b)("h2",{id:"sample-code"},"Sample code"),Object(a.b)("p",null,"The following code demonstrate how we can do basic CRUD with Firestore.\nNote that the code below does not care about what are the fields of a post,\nbecause Firestore doesn't require you to have a predefined set of field. This\ngives you flexibility when writing your backend code."),Object(a.b)("pre",null,Object(a.b)("code",o({parentName:"pre"},{className:"language-javascript"}),"const admin = require('firebase-admin');\nconst serviceAccount = require('./service-account.json');\nconst express = require('express');\nconst bodyParser = require('body-parser');\n\nadmin.initializeApp({\n  credential: admin.credential.cert(serviceAccount),\n  databaseURL: 'https://dti-web-dev-sp19-db-demo.firebaseio.com'\n});\n\nconst db = admin.firestore();\n\nconst app = express();\nconst port = 8080;\napp.use(bodyParser.json());\n\napp.get('/', (_, resp) => resp.send('Hello World!'));\n\nconst postsCollection = db.collection('posts');\n\n// create a post\napp.put('/post', async (req, resp) => {\n  const post = req.body;\n  const addedDoc = await postsCollection.doc('hi').set(post);\n  resp.status(200).send(addedDoc.id);\n});\n\n// read all posts\napp.get('/post', async (_, resp) => {\n  const allPostsDoc = await postsCollection.get();\n  resp\n    .status(200)\n    .json(allPostsDoc.docs.map(doc => ({ id: doc.id, ...doc.data() })));\n});\n\n// 2019-04-17\napp.get('/post/today', async (_, resp) => {\n  const today = new Date();\n  const todayString = `${today.getFullYear()}-${today.getMonth() +\n    1}-${today.getDate()}`;\n  const todayPostsDoc = await postsCollection\n    .where('date', '==', todayString)\n    .get();\n  resp\n    .status(200)\n    .json(todayPostsDoc.docs.map(doc => ({ id: doc.id, ...doc.data() })));\n});\n\n// sorted posts\napp.get('/post/sorted', async (_, resp) => {\n  const sortedPosts = await postsCollection.orderBy('date', 'desc').get();\n  resp\n    .status(200)\n    .json(sortedPosts.docs.map(doc => ({ id: doc.id, ...doc.data() })));\n});\n\n// update a post\napp.post('/post/:id', async (req, res) => {\n  const id = req.params['id'];\n  const newPost = req.body;\n  await postsCollection.doc(id).update(newPost);\n  res.status(200).send('UPDATED');\n});\n\n// delete a post\napp.delete('/post/:id', async (req, res) => {\n  const id = req.params['id'];\n  await postsCollection.doc(id).delete();\n  res.status(200).send('DELETED');\n});\n\napp.listen(port, () => console.log(`Example app listening on port ${port}!`));\n")))}d.isMDXComponent=!0},66:function(e,t,n){"use strict";n.d(t,"a",function(){return i}),n.d(t,"b",function(){return p});var a=n(0),o=n.n(a),r=o.a.createContext({}),s=function(e){var t=o.a.useContext(r),n=t;return e&&(n="function"==typeof e?e(t):Object.assign({},t,e)),n},i=function(e){var t=s(e.components);return o.a.createElement(r.Provider,{value:t},e.children)};var l="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},d=function(e){var t=e.components,n=e.mdxType,a=e.originalType,r=e.parentName,i=function(e,t){var n={};for(var a in e)Object.prototype.hasOwnProperty.call(e,a)&&-1===t.indexOf(a)&&(n[a]=e[a]);return n}(e,["components","mdxType","originalType","parentName"]),l=s(t),d=n,p=l[r+"."+d]||l[d]||c[d]||a;return t?o.a.createElement(p,Object.assign({},i,{components:t})):o.a.createElement(p,i)};function p(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,s=new Array(r);s[0]=d;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[l]="string"==typeof e?e:a,s[1]=i;for(var p=2;p<r;p++)s[p]=n[p];return o.a.createElement.apply(null,s)}return o.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"}}]);