(window.webpackJsonp=window.webpackJsonp||[]).push([[46],{116:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return r})),n.d(t,"metadata",(function(){return s})),n.d(t,"toc",(function(){return l})),n.d(t,"default",(function(){return p}));var a=n(3),i=n(7),o=(n(0),n(138)),r={id:"assignment5",title:"Assignment 5"},s={unversionedId:"assignment5",id:"version-2021sp/assignment5",isDocsHomePage:!1,title:"Assignment 5",description:"For A5, you'll be building a React app that utilizes conditional rendering",source:"@site/versioned_docs/version-2021sp/assignment5.md",slug:"/assignment5",permalink:"/docs/2021sp/assignment5",version:"2021sp",sidebar:"docs",previous:{title:"Assignment 4",permalink:"/docs/2021sp/assignment4"},next:{title:"Final Project",permalink:"/docs/2021sp/finalproject"}},l=[{value:"Part 1 - <code>App.tsx</code> Scaffolding",id:"part-1---apptsx-scaffolding",children:[]},{value:"Part 2 - Lifting State Up",id:"part-2---lifting-state-up",children:[]},{value:"Part 3 - Render the Grocery List",id:"part-3---render-the-grocery-list",children:[]},{value:"Part 4 - Conditional Rendering",id:"part-4---conditional-rendering",children:[]},{value:"Part 5 (Optional): Input Validation",id:"part-5-optional-input-validation",children:[]},{value:"Submission",id:"submission",children:[]},{value:"FAQ",id:"faq",children:[{value:"Does my app need to look exactly like what the GIF shows?",id:"does-my-app-need-to-look-exactly-like-what-the-gif-shows",children:[]},{value:"How do I get the type for the callback function when lifting the state up from the child components?",id:"how-do-i-get-the-type-for-the-callback-function-when-lifting-the-state-up-from-the-child-components",children:[]},{value:"Getting a weird error with my items state in the <code>App.tsx</code> (<code>never[]</code>)",id:"getting-a-weird-error-with-my-items-state-in-the-apptsx-never",children:[]}]}],c={toc:l};function p(e){var t=e.components,r=Object(i.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},c,r,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"For A5, you'll be building a React app that utilizes conditional rendering\nand the concept of lifting state up."),Object(o.b)("p",null,"In this project, we'll be building a searchable or filterable grocery list that\nmaintains a list of items, each with its own metadata. This metadata simply\nconsists of the name of the item, as well as its price. The app is composed out\nof a few components: one that maintains each grocery item itself, one that\nrenders the list of grocery items, and one that acts as a search bar for us\nto filter and search through our list of items, rerendering the list of grocery\nitems. There will also be some helper text depending on the state of items in the\ngrocery list. You will need to use lifting state up and conditional rendering in\norder to accomplish all of this."),Object(o.b)("p",null,"Here is a GIF showing the final functionality of the app:"),Object(o.b)("p",null,Object(o.b)("img",{alt:"Assignment 5 Demo",src:n(185).default})),Object(o.b)("h2",{id:"part-1---apptsx-scaffolding"},"Part 1 - ",Object(o.b)("inlineCode",{parentName:"h2"},"App.tsx")," Scaffolding"),Object(o.b)("p",null,"In App.tsx, we will have two states, as well as a type definition to be exported\nto other components. Let's start with the type definition. We want to make a type\nfor each item's metadata (remember, each item has a string name and a price that\nis a number). When you define this, make sure to put the ",Object(o.b)("inlineCode",{parentName:"p"},"export")," keyword before\nthe type definition so that you can import it in other components that need to use it."),Object(o.b)("p",null,"Next, create the two states, each of which will be lifted up from a child component.\nThe first state should represent all of the items (metadata) on the list, and the\nsecond should keep track of the current search query string. Do not display the list in this component; we will be passing it down to a child component."),Object(o.b)("h2",{id:"part-2---lifting-state-up"},"Part 2 - Lifting State Up"),Object(o.b)("p",null,"Create two components: ",Object(o.b)("inlineCode",{parentName:"p"},"SearchBar.tsx")," and ",Object(o.b)("inlineCode",{parentName:"p"},"AddItemBar.tsx"),". The first one\nwill have an ",Object(o.b)("inlineCode",{parentName:"p"},"<input>")," field representing the search bar, and will need to lift\nthe value of the input up into the ",Object(o.b)("inlineCode",{parentName:"p"},"App.tsx")," parent. The second one will have two\ninput fields: one for the name of the item, and the second for the price, as well\nas a button to actually submit the data in the two fields to the list. The button\n",Object(o.b)("inlineCode",{parentName:"p"},"onClick")," prop will be useful for implementing this, as well as maintaining two\ninternal states for the name and price values in ",Object(o.b)("inlineCode",{parentName:"p"},"AddItemBar"),"."),Object(o.b)("p",null,"Once you've created these child components, add them to ",Object(o.b)("inlineCode",{parentName:"p"},"App.tsx")," and supply them\nwith the necessary props. Assuming you've lifted state up correctly from them, you\ncan now make use of the search query and the list of item metadata in order to\nrender a filtered list based on the query."),Object(o.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(o.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(o.b)("h5",{parentName:"div"},Object(o.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(o.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(o.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(o.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(o.b)("p",{parentName:"div"},"When working with HTML ",Object(o.b)("inlineCode",{parentName:"p"},"<input>")," tags, you can specify the ",Object(o.b)("inlineCode",{parentName:"p"},"type")," property to be\nof ",Object(o.b)("inlineCode",{parentName:"p"},"'number'")," if the input field corresponds to a numerical input."))),Object(o.b)("h2",{id:"part-3---render-the-grocery-list"},"Part 3 - Render the Grocery List"),Object(o.b)("p",null,"Create a new component called ",Object(o.b)("inlineCode",{parentName:"p"},"GroceryList.tsx"),". This should display the list in\na similar way as the songs list from Assignment 4, but should be made up of the items\nthat have the search query as a substring of their name\n(",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes"}),"hint"),"). It should also show each\nitem's name and price. You can format it as in the GIF."),Object(o.b)("h2",{id:"part-4---conditional-rendering"},"Part 4 - Conditional Rendering"),Object(o.b)("p",null,"Use conditional rendering to handle two cases: first, if there are no grocery\nitems in the list, render some text that tells the user that the list is empty.\nOtherwise, don't display anything. Second, if the search query didn't match any\nof the items in the list, make sure to render a message saying that the item could\nnot be found."),Object(o.b)("h2",{id:"part-5-optional-input-validation"},"Part 5 (Optional): Input Validation"),Object(o.b)("p",null,"You can perform input validation on the ",Object(o.b)("inlineCode",{parentName:"p"},"onClick")," event of our add item button\nby making sure that the name is not the empty string and the price is positive.\nThis is seen in the demo, and implemented using an ",Object(o.b)("inlineCode",{parentName:"p"},"alert()")," function call to\nalert the user. (Note: generally, we avoid using ",Object(o.b)("inlineCode",{parentName:"p"},"alert()")," in actual production-level\napps, since it can be annoying and look like spam. If this were a more professional\napp, we would use some notification UI such as ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://stackoverflow.com/questions/1348788/what-does-toast-mean"}),"toasts"),".)"),Object(o.b)("h2",{id:"submission"},"Submission"),Object(o.b)("p",null,"Submit to CMS a zip file of everything in your project (",Object(o.b)("inlineCode",{parentName:"p"},"create-react-app"),") directory but ",Object(o.b)("strong",{parentName:"p"},"remove node_modules")," . ",Object(o.b)("em",{parentName:"p"},"Failure to remove")," ",Object(o.b)("inlineCode",{parentName:"p"},"node_modules")," ",Object(o.b)("em",{parentName:"p"},"will result in a ",Object(o.b)("strong",{parentName:"em"},"10 point")," deduction"),"."),Object(o.b)("h2",{id:"faq"},"FAQ"),Object(o.b)("h3",{id:"does-my-app-need-to-look-exactly-like-what-the-gif-shows"},"Does my app need to look exactly like what the GIF shows?"),Object(o.b)("p",null,"No, you're free to make your UI as pretty or as ugly as you want, as long as the\nfunctionality is there."),Object(o.b)("h3",{id:"how-do-i-get-the-type-for-the-callback-function-when-lifting-the-state-up-from-the-child-components"},"How do I get the type for the callback function when lifting the state up from the child components?"),Object(o.b)("p",null,"You can mouse over the type (using VS Code) of the setter function in the ",Object(o.b)("inlineCode",{parentName:"p"},"useState"),"\nhook for the state you want to lift up into the ",Object(o.b)("inlineCode",{parentName:"p"},"App.tsx"),". This way, you can use\nit in the prop type for each of the child components that need it."),Object(o.b)("h3",{id:"getting-a-weird-error-with-my-items-state-in-the-apptsx-never"},"Getting a weird error with my items state in the ",Object(o.b)("inlineCode",{parentName:"h3"},"App.tsx")," (",Object(o.b)("inlineCode",{parentName:"h3"},"never[]"),")"),Object(o.b)("p",null,"Unfortunately, TypeScript can't infer the type of your state if you set the initial\nvalue to simply ",Object(o.b)("inlineCode",{parentName:"p"},"[]"),", and it assumes that it's just a falsy value. To fix this,\nmake sure to parametrize the ",Object(o.b)("inlineCode",{parentName:"p"},"useState")," hook using the type definition you created;\nfor example, ",Object(o.b)("inlineCode",{parentName:"p"},"const [state, setState] = useState<myType[]>([])"),"."))}p.isMDXComponent=!0},138:function(e,t,n){"use strict";n.d(t,"a",(function(){return d})),n.d(t,"b",(function(){return m}));var a=n(0),i=n.n(a);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=i.a.createContext({}),p=function(e){var t=i.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},d=function(e){var t=p(e.components);return i.a.createElement(c.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},u=i.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,r=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=p(n),u=a,m=d["".concat(r,".").concat(u)]||d[u]||h[u]||o;return n?i.a.createElement(m,s(s({ref:t},c),{},{components:n})):i.a.createElement(m,s({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,r=new Array(o);r[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,r[1]=s;for(var c=2;c<o;c++)r[c]=n[c];return i.a.createElement.apply(null,r)}return i.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},185:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/assignment5-func-c0377800a741bfe50935dc977d0f1ce3.gif"}}]);