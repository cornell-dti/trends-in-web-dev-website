(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{144:function(e,n,t){"use strict";t.d(n,"a",(function(){return p})),t.d(n,"b",(function(){return m}));var a=t(0),r=t.n(a);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var b=r.a.createContext({}),l=function(e){var n=r.a.useContext(b),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},p=function(e){var n=l(e.components);return r.a.createElement(b.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},d=r.a.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,b=c(e,["components","mdxType","originalType","parentName"]),p=l(t),d=a,m=p["".concat(i,".").concat(d)]||p[d]||u[d]||o;return t?r.a.createElement(m,s(s({ref:n},b),{},{components:t})):r.a.createElement(m,s({ref:n},b))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=d;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var b=2;b<o;b++)i[b]=t[b];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},84:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return i})),t.d(n,"metadata",(function(){return s})),t.d(n,"toc",(function(){return c})),t.d(n,"default",(function(){return l}));var a=t(3),r=t(7),o=(t(0),t(144)),i={id:"assignment3",title:"Assignment 3"},s={unversionedId:"assignment3",id:"version-2021fa/assignment3",isDocsHomePage:!1,title:"Assignment 3",description:"For this assignment, we will be taking a nice break from Express and Firebase to",source:"@site/versioned_docs/version-2021fa/assignment3.md",slug:"/assignment3",permalink:"/docs/assignment3",version:"2021fa",sidebar:"docs",previous:{title:"Assignment 2",permalink:"/docs/assignment2"}},c=[{value:"Question 1",id:"question-1",children:[{value:"Example for myMean",id:"example-for-mymean",children:[]}]},{value:"Question 2",id:"question-2",children:[{value:"Example for affordableHousing",id:"example-for-affordablehousing",children:[]}]},{value:"Question 3",id:"question-3",children:[{value:"Example for evenEven",id:"example-for-eveneven",children:[]}]},{value:"Question 4",id:"question-4",children:[{value:"NOTE",id:"note",children:[]},{value:"Example for makeSentences",id:"example-for-makesentences",children:[]}]},{value:"Submission",id:"submission",children:[]}],b={toc:c};function l(e){var n=e.components,t=Object(r.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},b,t,{components:n,mdxType:"MDXLayout"}),Object(o.b)("p",null,"For this assignment, we will be taking a nice break from Express and Firebase to\nlearn about some cool JavaScript/Typescript fundamentals!"),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"ALL questions in this assignment MUST be done using ",Object(o.b)("inlineCode",{parentName:"strong"},".map"),", ",Object(o.b)("inlineCode",{parentName:"strong"},".filter"),", or\n",Object(o.b)("inlineCode",{parentName:"strong"},".reduce"),". We will give you no credit for an approach that is not functional.")),Object(o.b)("p",null,"ALL functions must also be defined using ",Object(o.b)("strong",{parentName:"p"},"arrow functions"),":"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"(params) => {\n  // function body\n};\n")),Object(o.b)("p",null,"You must write your functions from the starter code. You are not allowed to change the function signature."),Object(o.b)("h2",{id:"question-1"},"Question 1"),Object(o.b)("p",null,"Write a function ",Object(o.b)("inlineCode",{parentName:"p"},"arrayMean")," that takes in an array of numbers and returns the mean.\nIf the array is empty, return undefined."),Object(o.b)("p",null,"Starter code:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"export const arrayMean = (array: number[]): number => {\n  /* TODO: add your code */\n};\n")),Object(o.b)("h3",{id:"example-for-mymean"},"Example for myMean"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"arrayMean([1, 2, 3, 4, 5]); // 3\narrayMean([]); // undefined\n")),Object(o.b)("h2",{id:"question-2"},"Question 2"),Object(o.b)("p",null,"Write a function ",Object(o.b)("inlineCode",{parentName:"p"},"affordableHousing")," that takes in an array of ",Object(o.b)("inlineCode",{parentName:"p"},"Apartment"),"s\nand returns the list of ",Object(o.b)("inlineCode",{parentName:"p"},"id"),"s of ",Object(o.b)("inlineCode",{parentName:"p"},"Apartment"),"s with ",Object(o.b)("inlineCode",{parentName:"p"},"rent")," less than or equal to\n",Object(o.b)("inlineCode",{parentName:"p"},"budget"),"."),Object(o.b)("p",null,"Starter code:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"type Apartment = {\n  id: string;\n  rent: number;\n};\n\nexport const affordableHousing = (\n  listings: Apartment[],\n  budget: number\n): string[] => {\n  /* TODO: add your code */\n};\n")),Object(o.b)("h3",{id:"example-for-affordablehousing"},"Example for affordableHousing"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"const apts: Apartment[] = [\n  { id: 'orbis', rent: 5000 },\n  { id: 'ereve', rent: 12345 },\n  { id: 'henesys', rent: 1337 },\n];\n\naffordableHousing(apts, 5000); // ['orbis', 'henesys']\naffordableHousing(apts, 4000); // ['henesys']\n")),Object(o.b)("h2",{id:"question-3"},"Question 3"),Object(o.b)("p",null,"Write a function ",Object(o.b)("inlineCode",{parentName:"p"},"evenEven")," that takes in an array of strings and returns true\nif every even-length string contains ",Object(o.b)("inlineCode",{parentName:"p"},"'even'")," as a substring."),Object(o.b)("p",null,"Starter code:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"export const evenEven = (array: string[]): boolean => {\n  /* TODO: add your code */\n};\n")),Object(o.b)("h3",{id:"example-for-eveneven"},"Example for evenEven"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"evenEven(['bob']); // true\nevenEven(['bob', 'steven']); // true\nevenEven(['bob', 'steven', 'even']); // true\nevenEven(['bob', 'steven', 'anna']); // false\n")),Object(o.b)("h2",{id:"question-4"},"Question 4"),Object(o.b)("p",null,"Write a function ",Object(o.b)("inlineCode",{parentName:"p"},"makeSentences")," that takes in an array of objects in the format\n",Object(o.b)("inlineCode",{parentName:"p"},"{name: string, age: number, breed: string}"),' and maps it to an array of\nsentences in the format "',Object(o.b)("em",{parentName:"p"},"name")," is ",Object(o.b)("em",{parentName:"p"},"age")," years old, and is a ",Object(o.b)("em",{parentName:"p"},"breed"),'."'),Object(o.b)("p",null,"Please use ",Object(o.b)("em",{parentName:"p"},"object destructuring")," to get object fields."),Object(o.b)("h3",{id:"note"},"NOTE"),Object(o.b)("p",null,'A "prototype" is an instance of an object in JavaScript/TypeScript. In\ndocumentation, methods are often denoted like: ',Object(o.b)("inlineCode",{parentName:"p"},"Type.prototype.method()")),Object(o.b)("p",null,"Remember, anything in JavaScript/TypeScript can be an object!"),Object(o.b)("p",null,"So, we can do: ",Object(o.b)("inlineCode",{parentName:"p"},"(5).toExponential(10)")," or ",Object(o.b)("inlineCode",{parentName:"p"},"let x = 5; x.toExponential()")),Object(o.b)("p",null,"Your goal is to round the age to the nearest tenth."),Object(o.b)("p",null,"For example, you want to display ",Object(o.b)("inlineCode",{parentName:"p"},'"5.6 years"')," for the value ",Object(o.b)("inlineCode",{parentName:"p"},"5.64")," and ",Object(o.b)("inlineCode",{parentName:"p"},'"5.7 years"')," for the value ",Object(o.b)("inlineCode",{parentName:"p"},"5.65"),"."),Object(o.b)("p",null,"Take a look at ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#Methods"}),"this documentation")," if you are stuck!"),Object(o.b)("h3",{id:"example-for-makesentences"},"Example for makeSentences"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"const doggos = [\n  { name: 'Sparky', age: 3.35, breed: 'Pomeranian Husky' },\n  { name: 'Oreo', age: 5.42, breed: 'Dalmatian' },\n  { name: 'Stella', age: 4, breed: 'Alaskan Klee Kai' },\n];\n\nmakeSentences(doggos);\n")),Object(o.b)("p",null,"should output"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"[\n  'Sparky is 3.4 years old and is a Pomeranian Husky',\n  'Oreo is 5.4 years old and is a Dalmatian',\n  'Stella is 4.0 years old and is a Alaskan Klee Kai',\n];\n")),Object(o.b)("p",null,"Starter code:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"// TODO: You should replace this any with an accurate object type in your submission!\ntype Doggo = any;\n\nexport const makeSentences = (array: Doggo[]): string[] => {\n  /* TODO: add your code */\n};\n")),Object(o.b)("p",null,'Don\'t worry about printing "year" vs "years" or "a" vs "an", unless you want the\nextra challenge!'),Object(o.b)("h2",{id:"submission"},"Submission"),Object(o.b)("p",null,"Please submit to CMS your ",Object(o.b)("inlineCode",{parentName:"p"},"index.ts")," file containing your implementations of\neach of the functions described above."))}l.isMDXComponent=!0}}]);